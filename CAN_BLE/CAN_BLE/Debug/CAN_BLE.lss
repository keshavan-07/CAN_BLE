
CAN_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025d8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  000025d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a4  20000014  000025ec  00020014  2**2
                  ALLOC
  3 .stack        00002000  200001b8  00002790  00020014  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001ff08  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029b0  00000000  00000000  0003ff9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ba0a  00000000  00000000  0004294d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a88  00000000  00000000  0004e357  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b48  00000000  00000000  0004eddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001dace  00000000  00000000  0004f927  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010b47  00000000  00000000  0006d3f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009843e  00000000  00000000  0007df3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c5c  00000000  00000000  0011637c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 21 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .!. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 99 12 00 00 29 01 00 00 29 01 00 00     ).......)...)...
      7c:	65 0d 00 00 29 01 00 00 29 01 00 00 29 01 00 00     e...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000014 	.word	0x20000014
      dc:	00000000 	.word	0x00000000
      e0:	000025d8 	.word	0x000025d8

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000018 	.word	0x20000018
     110:	000025d8 	.word	0x000025d8
     114:	000025d8 	.word	0x000025d8
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b01      	ldr	r3, [pc, #4]	; (124 <atmel_start_init+0x8>)
     120:	4798      	blx	r3
}
     122:	bd10      	pop	{r4, pc}
     124:	000002b5 	.word	0x000002b5

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     12e:	4a10      	ldr	r2, [pc, #64]	; (170 <Reset_Handler+0x44>)
     130:	4b10      	ldr	r3, [pc, #64]	; (174 <Reset_Handler+0x48>)
     132:	429a      	cmp	r2, r3
     134:	d009      	beq.n	14a <Reset_Handler+0x1e>
     136:	4b0f      	ldr	r3, [pc, #60]	; (174 <Reset_Handler+0x48>)
     138:	4a0d      	ldr	r2, [pc, #52]	; (170 <Reset_Handler+0x44>)
     13a:	e003      	b.n	144 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     13c:	6811      	ldr	r1, [r2, #0]
     13e:	6019      	str	r1, [r3, #0]
     140:	3304      	adds	r3, #4
     142:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     144:	490c      	ldr	r1, [pc, #48]	; (178 <Reset_Handler+0x4c>)
     146:	428b      	cmp	r3, r1
     148:	d3f8      	bcc.n	13c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     14a:	4b0c      	ldr	r3, [pc, #48]	; (17c <Reset_Handler+0x50>)
     14c:	e002      	b.n	154 <Reset_Handler+0x28>
                *pDest++ = 0;
     14e:	2200      	movs	r2, #0
     150:	601a      	str	r2, [r3, #0]
     152:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     154:	4a0a      	ldr	r2, [pc, #40]	; (180 <Reset_Handler+0x54>)
     156:	4293      	cmp	r3, r2
     158:	d3f9      	bcc.n	14e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <Reset_Handler+0x58>)
     15c:	21ff      	movs	r1, #255	; 0xff
     15e:	4b0a      	ldr	r3, [pc, #40]	; (188 <Reset_Handler+0x5c>)
     160:	438b      	bics	r3, r1
     162:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     164:	4b09      	ldr	r3, [pc, #36]	; (18c <Reset_Handler+0x60>)
     166:	4798      	blx	r3
        main();
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <Reset_Handler+0x64>)
     16a:	4798      	blx	r3
     16c:	e7fe      	b.n	16c <Reset_Handler+0x40>
     16e:	46c0      	nop			; (mov r8, r8)
     170:	000025d8 	.word	0x000025d8
     174:	20000000 	.word	0x20000000
     178:	20000014 	.word	0x20000014
     17c:	20000014 	.word	0x20000014
     180:	200001b8 	.word	0x200001b8
     184:	e000ed00 	.word	0xe000ed00
     188:	00000000 	.word	0x00000000
     18c:	000023f9 	.word	0x000023f9
     190:	00001561 	.word	0x00001561

00000194 <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     194:	4b06      	ldr	r3, [pc, #24]	; (1b0 <USART_0_CLOCK_init+0x1c>)
     196:	2140      	movs	r1, #64	; 0x40
     198:	22d8      	movs	r2, #216	; 0xd8
     19a:	5099      	str	r1, [r3, r2]
     19c:	3103      	adds	r1, #3
     19e:	3a10      	subs	r2, #16
     1a0:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
     1a2:	4a04      	ldr	r2, [pc, #16]	; (1b4 <USART_0_CLOCK_init+0x20>)
     1a4:	69d3      	ldr	r3, [r2, #28]
     1a6:	3933      	subs	r1, #51	; 0x33
     1a8:	430b      	orrs	r3, r1
     1aa:	61d3      	str	r3, [r2, #28]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM3_bit(MCLK);
}
     1ac:	4770      	bx	lr
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	40001c00 	.word	0x40001c00
     1b4:	40000800 	.word	0x40000800

000001b8 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     1b8:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1ba:	2382      	movs	r3, #130	; 0x82
     1bc:	05db      	lsls	r3, r3, #23
     1be:	2256      	movs	r2, #86	; 0x56
     1c0:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1c2:	2501      	movs	r5, #1
     1c4:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1c6:	2401      	movs	r4, #1
     1c8:	4321      	orrs	r1, r4
     1ca:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1cc:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1ce:	203b      	movs	r0, #59	; 0x3b
     1d0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     1d2:	3a47      	subs	r2, #71	; 0x47
     1d4:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     1d6:	2202      	movs	r2, #2
     1d8:	4311      	orrs	r1, r2
     1da:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1dc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1de:	2157      	movs	r1, #87	; 0x57
     1e0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1e2:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1e4:	4322      	orrs	r2, r4
     1e6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1e8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1ea:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     1ec:	3948      	subs	r1, #72	; 0x48
     1ee:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     1f0:	2120      	movs	r1, #32
     1f2:	430a      	orrs	r2, r1
     1f4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1f6:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     1f8:	bd30      	pop	{r4, r5, pc}
	...

000001fc <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     1fc:	b510      	push	{r4, lr}
     1fe:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     200:	4b06      	ldr	r3, [pc, #24]	; (21c <USART_0_init+0x20>)
     202:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     204:	2300      	movs	r3, #0
     206:	9300      	str	r3, [sp, #0]
     208:	3310      	adds	r3, #16
     20a:	4a05      	ldr	r2, [pc, #20]	; (220 <USART_0_init+0x24>)
     20c:	4905      	ldr	r1, [pc, #20]	; (224 <USART_0_init+0x28>)
     20e:	4806      	ldr	r0, [pc, #24]	; (228 <USART_0_init+0x2c>)
     210:	4c06      	ldr	r4, [pc, #24]	; (22c <USART_0_init+0x30>)
     212:	47a0      	blx	r4
	USART_0_PORT_init();
     214:	4b06      	ldr	r3, [pc, #24]	; (230 <USART_0_init+0x34>)
     216:	4798      	blx	r3
}
     218:	b002      	add	sp, #8
     21a:	bd10      	pop	{r4, pc}
     21c:	00000195 	.word	0x00000195
     220:	20000030 	.word	0x20000030
     224:	42001000 	.word	0x42001000
     228:	200000a0 	.word	0x200000a0
     22c:	000006cd 	.word	0x000006cd
     230:	000001b9 	.word	0x000001b9

00000234 <CAN_0_PORT_init>:

void CAN_0_PORT_init(void)
{
     234:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     236:	2382      	movs	r3, #130	; 0x82
     238:	05db      	lsls	r3, r3, #23
     23a:	2259      	movs	r2, #89	; 0x59
     23c:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23e:	2501      	movs	r5, #1
     240:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     242:	2401      	movs	r4, #1
     244:	4321      	orrs	r1, r4
     246:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     248:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     24a:	203c      	movs	r0, #60	; 0x3c
     24c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     24e:	3a4a      	subs	r2, #74	; 0x4a
     250:	4011      	ands	r1, r2
	tmp |= PORT_PMUX_PMUXO(data);
     252:	2260      	movs	r2, #96	; 0x60
     254:	4311      	orrs	r1, r2
     256:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     258:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     25a:	2158      	movs	r1, #88	; 0x58
     25c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     25e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     260:	4322      	orrs	r2, r4
     262:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     264:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     266:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     268:	3949      	subs	r1, #73	; 0x49
     26a:	438a      	bics	r2, r1
	tmp |= PORT_PMUX_PMUXE(data);
     26c:	2106      	movs	r1, #6
     26e:	430a      	orrs	r2, r1
     270:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     272:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA25, PINMUX_PA25G_CAN0_RX);

	gpio_set_pin_function(PA24, PINMUX_PA24G_CAN0_TX);
}
     274:	bd30      	pop	{r4, r5, pc}
	...

00000278 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
     278:	b510      	push	{r4, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN0;
     27a:	4a08      	ldr	r2, [pc, #32]	; (29c <CAN_0_init+0x24>)
     27c:	6911      	ldr	r1, [r2, #16]
     27e:	2380      	movs	r3, #128	; 0x80
     280:	005b      	lsls	r3, r3, #1
     282:	430b      	orrs	r3, r1
     284:	6113      	str	r3, [r2, #16]
     286:	2140      	movs	r1, #64	; 0x40
     288:	23e8      	movs	r3, #232	; 0xe8
     28a:	4a05      	ldr	r2, [pc, #20]	; (2a0 <CAN_0_init+0x28>)
     28c:	50d1      	str	r1, [r2, r3]
	hri_mclk_set_AHBMASK_CAN0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN0_GCLK_ID, CONF_GCLK_CAN0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_0, CAN0);
     28e:	4905      	ldr	r1, [pc, #20]	; (2a4 <CAN_0_init+0x2c>)
     290:	4805      	ldr	r0, [pc, #20]	; (2a8 <CAN_0_init+0x30>)
     292:	4b06      	ldr	r3, [pc, #24]	; (2ac <CAN_0_init+0x34>)
     294:	4798      	blx	r3
	CAN_0_PORT_init();
     296:	4b06      	ldr	r3, [pc, #24]	; (2b0 <CAN_0_init+0x38>)
     298:	4798      	blx	r3
}
     29a:	bd10      	pop	{r4, pc}
     29c:	40000800 	.word	0x40000800
     2a0:	40001c00 	.word	0x40001c00
     2a4:	42001c00 	.word	0x42001c00
     2a8:	20000078 	.word	0x20000078
     2ac:	00000311 	.word	0x00000311
     2b0:	00000235 	.word	0x00000235

000002b4 <system_init>:

void system_init(void)
{
     2b4:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2b6:	4b03      	ldr	r3, [pc, #12]	; (2c4 <system_init+0x10>)
     2b8:	4798      	blx	r3
	init_mcu();

	USART_0_init();
     2ba:	4b03      	ldr	r3, [pc, #12]	; (2c8 <system_init+0x14>)
     2bc:	4798      	blx	r3
	CAN_0_init();
     2be:	4b03      	ldr	r3, [pc, #12]	; (2cc <system_init+0x18>)
     2c0:	4798      	blx	r3
}
     2c2:	bd10      	pop	{r4, pc}
     2c4:	00000df9 	.word	0x00000df9
     2c8:	000001fd 	.word	0x000001fd
     2cc:	00000279 	.word	0x00000279

000002d0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     2d0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     2d4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     2d6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     2d8:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     2dc:	4770      	bx	lr

000002de <atomic_leave_critical>:
     2de:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     2e2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     2e4:	f383 8810 	msr	PRIMASK, r3
}
     2e8:	4770      	bx	lr

000002ea <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     2ea:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     2ec:	69c3      	ldr	r3, [r0, #28]
     2ee:	2b00      	cmp	r3, #0
     2f0:	d000      	beq.n	2f4 <can_tx_done+0xa>
		descr->cb.tx_done(descr);
     2f2:	4798      	blx	r3
	}
}
     2f4:	bd10      	pop	{r4, pc}

000002f6 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     2f6:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     2f8:	6a03      	ldr	r3, [r0, #32]
     2fa:	2b00      	cmp	r3, #0
     2fc:	d000      	beq.n	300 <can_rx_done+0xa>
		descr->cb.rx_done(descr);
     2fe:	4798      	blx	r3
	}
}
     300:	bd10      	pop	{r4, pc}

00000302 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     302:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     304:	6a43      	ldr	r3, [r0, #36]	; 0x24
     306:	2b00      	cmp	r3, #0
     308:	d000      	beq.n	30c <can_irq_handler+0xa>
		descr->cb.irq_handler(descr, type);
     30a:	4798      	blx	r3
	}
}
     30c:	bd10      	pop	{r4, pc}
	...

00000310 <can_async_init>:
{
     310:	b570      	push	{r4, r5, r6, lr}
     312:	0004      	movs	r4, r0
     314:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     316:	2800      	cmp	r0, #0
     318:	d015      	beq.n	346 <can_async_init+0x36>
     31a:	2900      	cmp	r1, #0
     31c:	d011      	beq.n	342 <can_async_init+0x32>
     31e:	2001      	movs	r0, #1
     320:	2241      	movs	r2, #65	; 0x41
     322:	490a      	ldr	r1, [pc, #40]	; (34c <can_async_init+0x3c>)
     324:	4b0a      	ldr	r3, [pc, #40]	; (350 <can_async_init+0x40>)
     326:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     328:	0029      	movs	r1, r5
     32a:	0020      	movs	r0, r4
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <can_async_init+0x44>)
     32e:	4798      	blx	r3
	if (rc) {
     330:	2800      	cmp	r0, #0
     332:	d105      	bne.n	340 <can_async_init+0x30>
	descr->dev.cb.tx_done     = can_tx_done;
     334:	4b08      	ldr	r3, [pc, #32]	; (358 <can_async_init+0x48>)
     336:	6063      	str	r3, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     338:	4b08      	ldr	r3, [pc, #32]	; (35c <can_async_init+0x4c>)
     33a:	60a3      	str	r3, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     33c:	4b08      	ldr	r3, [pc, #32]	; (360 <can_async_init+0x50>)
     33e:	60e3      	str	r3, [r4, #12]
}
     340:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     342:	2000      	movs	r0, #0
     344:	e7ec      	b.n	320 <can_async_init+0x10>
     346:	2000      	movs	r0, #0
     348:	e7ea      	b.n	320 <can_async_init+0x10>
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	00002480 	.word	0x00002480
     350:	0000083d 	.word	0x0000083d
     354:	00000941 	.word	0x00000941
     358:	000002eb 	.word	0x000002eb
     35c:	000002f7 	.word	0x000002f7
     360:	00000303 	.word	0x00000303

00000364 <can_async_enable>:
{
     364:	b510      	push	{r4, lr}
     366:	0004      	movs	r4, r0
	ASSERT(descr);
     368:	1e43      	subs	r3, r0, #1
     36a:	4198      	sbcs	r0, r3
     36c:	b2c0      	uxtb	r0, r0
     36e:	225c      	movs	r2, #92	; 0x5c
     370:	4903      	ldr	r1, [pc, #12]	; (380 <can_async_enable+0x1c>)
     372:	4b04      	ldr	r3, [pc, #16]	; (384 <can_async_enable+0x20>)
     374:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
     376:	0020      	movs	r0, r4
     378:	4b03      	ldr	r3, [pc, #12]	; (388 <can_async_enable+0x24>)
     37a:	4798      	blx	r3
}
     37c:	bd10      	pop	{r4, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	00002480 	.word	0x00002480
     384:	0000083d 	.word	0x0000083d
     388:	00000a4d 	.word	0x00000a4d

0000038c <can_async_read>:
{
     38c:	b570      	push	{r4, r5, r6, lr}
     38e:	0004      	movs	r4, r0
     390:	000d      	movs	r5, r1
	ASSERT(descr && msg);
     392:	2800      	cmp	r0, #0
     394:	d00d      	beq.n	3b2 <can_async_read+0x26>
     396:	2900      	cmp	r1, #0
     398:	d009      	beq.n	3ae <can_async_read+0x22>
     39a:	2001      	movs	r0, #1
     39c:	226e      	movs	r2, #110	; 0x6e
     39e:	4906      	ldr	r1, [pc, #24]	; (3b8 <can_async_read+0x2c>)
     3a0:	4b06      	ldr	r3, [pc, #24]	; (3bc <can_async_read+0x30>)
     3a2:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
     3a4:	0029      	movs	r1, r5
     3a6:	0020      	movs	r0, r4
     3a8:	4b05      	ldr	r3, [pc, #20]	; (3c0 <can_async_read+0x34>)
     3aa:	4798      	blx	r3
}
     3ac:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && msg);
     3ae:	2000      	movs	r0, #0
     3b0:	e7f4      	b.n	39c <can_async_read+0x10>
     3b2:	2000      	movs	r0, #0
     3b4:	e7f2      	b.n	39c <can_async_read+0x10>
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	00002480 	.word	0x00002480
     3bc:	0000083d 	.word	0x0000083d
     3c0:	00000a5d 	.word	0x00000a5d

000003c4 <can_async_write>:
{
     3c4:	b570      	push	{r4, r5, r6, lr}
     3c6:	0004      	movs	r4, r0
     3c8:	000d      	movs	r5, r1
	ASSERT(descr && msg);
     3ca:	2800      	cmp	r0, #0
     3cc:	d00d      	beq.n	3ea <can_async_write+0x26>
     3ce:	2900      	cmp	r1, #0
     3d0:	d009      	beq.n	3e6 <can_async_write+0x22>
     3d2:	2001      	movs	r0, #1
     3d4:	2277      	movs	r2, #119	; 0x77
     3d6:	4906      	ldr	r1, [pc, #24]	; (3f0 <can_async_write+0x2c>)
     3d8:	4b06      	ldr	r3, [pc, #24]	; (3f4 <can_async_write+0x30>)
     3da:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
     3dc:	0029      	movs	r1, r5
     3de:	0020      	movs	r0, r4
     3e0:	4b05      	ldr	r3, [pc, #20]	; (3f8 <can_async_write+0x34>)
     3e2:	4798      	blx	r3
}
     3e4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && msg);
     3e6:	2000      	movs	r0, #0
     3e8:	e7f4      	b.n	3d4 <can_async_write+0x10>
     3ea:	2000      	movs	r0, #0
     3ec:	e7f2      	b.n	3d4 <can_async_write+0x10>
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	00002480 	.word	0x00002480
     3f4:	0000083d 	.word	0x0000083d
     3f8:	00000b1d 	.word	0x00000b1d

000003fc <can_async_register_callback>:
{
     3fc:	b570      	push	{r4, r5, r6, lr}
     3fe:	0006      	movs	r6, r0
     400:	000d      	movs	r5, r1
     402:	0014      	movs	r4, r2
	ASSERT(descr);
     404:	1e43      	subs	r3, r0, #1
     406:	4198      	sbcs	r0, r3
     408:	b2c0      	uxtb	r0, r0
     40a:	2281      	movs	r2, #129	; 0x81
     40c:	490c      	ldr	r1, [pc, #48]	; (440 <can_async_register_callback+0x44>)
     40e:	4b0d      	ldr	r3, [pc, #52]	; (444 <can_async_register_callback+0x48>)
     410:	4798      	blx	r3
	switch (type) {
     412:	2d01      	cmp	r5, #1
     414:	d010      	beq.n	438 <can_async_register_callback+0x3c>
     416:	2d00      	cmp	r5, #0
     418:	d004      	beq.n	424 <can_async_register_callback+0x28>
     41a:	2d02      	cmp	r5, #2
     41c:	d00e      	beq.n	43c <can_async_register_callback+0x40>
		return ERR_INVALID_ARG;
     41e:	200d      	movs	r0, #13
     420:	4240      	negs	r0, r0
     422:	e008      	b.n	436 <can_async_register_callback+0x3a>
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
     424:	6234      	str	r4, [r6, #32]
	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
     426:	1e62      	subs	r2, r4, #1
     428:	4194      	sbcs	r4, r2
     42a:	b2e2      	uxtb	r2, r4
     42c:	0029      	movs	r1, r5
     42e:	0030      	movs	r0, r6
     430:	4b05      	ldr	r3, [pc, #20]	; (448 <can_async_register_callback+0x4c>)
     432:	4798      	blx	r3
	return ERR_NONE;
     434:	2000      	movs	r0, #0
}
     436:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
     438:	61f4      	str	r4, [r6, #28]
		break;
     43a:	e7f4      	b.n	426 <can_async_register_callback+0x2a>
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
     43c:	6274      	str	r4, [r6, #36]	; 0x24
		break;
     43e:	e7f2      	b.n	426 <can_async_register_callback+0x2a>
     440:	00002480 	.word	0x00002480
     444:	0000083d 	.word	0x0000083d
     448:	00000c79 	.word	0x00000c79

0000044c <can_async_get_rxerr>:
{
     44c:	b510      	push	{r4, lr}
     44e:	0004      	movs	r4, r0
	ASSERT(descr);
     450:	1e43      	subs	r3, r0, #1
     452:	4198      	sbcs	r0, r3
     454:	b2c0      	uxtb	r0, r0
     456:	229c      	movs	r2, #156	; 0x9c
     458:	4903      	ldr	r1, [pc, #12]	; (468 <can_async_get_rxerr+0x1c>)
     45a:	4b04      	ldr	r3, [pc, #16]	; (46c <can_async_get_rxerr+0x20>)
     45c:	4798      	blx	r3
	return _can_async_get_rxerr(&descr->dev);
     45e:	0020      	movs	r0, r4
     460:	4b03      	ldr	r3, [pc, #12]	; (470 <can_async_get_rxerr+0x24>)
     462:	4798      	blx	r3
}
     464:	bd10      	pop	{r4, pc}
     466:	46c0      	nop			; (mov r8, r8)
     468:	00002480 	.word	0x00002480
     46c:	0000083d 	.word	0x0000083d
     470:	00000cc5 	.word	0x00000cc5

00000474 <can_async_get_txerr>:
{
     474:	b510      	push	{r4, lr}
     476:	0004      	movs	r4, r0
	ASSERT(descr);
     478:	1e43      	subs	r3, r0, #1
     47a:	4198      	sbcs	r0, r3
     47c:	b2c0      	uxtb	r0, r0
     47e:	22a5      	movs	r2, #165	; 0xa5
     480:	4903      	ldr	r1, [pc, #12]	; (490 <can_async_get_txerr+0x1c>)
     482:	4b04      	ldr	r3, [pc, #16]	; (494 <can_async_get_txerr+0x20>)
     484:	4798      	blx	r3
	return _can_async_get_txerr(&descr->dev);
     486:	0020      	movs	r0, r4
     488:	4b03      	ldr	r3, [pc, #12]	; (498 <can_async_get_txerr+0x24>)
     48a:	4798      	blx	r3
}
     48c:	bd10      	pop	{r4, pc}
     48e:	46c0      	nop			; (mov r8, r8)
     490:	00002480 	.word	0x00002480
     494:	0000083d 	.word	0x0000083d
     498:	00000cd1 	.word	0x00000cd1

0000049c <can_async_set_filter>:
{
     49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     49e:	0004      	movs	r4, r0
     4a0:	000d      	movs	r5, r1
     4a2:	0016      	movs	r6, r2
     4a4:	001f      	movs	r7, r3
	ASSERT(descr);
     4a6:	1e43      	subs	r3, r0, #1
     4a8:	4198      	sbcs	r0, r3
     4aa:	b2c0      	uxtb	r0, r0
     4ac:	22b8      	movs	r2, #184	; 0xb8
     4ae:	4905      	ldr	r1, [pc, #20]	; (4c4 <can_async_set_filter+0x28>)
     4b0:	4b05      	ldr	r3, [pc, #20]	; (4c8 <can_async_set_filter+0x2c>)
     4b2:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
     4b4:	003b      	movs	r3, r7
     4b6:	0032      	movs	r2, r6
     4b8:	0029      	movs	r1, r5
     4ba:	0020      	movs	r0, r4
     4bc:	4c03      	ldr	r4, [pc, #12]	; (4cc <can_async_set_filter+0x30>)
     4be:	47a0      	blx	r4
}
     4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	00002480 	.word	0x00002480
     4c8:	0000083d 	.word	0x0000083d
     4cc:	00000cd9 	.word	0x00000cd9

000004d0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     4d0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     4d2:	4b04      	ldr	r3, [pc, #16]	; (4e4 <delay_ms+0x14>)
     4d4:	681c      	ldr	r4, [r3, #0]
     4d6:	4b04      	ldr	r3, [pc, #16]	; (4e8 <delay_ms+0x18>)
     4d8:	4798      	blx	r3
     4da:	0001      	movs	r1, r0
     4dc:	0020      	movs	r0, r4
     4de:	4b03      	ldr	r3, [pc, #12]	; (4ec <delay_ms+0x1c>)
     4e0:	4798      	blx	r3
}
     4e2:	bd10      	pop	{r4, pc}
     4e4:	20000040 	.word	0x20000040
     4e8:	00000dd5 	.word	0x00000dd5
     4ec:	00000df1 	.word	0x00000df1

000004f0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4f0:	b570      	push	{r4, r5, r6, lr}
     4f2:	0004      	movs	r4, r0
     4f4:	000d      	movs	r5, r1
     4f6:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     4f8:	2800      	cmp	r0, #0
     4fa:	d00e      	beq.n	51a <io_write+0x2a>
     4fc:	2900      	cmp	r1, #0
     4fe:	d00a      	beq.n	516 <io_write+0x26>
     500:	2001      	movs	r0, #1
     502:	2234      	movs	r2, #52	; 0x34
     504:	4906      	ldr	r1, [pc, #24]	; (520 <io_write+0x30>)
     506:	4b07      	ldr	r3, [pc, #28]	; (524 <io_write+0x34>)
     508:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     50a:	6823      	ldr	r3, [r4, #0]
     50c:	0032      	movs	r2, r6
     50e:	0029      	movs	r1, r5
     510:	0020      	movs	r0, r4
     512:	4798      	blx	r3
}
     514:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     516:	2000      	movs	r0, #0
     518:	e7f3      	b.n	502 <io_write+0x12>
     51a:	2000      	movs	r0, #0
     51c:	e7f1      	b.n	502 <io_write+0x12>
     51e:	46c0      	nop			; (mov r8, r8)
     520:	0000249c 	.word	0x0000249c
     524:	0000083d 	.word	0x0000083d

00000528 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     528:	b570      	push	{r4, r5, r6, lr}
     52a:	0004      	movs	r4, r0
     52c:	000d      	movs	r5, r1
     52e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     530:	2800      	cmp	r0, #0
     532:	d00e      	beq.n	552 <io_read+0x2a>
     534:	2900      	cmp	r1, #0
     536:	d00a      	beq.n	54e <io_read+0x26>
     538:	2001      	movs	r0, #1
     53a:	223d      	movs	r2, #61	; 0x3d
     53c:	4906      	ldr	r1, [pc, #24]	; (558 <io_read+0x30>)
     53e:	4b07      	ldr	r3, [pc, #28]	; (55c <io_read+0x34>)
     540:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     542:	6863      	ldr	r3, [r4, #4]
     544:	0032      	movs	r2, r6
     546:	0029      	movs	r1, r5
     548:	0020      	movs	r0, r4
     54a:	4798      	blx	r3
}
     54c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     54e:	2000      	movs	r0, #0
     550:	e7f3      	b.n	53a <io_read+0x12>
     552:	2000      	movs	r0, #0
     554:	e7f1      	b.n	53a <io_read+0x12>
     556:	46c0      	nop			; (mov r8, r8)
     558:	0000249c 	.word	0x0000249c
     55c:	0000083d 	.word	0x0000083d

00000560 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     560:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     562:	3808      	subs	r0, #8

	descr->stat = 0;
     564:	2300      	movs	r3, #0
     566:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     568:	6a43      	ldr	r3, [r0, #36]	; 0x24
     56a:	2b00      	cmp	r3, #0
     56c:	d000      	beq.n	570 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     56e:	4798      	blx	r3
	}
}
     570:	bd10      	pop	{r4, pc}

00000572 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     572:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     574:	3808      	subs	r0, #8

	descr->stat = 0;
     576:	2300      	movs	r3, #0
     578:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     57a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     57c:	2b00      	cmp	r3, #0
     57e:	d000      	beq.n	582 <usart_error+0x10>
		descr->usart_cb.error(descr);
     580:	4798      	blx	r3
	}
}
     582:	bd10      	pop	{r4, pc}

00000584 <usart_fill_rx_buffer>:
{
     584:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     586:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     588:	302c      	adds	r0, #44	; 0x2c
     58a:	4b04      	ldr	r3, [pc, #16]	; (59c <usart_fill_rx_buffer+0x18>)
     58c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     58e:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     590:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     592:	2b00      	cmp	r3, #0
     594:	d001      	beq.n	59a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     596:	0020      	movs	r0, r4
     598:	4798      	blx	r3
}
     59a:	bd10      	pop	{r4, pc}
     59c:	000008dd 	.word	0x000008dd

000005a0 <usart_async_write>:
{
     5a0:	b570      	push	{r4, r5, r6, lr}
     5a2:	0004      	movs	r4, r0
     5a4:	000e      	movs	r6, r1
     5a6:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     5a8:	2800      	cmp	r0, #0
     5aa:	d01d      	beq.n	5e8 <usart_async_write+0x48>
     5ac:	2900      	cmp	r1, #0
     5ae:	d01d      	beq.n	5ec <usart_async_write+0x4c>
     5b0:	2a00      	cmp	r2, #0
     5b2:	d11d      	bne.n	5f0 <usart_async_write+0x50>
     5b4:	2000      	movs	r0, #0
     5b6:	223c      	movs	r2, #60	; 0x3c
     5b8:	32ff      	adds	r2, #255	; 0xff
     5ba:	4910      	ldr	r1, [pc, #64]	; (5fc <usart_async_write+0x5c>)
     5bc:	4b10      	ldr	r3, [pc, #64]	; (600 <usart_async_write+0x60>)
     5be:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     5c0:	2344      	movs	r3, #68	; 0x44
     5c2:	5ae2      	ldrh	r2, [r4, r3]
     5c4:	3308      	adds	r3, #8
     5c6:	5ae3      	ldrh	r3, [r4, r3]
     5c8:	429a      	cmp	r2, r3
     5ca:	d113      	bne.n	5f4 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     5cc:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     5ce:	234c      	movs	r3, #76	; 0x4c
     5d0:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     5d2:	2200      	movs	r2, #0
     5d4:	3b08      	subs	r3, #8
     5d6:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     5d8:	3b43      	subs	r3, #67	; 0x43
     5da:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     5dc:	0020      	movs	r0, r4
     5de:	3008      	adds	r0, #8
     5e0:	4b08      	ldr	r3, [pc, #32]	; (604 <usart_async_write+0x64>)
     5e2:	4798      	blx	r3
	return (int32_t)length;
     5e4:	0028      	movs	r0, r5
}
     5e6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     5e8:	2000      	movs	r0, #0
     5ea:	e7e4      	b.n	5b6 <usart_async_write+0x16>
     5ec:	2000      	movs	r0, #0
     5ee:	e7e2      	b.n	5b6 <usart_async_write+0x16>
     5f0:	2001      	movs	r0, #1
     5f2:	e7e0      	b.n	5b6 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     5f4:	201c      	movs	r0, #28
     5f6:	4240      	negs	r0, r0
     5f8:	e7f5      	b.n	5e6 <usart_async_write+0x46>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	000024b0 	.word	0x000024b0
     600:	0000083d 	.word	0x0000083d
     604:	0000120f 	.word	0x0000120f

00000608 <usart_process_byte_sent>:
{
     608:	b570      	push	{r4, r5, r6, lr}
     60a:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     60c:	0002      	movs	r2, r0
     60e:	3a08      	subs	r2, #8
     610:	2344      	movs	r3, #68	; 0x44
     612:	5ad3      	ldrh	r3, [r2, r3]
     614:	214c      	movs	r1, #76	; 0x4c
     616:	5a52      	ldrh	r2, [r2, r1]
     618:	4293      	cmp	r3, r2
     61a:	d00d      	beq.n	638 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     61c:	0002      	movs	r2, r0
     61e:	6c01      	ldr	r1, [r0, #64]	; 0x40
     620:	3a08      	subs	r2, #8
     622:	1c5d      	adds	r5, r3, #1
     624:	2044      	movs	r0, #68	; 0x44
     626:	5215      	strh	r5, [r2, r0]
     628:	5cc9      	ldrb	r1, [r1, r3]
     62a:	0020      	movs	r0, r4
     62c:	4b04      	ldr	r3, [pc, #16]	; (640 <usart_process_byte_sent+0x38>)
     62e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     630:	0020      	movs	r0, r4
     632:	4b04      	ldr	r3, [pc, #16]	; (644 <usart_process_byte_sent+0x3c>)
     634:	4798      	blx	r3
}
     636:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     638:	4b03      	ldr	r3, [pc, #12]	; (648 <usart_process_byte_sent+0x40>)
     63a:	4798      	blx	r3
}
     63c:	e7fb      	b.n	636 <usart_process_byte_sent+0x2e>
     63e:	46c0      	nop			; (mov r8, r8)
     640:	00001207 	.word	0x00001207
     644:	0000120f 	.word	0x0000120f
     648:	00001217 	.word	0x00001217

0000064c <usart_async_read>:
{
     64c:	b5f0      	push	{r4, r5, r6, r7, lr}
     64e:	b085      	sub	sp, #20
     650:	0004      	movs	r4, r0
     652:	000d      	movs	r5, r1
     654:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     656:	2800      	cmp	r0, #0
     658:	d017      	beq.n	68a <usart_async_read+0x3e>
     65a:	2900      	cmp	r1, #0
     65c:	d017      	beq.n	68e <usart_async_read+0x42>
     65e:	2a00      	cmp	r2, #0
     660:	d117      	bne.n	692 <usart_async_read+0x46>
     662:	2000      	movs	r0, #0
     664:	22ac      	movs	r2, #172	; 0xac
     666:	0052      	lsls	r2, r2, #1
     668:	4912      	ldr	r1, [pc, #72]	; (6b4 <usart_async_read+0x68>)
     66a:	4b13      	ldr	r3, [pc, #76]	; (6b8 <usart_async_read+0x6c>)
     66c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     66e:	a803      	add	r0, sp, #12
     670:	4b12      	ldr	r3, [pc, #72]	; (6bc <usart_async_read+0x70>)
     672:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     674:	3434      	adds	r4, #52	; 0x34
     676:	0020      	movs	r0, r4
     678:	9401      	str	r4, [sp, #4]
     67a:	4b11      	ldr	r3, [pc, #68]	; (6c0 <usart_async_read+0x74>)
     67c:	4798      	blx	r3
     67e:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     680:	a803      	add	r0, sp, #12
     682:	4b10      	ldr	r3, [pc, #64]	; (6c4 <usart_async_read+0x78>)
     684:	4798      	blx	r3
	uint16_t                       was_read = 0;
     686:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     688:	e00b      	b.n	6a2 <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     68a:	2000      	movs	r0, #0
     68c:	e7ea      	b.n	664 <usart_async_read+0x18>
     68e:	2000      	movs	r0, #0
     690:	e7e8      	b.n	664 <usart_async_read+0x18>
     692:	2001      	movs	r0, #1
     694:	e7e6      	b.n	664 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     696:	3401      	adds	r4, #1
     698:	b2a4      	uxth	r4, r4
     69a:	1869      	adds	r1, r5, r1
     69c:	9801      	ldr	r0, [sp, #4]
     69e:	4b0a      	ldr	r3, [pc, #40]	; (6c8 <usart_async_read+0x7c>)
     6a0:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     6a2:	0021      	movs	r1, r4
     6a4:	42a7      	cmp	r7, r4
     6a6:	d901      	bls.n	6ac <usart_async_read+0x60>
     6a8:	42b4      	cmp	r4, r6
     6aa:	d3f4      	bcc.n	696 <usart_async_read+0x4a>
}
     6ac:	0020      	movs	r0, r4
     6ae:	b005      	add	sp, #20
     6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6b2:	46c0      	nop			; (mov r8, r8)
     6b4:	000024b0 	.word	0x000024b0
     6b8:	0000083d 	.word	0x0000083d
     6bc:	000002d1 	.word	0x000002d1
     6c0:	0000091d 	.word	0x0000091d
     6c4:	000002df 	.word	0x000002df
     6c8:	00000891 	.word	0x00000891

000006cc <usart_async_init>:
{
     6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6ce:	0004      	movs	r4, r0
     6d0:	000d      	movs	r5, r1
     6d2:	0016      	movs	r6, r2
     6d4:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     6d6:	2800      	cmp	r0, #0
     6d8:	d026      	beq.n	728 <usart_async_init+0x5c>
     6da:	2900      	cmp	r1, #0
     6dc:	d026      	beq.n	72c <usart_async_init+0x60>
     6de:	2a00      	cmp	r2, #0
     6e0:	d026      	beq.n	730 <usart_async_init+0x64>
     6e2:	2b00      	cmp	r3, #0
     6e4:	d126      	bne.n	734 <usart_async_init+0x68>
     6e6:	2000      	movs	r0, #0
     6e8:	223a      	movs	r2, #58	; 0x3a
     6ea:	4915      	ldr	r1, [pc, #84]	; (740 <usart_async_init+0x74>)
     6ec:	4b15      	ldr	r3, [pc, #84]	; (744 <usart_async_init+0x78>)
     6ee:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     6f0:	0020      	movs	r0, r4
     6f2:	3034      	adds	r0, #52	; 0x34
     6f4:	003a      	movs	r2, r7
     6f6:	0031      	movs	r1, r6
     6f8:	4b13      	ldr	r3, [pc, #76]	; (748 <usart_async_init+0x7c>)
     6fa:	4798      	blx	r3
     6fc:	2800      	cmp	r0, #0
     6fe:	d11b      	bne.n	738 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     700:	0020      	movs	r0, r4
     702:	3008      	adds	r0, #8
     704:	0029      	movs	r1, r5
     706:	4b11      	ldr	r3, [pc, #68]	; (74c <usart_async_init+0x80>)
     708:	4798      	blx	r3
	if (init_status) {
     70a:	2800      	cmp	r0, #0
     70c:	d10b      	bne.n	726 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     70e:	4b10      	ldr	r3, [pc, #64]	; (750 <usart_async_init+0x84>)
     710:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     712:	4b10      	ldr	r3, [pc, #64]	; (754 <usart_async_init+0x88>)
     714:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     716:	4b10      	ldr	r3, [pc, #64]	; (758 <usart_async_init+0x8c>)
     718:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     71a:	4b10      	ldr	r3, [pc, #64]	; (75c <usart_async_init+0x90>)
     71c:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     71e:	4b10      	ldr	r3, [pc, #64]	; (760 <usart_async_init+0x94>)
     720:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     722:	4b10      	ldr	r3, [pc, #64]	; (764 <usart_async_init+0x98>)
     724:	6163      	str	r3, [r4, #20]
}
     726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     728:	2000      	movs	r0, #0
     72a:	e7dd      	b.n	6e8 <usart_async_init+0x1c>
     72c:	2000      	movs	r0, #0
     72e:	e7db      	b.n	6e8 <usart_async_init+0x1c>
     730:	2000      	movs	r0, #0
     732:	e7d9      	b.n	6e8 <usart_async_init+0x1c>
     734:	2001      	movs	r0, #1
     736:	e7d7      	b.n	6e8 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     738:	200d      	movs	r0, #13
     73a:	4240      	negs	r0, r0
     73c:	e7f3      	b.n	726 <usart_async_init+0x5a>
     73e:	46c0      	nop			; (mov r8, r8)
     740:	000024b0 	.word	0x000024b0
     744:	0000083d 	.word	0x0000083d
     748:	00000845 	.word	0x00000845
     74c:	00001169 	.word	0x00001169
     750:	0000064d 	.word	0x0000064d
     754:	000005a1 	.word	0x000005a1
     758:	00000609 	.word	0x00000609
     75c:	00000585 	.word	0x00000585
     760:	00000561 	.word	0x00000561
     764:	00000573 	.word	0x00000573

00000768 <usart_async_enable>:
{
     768:	b510      	push	{r4, lr}
     76a:	0004      	movs	r4, r0
	ASSERT(descr);
     76c:	1e43      	subs	r3, r0, #1
     76e:	4198      	sbcs	r0, r3
     770:	b2c0      	uxtb	r0, r0
     772:	2261      	movs	r2, #97	; 0x61
     774:	4904      	ldr	r1, [pc, #16]	; (788 <usart_async_enable+0x20>)
     776:	4b05      	ldr	r3, [pc, #20]	; (78c <usart_async_enable+0x24>)
     778:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     77a:	0020      	movs	r0, r4
     77c:	3008      	adds	r0, #8
     77e:	4b04      	ldr	r3, [pc, #16]	; (790 <usart_async_enable+0x28>)
     780:	4798      	blx	r3
}
     782:	2000      	movs	r0, #0
     784:	bd10      	pop	{r4, pc}
     786:	46c0      	nop			; (mov r8, r8)
     788:	000024b0 	.word	0x000024b0
     78c:	0000083d 	.word	0x0000083d
     790:	000011f5 	.word	0x000011f5

00000794 <usart_async_get_io_descriptor>:
{
     794:	b570      	push	{r4, r5, r6, lr}
     796:	0004      	movs	r4, r0
     798:	000d      	movs	r5, r1
	ASSERT(descr && io);
     79a:	2800      	cmp	r0, #0
     79c:	d00b      	beq.n	7b6 <usart_async_get_io_descriptor+0x22>
     79e:	2900      	cmp	r1, #0
     7a0:	d007      	beq.n	7b2 <usart_async_get_io_descriptor+0x1e>
     7a2:	2001      	movs	r0, #1
     7a4:	2277      	movs	r2, #119	; 0x77
     7a6:	4905      	ldr	r1, [pc, #20]	; (7bc <usart_async_get_io_descriptor+0x28>)
     7a8:	4b05      	ldr	r3, [pc, #20]	; (7c0 <usart_async_get_io_descriptor+0x2c>)
     7aa:	4798      	blx	r3
	*io = &descr->io;
     7ac:	602c      	str	r4, [r5, #0]
}
     7ae:	2000      	movs	r0, #0
     7b0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     7b2:	2000      	movs	r0, #0
     7b4:	e7f6      	b.n	7a4 <usart_async_get_io_descriptor+0x10>
     7b6:	2000      	movs	r0, #0
     7b8:	e7f4      	b.n	7a4 <usart_async_get_io_descriptor+0x10>
     7ba:	46c0      	nop			; (mov r8, r8)
     7bc:	000024b0 	.word	0x000024b0
     7c0:	0000083d 	.word	0x0000083d

000007c4 <usart_async_register_callback>:
{
     7c4:	b570      	push	{r4, r5, r6, lr}
     7c6:	0005      	movs	r5, r0
     7c8:	000e      	movs	r6, r1
     7ca:	0014      	movs	r4, r2
	ASSERT(descr);
     7cc:	1e43      	subs	r3, r0, #1
     7ce:	4198      	sbcs	r0, r3
     7d0:	b2c0      	uxtb	r0, r0
     7d2:	2283      	movs	r2, #131	; 0x83
     7d4:	4916      	ldr	r1, [pc, #88]	; (830 <usart_async_register_callback+0x6c>)
     7d6:	4b17      	ldr	r3, [pc, #92]	; (834 <usart_async_register_callback+0x70>)
     7d8:	4798      	blx	r3
	switch (type) {
     7da:	2e01      	cmp	r6, #1
     7dc:	d011      	beq.n	802 <usart_async_register_callback+0x3e>
     7de:	2e00      	cmp	r6, #0
     7e0:	d004      	beq.n	7ec <usart_async_register_callback+0x28>
     7e2:	2e02      	cmp	r6, #2
     7e4:	d018      	beq.n	818 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     7e6:	200d      	movs	r0, #13
     7e8:	4240      	negs	r0, r0
     7ea:	e009      	b.n	800 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     7ec:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     7ee:	1e62      	subs	r2, r4, #1
     7f0:	4194      	sbcs	r4, r2
     7f2:	b2e2      	uxtb	r2, r4
     7f4:	0028      	movs	r0, r5
     7f6:	3008      	adds	r0, #8
     7f8:	2101      	movs	r1, #1
     7fa:	4b0f      	ldr	r3, [pc, #60]	; (838 <usart_async_register_callback+0x74>)
     7fc:	4798      	blx	r3
	return ERR_NONE;
     7fe:	2000      	movs	r0, #0
}
     800:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     802:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     804:	1e62      	subs	r2, r4, #1
     806:	4194      	sbcs	r4, r2
     808:	b2e2      	uxtb	r2, r4
     80a:	0028      	movs	r0, r5
     80c:	3008      	adds	r0, #8
     80e:	2102      	movs	r1, #2
     810:	4b09      	ldr	r3, [pc, #36]	; (838 <usart_async_register_callback+0x74>)
     812:	4798      	blx	r3
	return ERR_NONE;
     814:	2000      	movs	r0, #0
		break;
     816:	e7f3      	b.n	800 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     818:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     81a:	1e62      	subs	r2, r4, #1
     81c:	4194      	sbcs	r4, r2
     81e:	b2e2      	uxtb	r2, r4
     820:	0028      	movs	r0, r5
     822:	3008      	adds	r0, #8
     824:	2103      	movs	r1, #3
     826:	4b04      	ldr	r3, [pc, #16]	; (838 <usart_async_register_callback+0x74>)
     828:	4798      	blx	r3
	return ERR_NONE;
     82a:	2000      	movs	r0, #0
		break;
     82c:	e7e8      	b.n	800 <usart_async_register_callback+0x3c>
     82e:	46c0      	nop			; (mov r8, r8)
     830:	000024b0 	.word	0x000024b0
     834:	0000083d 	.word	0x0000083d
     838:	00001221 	.word	0x00001221

0000083c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     83c:	2800      	cmp	r0, #0
     83e:	d100      	bne.n	842 <assert+0x6>
		__asm("BKPT #0");
     840:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     842:	4770      	bx	lr

00000844 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     844:	b570      	push	{r4, r5, r6, lr}
     846:	0004      	movs	r4, r0
     848:	000e      	movs	r6, r1
     84a:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     84c:	2800      	cmp	r0, #0
     84e:	d012      	beq.n	876 <ringbuffer_init+0x32>
     850:	2900      	cmp	r1, #0
     852:	d012      	beq.n	87a <ringbuffer_init+0x36>
     854:	2a00      	cmp	r2, #0
     856:	d112      	bne.n	87e <ringbuffer_init+0x3a>
     858:	2000      	movs	r0, #0
     85a:	2228      	movs	r2, #40	; 0x28
     85c:	490a      	ldr	r1, [pc, #40]	; (888 <ringbuffer_init+0x44>)
     85e:	4b0b      	ldr	r3, [pc, #44]	; (88c <ringbuffer_init+0x48>)
     860:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     862:	1e6b      	subs	r3, r5, #1
     864:	422b      	tst	r3, r5
     866:	d10c      	bne.n	882 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     868:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     86a:	2300      	movs	r3, #0
     86c:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     86e:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     870:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     872:	2000      	movs	r0, #0
}
     874:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     876:	2000      	movs	r0, #0
     878:	e7ef      	b.n	85a <ringbuffer_init+0x16>
     87a:	2000      	movs	r0, #0
     87c:	e7ed      	b.n	85a <ringbuffer_init+0x16>
     87e:	2001      	movs	r0, #1
     880:	e7eb      	b.n	85a <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     882:	200d      	movs	r0, #13
     884:	4240      	negs	r0, r0
     886:	e7f5      	b.n	874 <ringbuffer_init+0x30>
     888:	000024d0 	.word	0x000024d0
     88c:	0000083d 	.word	0x0000083d

00000890 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     890:	b570      	push	{r4, r5, r6, lr}
     892:	0004      	movs	r4, r0
     894:	000d      	movs	r5, r1
	ASSERT(rb && data);
     896:	2800      	cmp	r0, #0
     898:	d016      	beq.n	8c8 <ringbuffer_get+0x38>
     89a:	2900      	cmp	r1, #0
     89c:	d012      	beq.n	8c4 <ringbuffer_get+0x34>
     89e:	2001      	movs	r0, #1
     8a0:	2240      	movs	r2, #64	; 0x40
     8a2:	490c      	ldr	r1, [pc, #48]	; (8d4 <ringbuffer_get+0x44>)
     8a4:	4b0c      	ldr	r3, [pc, #48]	; (8d8 <ringbuffer_get+0x48>)
     8a6:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     8a8:	68a3      	ldr	r3, [r4, #8]
     8aa:	68e2      	ldr	r2, [r4, #12]
     8ac:	429a      	cmp	r2, r3
     8ae:	d00d      	beq.n	8cc <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     8b0:	6862      	ldr	r2, [r4, #4]
     8b2:	4013      	ands	r3, r2
     8b4:	6822      	ldr	r2, [r4, #0]
     8b6:	5cd3      	ldrb	r3, [r2, r3]
     8b8:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     8ba:	68a3      	ldr	r3, [r4, #8]
     8bc:	3301      	adds	r3, #1
     8be:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     8c0:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     8c2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     8c4:	2000      	movs	r0, #0
     8c6:	e7eb      	b.n	8a0 <ringbuffer_get+0x10>
     8c8:	2000      	movs	r0, #0
     8ca:	e7e9      	b.n	8a0 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     8cc:	200a      	movs	r0, #10
     8ce:	4240      	negs	r0, r0
     8d0:	e7f7      	b.n	8c2 <ringbuffer_get+0x32>
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	000024d0 	.word	0x000024d0
     8d8:	0000083d 	.word	0x0000083d

000008dc <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     8dc:	b570      	push	{r4, r5, r6, lr}
     8de:	0004      	movs	r4, r0
     8e0:	000d      	movs	r5, r1
	ASSERT(rb);
     8e2:	1e43      	subs	r3, r0, #1
     8e4:	4198      	sbcs	r0, r3
     8e6:	b2c0      	uxtb	r0, r0
     8e8:	2251      	movs	r2, #81	; 0x51
     8ea:	490a      	ldr	r1, [pc, #40]	; (914 <ringbuffer_put+0x38>)
     8ec:	4b0a      	ldr	r3, [pc, #40]	; (918 <ringbuffer_put+0x3c>)
     8ee:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     8f0:	6863      	ldr	r3, [r4, #4]
     8f2:	68e2      	ldr	r2, [r4, #12]
     8f4:	4013      	ands	r3, r2
     8f6:	6822      	ldr	r2, [r4, #0]
     8f8:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     8fa:	68e3      	ldr	r3, [r4, #12]
     8fc:	68a2      	ldr	r2, [r4, #8]
     8fe:	1a9a      	subs	r2, r3, r2
     900:	6861      	ldr	r1, [r4, #4]
     902:	428a      	cmp	r2, r1
     904:	d901      	bls.n	90a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     906:	1a59      	subs	r1, r3, r1
     908:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     90a:	3301      	adds	r3, #1
     90c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     90e:	2000      	movs	r0, #0
     910:	bd70      	pop	{r4, r5, r6, pc}
     912:	46c0      	nop			; (mov r8, r8)
     914:	000024d0 	.word	0x000024d0
     918:	0000083d 	.word	0x0000083d

0000091c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     91c:	b510      	push	{r4, lr}
     91e:	0004      	movs	r4, r0
	ASSERT(rb);
     920:	1e43      	subs	r3, r0, #1
     922:	4198      	sbcs	r0, r3
     924:	b2c0      	uxtb	r0, r0
     926:	2267      	movs	r2, #103	; 0x67
     928:	4903      	ldr	r1, [pc, #12]	; (938 <ringbuffer_num+0x1c>)
     92a:	4b04      	ldr	r3, [pc, #16]	; (93c <ringbuffer_num+0x20>)
     92c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     92e:	68e0      	ldr	r0, [r4, #12]
     930:	68a3      	ldr	r3, [r4, #8]
     932:	1ac0      	subs	r0, r0, r3
}
     934:	bd10      	pop	{r4, pc}
     936:	46c0      	nop			; (mov r8, r8)
     938:	000024d0 	.word	0x000024d0
     93c:	0000083d 	.word	0x0000083d

00000940 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
     940:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev->hw = hw;
     942:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     944:	698b      	ldr	r3, [r1, #24]
     946:	2201      	movs	r2, #1
     948:	4313      	orrs	r3, r2
     94a:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
     94c:	6803      	ldr	r3, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
     94e:	699a      	ldr	r2, [r3, #24]
     950:	07d2      	lsls	r2, r2, #31
     952:	d5fb      	bpl.n	94c <_can_async_init+0xc>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     954:	699a      	ldr	r2, [r3, #24]
     956:	2402      	movs	r4, #2
     958:	4322      	orrs	r2, r4
     95a:	619a      	str	r2, [r3, #24]
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (hw == CAN0) {
     95c:	4b33      	ldr	r3, [pc, #204]	; (a2c <_can_async_init+0xec>)
     95e:	4299      	cmp	r1, r3
     960:	d00f      	beq.n	982 <_can_async_init+0x42>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
     962:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
     964:	6993      	ldr	r3, [r2, #24]
     966:	2102      	movs	r1, #2
     968:	438b      	bics	r3, r1
     96a:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     96c:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     96e:	6993      	ldr	r3, [r2, #24]
     970:	3901      	subs	r1, #1
     972:	438b      	bics	r3, r1
     974:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
     976:	6803      	ldr	r3, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     978:	699b      	ldr	r3, [r3, #24]
     97a:	07db      	lsls	r3, r3, #31
     97c:	d4fb      	bmi.n	976 <_can_async_init+0x36>
	};

	return ERR_NONE;
}
     97e:	2000      	movs	r0, #0
     980:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_can0_dev    = dev;
     982:	4b2b      	ldr	r3, [pc, #172]	; (a30 <_can_async_init+0xf0>)
     984:	001a      	movs	r2, r3
     986:	c201      	stmia	r2!, {r0}
		dev->context = (void *)&_can0_context;
     988:	492a      	ldr	r1, [pc, #168]	; (a34 <_can_async_init+0xf4>)
     98a:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN0_CCCR_REG);
     98c:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
     98e:	698c      	ldr	r4, [r1, #24]
     990:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN0_MRCFG_REG);
     992:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
     994:	2400      	movs	r4, #0
     996:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN0_BTP_REG);
     998:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
     99a:	4d27      	ldr	r5, [pc, #156]	; (a38 <_can_async_init+0xf8>)
     99c:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN0_DBTP_REG);
     99e:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
     9a0:	4d26      	ldr	r5, [pc, #152]	; (a3c <_can_async_init+0xfc>)
     9a2:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN0_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo));
     9a4:	4d26      	ldr	r5, [pc, #152]	; (a40 <_can_async_init+0x100>)
     9a6:	042d      	lsls	r5, r5, #16
     9a8:	0c2d      	lsrs	r5, r5, #16
     9aa:	2180      	movs	r1, #128	; 0x80
     9ac:	0289      	lsls	r1, r1, #10
     9ae:	430d      	orrs	r5, r1
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
     9b0:	26a0      	movs	r6, #160	; 0xa0
     9b2:	6807      	ldr	r7, [r0, #0]
     9b4:	51bd      	str	r5, [r7, r6]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
     9b6:	25bc      	movs	r5, #188	; 0xbc
     9b8:	6806      	ldr	r6, [r0, #0]
     9ba:	5174      	str	r4, [r6, r5]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
     9bc:	350c      	adds	r5, #12
     9be:	6806      	ldr	r6, [r0, #0]
     9c0:	5174      	str	r4, [r6, r5]
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN0_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can0_tx_fifo));
     9c2:	4d20      	ldr	r5, [pc, #128]	; (a44 <_can_async_init+0x104>)
     9c4:	042d      	lsls	r5, r5, #16
     9c6:	0c2d      	lsrs	r5, r5, #16
     9c8:	2680      	movs	r6, #128	; 0x80
     9ca:	04b6      	lsls	r6, r6, #18
     9cc:	4335      	orrs	r5, r6
	((Can *)hw)->TXBC.reg = data;
     9ce:	26c0      	movs	r6, #192	; 0xc0
     9d0:	6807      	ldr	r7, [r0, #0]
     9d2:	51bd      	str	r5, [r7, r6]
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN0_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo));
     9d4:	0412      	lsls	r2, r2, #16
     9d6:	0c12      	lsrs	r2, r2, #16
     9d8:	430a      	orrs	r2, r1
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
     9da:	25f0      	movs	r5, #240	; 0xf0
     9dc:	6806      	ldr	r6, [r0, #0]
     9de:	5172      	str	r2, [r6, r5]
	((Can *)hw)->GFC.reg = data;
     9e0:	3d70      	subs	r5, #112	; 0x70
     9e2:	2228      	movs	r2, #40	; 0x28
     9e4:	6806      	ldr	r6, [r0, #0]
     9e6:	5172      	str	r2, [r6, r5]
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN0_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can0_rx_std_filter));
     9e8:	001a      	movs	r2, r3
     9ea:	3214      	adds	r2, #20
     9ec:	0412      	lsls	r2, r2, #16
     9ee:	0c12      	lsrs	r2, r2, #16
     9f0:	430a      	orrs	r2, r1
	((Can *)hw)->SIDFC.reg = data;
     9f2:	2684      	movs	r6, #132	; 0x84
     9f4:	6807      	ldr	r7, [r0, #0]
     9f6:	51ba      	str	r2, [r7, r6]
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN0_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can0_rx_ext_filter));
     9f8:	331c      	adds	r3, #28
     9fa:	041b      	lsls	r3, r3, #16
     9fc:	0c1b      	lsrs	r3, r3, #16
     9fe:	430b      	orrs	r3, r1
	((Can *)hw)->XIDFC.reg = data;
     a00:	2288      	movs	r2, #136	; 0x88
     a02:	6801      	ldr	r1, [r0, #0]
     a04:	508b      	str	r3, [r1, r2]
	((Can *)hw)->XIDAM.reg = data;
     a06:	2390      	movs	r3, #144	; 0x90
     a08:	6802      	ldr	r2, [r0, #0]
     a0a:	50d4      	str	r4, [r2, r3]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a0c:	4b0e      	ldr	r3, [pc, #56]	; (a48 <_can_async_init+0x108>)
     a0e:	2280      	movs	r2, #128	; 0x80
     a10:	0212      	lsls	r2, r2, #8
     a12:	515a      	str	r2, [r3, r5]
  __ASM volatile ("dsb 0xF":::"memory");
     a14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     a18:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a1c:	21c0      	movs	r1, #192	; 0xc0
     a1e:	0049      	lsls	r1, r1, #1
     a20:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a22:	601a      	str	r2, [r3, #0]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
     a24:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
     a26:	2201      	movs	r2, #1
     a28:	65da      	str	r2, [r3, #92]	; 0x5c
     a2a:	e79a      	b.n	962 <_can_async_init+0x22>
     a2c:	42001c00 	.word	0x42001c00
     a30:	20000044 	.word	0x20000044
     a34:	20000000 	.word	0x20000000
     a38:	06010c01 	.word	0x06010c01
     a3c:	00000a33 	.word	0x00000a33
     a40:	200000f0 	.word	0x200000f0
     a44:	20000110 	.word	0x20000110
     a48:	e000e100 	.word	0xe000e100

00000a4c <_can_async_enable>:
/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
	hri_can_clear_CCCR_INIT_bit(dev->hw);
     a4c:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
     a4e:	6993      	ldr	r3, [r2, #24]
     a50:	2101      	movs	r1, #1
     a52:	438b      	bics	r3, r1
     a54:	6193      	str	r3, [r2, #24]
	return ERR_NONE;
}
     a56:	2000      	movs	r0, #0
     a58:	4770      	bx	lr
	...

00000a5c <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	46ce      	mov	lr, r9
     a60:	4647      	mov	r7, r8
     a62:	b580      	push	{r7, lr}
     a64:	b085      	sub	sp, #20
     a66:	4680      	mov	r8, r0
	struct _can_rx_fifo_entry *f = NULL;
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
     a68:	6803      	ldr	r3, [r0, #0]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
     a6a:	22a4      	movs	r2, #164	; 0xa4
     a6c:	589a      	ldr	r2, [r3, r2]
     a6e:	0652      	lsls	r2, r2, #25
     a70:	d045      	beq.n	afe <_can_async_read+0xa2>
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
     a72:	22a4      	movs	r2, #164	; 0xa4
     a74:	589c      	ldr	r4, [r3, r2]
     a76:	0a24      	lsrs	r4, r4, #8
     a78:	3a65      	subs	r2, #101	; 0x65
     a7a:	4014      	ands	r4, r2
     a7c:	46a1      	mov	r9, r4
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (dev->hw == CAN0) {
     a7e:	4a23      	ldr	r2, [pc, #140]	; (b0c <_can_async_read+0xb0>)
     a80:	4293      	cmp	r3, r2
     a82:	d02e      	beq.n	ae2 <_can_async_read+0x86>
	struct _can_rx_fifo_entry *f = NULL;
     a84:	2300      	movs	r3, #0
	if (dev->hw == CAN1) {
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
	}
#endif

	if (f == NULL) {
     a86:	2b00      	cmp	r3, #0
     a88:	d03c      	beq.n	b04 <_can_async_read+0xa8>
		return ERR_NO_RESOURCE;
	}

	if (f->R0.bit.XTD == 1) {
     a8a:	681a      	ldr	r2, [r3, #0]
     a8c:	0052      	lsls	r2, r2, #1
     a8e:	d42c      	bmi.n	aea <_can_async_read+0x8e>
		msg->fmt = CAN_FMT_EXTID;
		msg->id  = f->R0.bit.ID;
	} else {
		msg->fmt = CAN_FMT_STDID;
     a90:	2200      	movs	r2, #0
     a92:	734a      	strb	r2, [r1, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
     a94:	681a      	ldr	r2, [r3, #0]
     a96:	00d2      	lsls	r2, r2, #3
     a98:	0d52      	lsrs	r2, r2, #21
     a9a:	600a      	str	r2, [r1, #0]
	}

	if (f->R0.bit.RTR == 1) {
     a9c:	681a      	ldr	r2, [r3, #0]
     a9e:	0092      	lsls	r2, r2, #2
     aa0:	d42a      	bmi.n	af8 <_can_async_read+0x9c>
		msg->type = CAN_TYPE_REMOTE;
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
     aa2:	466a      	mov	r2, sp
     aa4:	481a      	ldr	r0, [pc, #104]	; (b10 <_can_async_read+0xb4>)
     aa6:	466e      	mov	r6, sp
     aa8:	c8b0      	ldmia	r0!, {r4, r5, r7}
     aaa:	c6b0      	stmia	r6!, {r4, r5, r7}
     aac:	6800      	ldr	r0, [r0, #0]
     aae:	6030      	str	r0, [r6, #0]
	msg->len                = dlc2len[f->R1.bit.DLC];
     ab0:	6858      	ldr	r0, [r3, #4]
     ab2:	0300      	lsls	r0, r0, #12
     ab4:	0f00      	lsrs	r0, r0, #28
     ab6:	5c12      	ldrb	r2, [r2, r0]
     ab8:	730a      	strb	r2, [r1, #12]

	memcpy(msg->data, f->data, msg->len);
     aba:	6888      	ldr	r0, [r1, #8]
     abc:	3308      	adds	r3, #8
     abe:	0019      	movs	r1, r3
     ac0:	4b14      	ldr	r3, [pc, #80]	; (b14 <_can_async_read+0xb8>)
     ac2:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
     ac4:	4643      	mov	r3, r8
     ac6:	6819      	ldr	r1, [r3, #0]
	tmp = ((Can *)hw)->RXF0A.reg;
     ac8:	22a8      	movs	r2, #168	; 0xa8
     aca:	588b      	ldr	r3, [r1, r2]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
     acc:	203f      	movs	r0, #63	; 0x3f
     ace:	4383      	bics	r3, r0
	tmp |= CAN_RXF0A_F0AI(data);
     ad0:	464c      	mov	r4, r9
     ad2:	431c      	orrs	r4, r3
	((Can *)hw)->RXF0A.reg = tmp;
     ad4:	508c      	str	r4, [r1, r2]

	return ERR_NONE;
     ad6:	2000      	movs	r0, #0
}
     ad8:	b005      	add	sp, #20
     ada:	bc0c      	pop	{r2, r3}
     adc:	4690      	mov	r8, r2
     ade:	4699      	mov	r9, r3
     ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
     ae2:	0123      	lsls	r3, r4, #4
     ae4:	4a0c      	ldr	r2, [pc, #48]	; (b18 <_can_async_read+0xbc>)
     ae6:	189b      	adds	r3, r3, r2
     ae8:	e7cd      	b.n	a86 <_can_async_read+0x2a>
		msg->fmt = CAN_FMT_EXTID;
     aea:	2201      	movs	r2, #1
     aec:	734a      	strb	r2, [r1, #13]
		msg->id  = f->R0.bit.ID;
     aee:	681a      	ldr	r2, [r3, #0]
     af0:	00d2      	lsls	r2, r2, #3
     af2:	08d2      	lsrs	r2, r2, #3
     af4:	600a      	str	r2, [r1, #0]
     af6:	e7d1      	b.n	a9c <_can_async_read+0x40>
		msg->type = CAN_TYPE_REMOTE;
     af8:	2201      	movs	r2, #1
     afa:	710a      	strb	r2, [r1, #4]
     afc:	e7d1      	b.n	aa2 <_can_async_read+0x46>
		return ERR_NOT_FOUND;
     afe:	200a      	movs	r0, #10
     b00:	4240      	negs	r0, r0
     b02:	e7e9      	b.n	ad8 <_can_async_read+0x7c>
		return ERR_NO_RESOURCE;
     b04:	201c      	movs	r0, #28
     b06:	4240      	negs	r0, r0
     b08:	e7e6      	b.n	ad8 <_can_async_read+0x7c>
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	42001c00 	.word	0x42001c00
     b10:	000024f4 	.word	0x000024f4
     b14:	0000245f 	.word	0x0000245f
     b18:	200000f0 	.word	0x200000f0

00000b1c <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
     b1c:	b570      	push	{r4, r5, r6, lr}
     b1e:	0005      	movs	r5, r0
	struct _can_tx_fifo_entry *f = NULL;
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
     b20:	6803      	ldr	r3, [r0, #0]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
     b22:	22c4      	movs	r2, #196	; 0xc4
     b24:	589a      	ldr	r2, [r3, r2]
     b26:	0292      	lsls	r2, r2, #10
     b28:	d500      	bpl.n	b2c <_can_async_write+0x10>
     b2a:	e093      	b.n	c54 <_can_async_write+0x138>
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
     b2c:	22c4      	movs	r2, #196	; 0xc4
     b2e:	5898      	ldr	r0, [r3, r2]
     b30:	0c00      	lsrs	r0, r0, #16
     b32:	3aa5      	subs	r2, #165	; 0xa5
     b34:	4010      	ands	r0, r2
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (dev->hw == CAN0) {
     b36:	4a4a      	ldr	r2, [pc, #296]	; (c60 <_can_async_write+0x144>)
     b38:	4293      	cmp	r3, r2
     b3a:	d03a      	beq.n	bb2 <_can_async_write+0x96>
	struct _can_tx_fifo_entry *f = NULL;
     b3c:	2000      	movs	r0, #0
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
	}
#endif
	if (f == NULL) {
     b3e:	2800      	cmp	r0, #0
     b40:	d100      	bne.n	b44 <_can_async_write+0x28>
     b42:	e08a      	b.n	c5a <_can_async_write+0x13e>
		return ERR_NO_RESOURCE;
	}

	if (msg->fmt == CAN_FMT_EXTID) {
     b44:	7b4b      	ldrb	r3, [r1, #13]
     b46:	2b01      	cmp	r3, #1
     b48:	d037      	beq.n	bba <_can_async_write+0x9e>
		f->T0.val     = msg->id;
		f->T0.bit.XTD = 1;
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
     b4a:	680b      	ldr	r3, [r1, #0]
     b4c:	049b      	lsls	r3, r3, #18
     b4e:	6003      	str	r3, [r0, #0]
	}

	if (msg->len <= 8) {
     b50:	7b0a      	ldrb	r2, [r1, #12]
     b52:	2a08      	cmp	r2, #8
     b54:	d839      	bhi.n	bca <_can_async_write+0xae>
		f->T1.bit.DLC = msg->len;
     b56:	6844      	ldr	r4, [r0, #4]
     b58:	230f      	movs	r3, #15
     b5a:	4013      	ands	r3, r2
     b5c:	041b      	lsls	r3, r3, #16
     b5e:	4a41      	ldr	r2, [pc, #260]	; (c64 <_can_async_write+0x148>)
     b60:	4014      	ands	r4, r2
     b62:	4323      	orrs	r3, r4
     b64:	6043      	str	r3, [r0, #4]
		f->T1.bit.DLC = 0xE;
	} else if (msg->len <= 64) {
		f->T1.bit.DLC = 0xF;
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
     b66:	682b      	ldr	r3, [r5, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     b68:	699b      	ldr	r3, [r3, #24]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
     b6a:	0a1b      	lsrs	r3, r3, #8
     b6c:	2401      	movs	r4, #1
     b6e:	6842      	ldr	r2, [r0, #4]
     b70:	4023      	ands	r3, r4
     b72:	055b      	lsls	r3, r3, #21
     b74:	4e3c      	ldr	r6, [pc, #240]	; (c68 <_can_async_write+0x14c>)
     b76:	4032      	ands	r2, r6
     b78:	4313      	orrs	r3, r2
     b7a:	6043      	str	r3, [r0, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
     b7c:	682b      	ldr	r3, [r5, #0]
	tmp = ((Can *)hw)->CCCR.reg;
     b7e:	699b      	ldr	r3, [r3, #24]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
     b80:	0a5b      	lsrs	r3, r3, #9
     b82:	6842      	ldr	r2, [r0, #4]
     b84:	4023      	ands	r3, r4
     b86:	051b      	lsls	r3, r3, #20
     b88:	4e38      	ldr	r6, [pc, #224]	; (c6c <_can_async_write+0x150>)
     b8a:	4032      	ands	r2, r6
     b8c:	4313      	orrs	r3, r2
     b8e:	6043      	str	r3, [r0, #4]

	memcpy(f->data, msg->data, msg->len);
     b90:	3008      	adds	r0, #8
     b92:	688b      	ldr	r3, [r1, #8]
     b94:	7b0a      	ldrb	r2, [r1, #12]
     b96:	0019      	movs	r1, r3
     b98:	4b35      	ldr	r3, [pc, #212]	; (c70 <_can_async_write+0x154>)
     b9a:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
     b9c:	6829      	ldr	r1, [r5, #0]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
     b9e:	23c4      	movs	r3, #196	; 0xc4
     ba0:	58ca      	ldr	r2, [r1, r3]
     ba2:	0c12      	lsrs	r2, r2, #16
     ba4:	3ba5      	subs	r3, #165	; 0xa5
     ba6:	4013      	ands	r3, r2
     ba8:	409c      	lsls	r4, r3
	((Can *)hw)->TXBAR.reg = data;
     baa:	23d0      	movs	r3, #208	; 0xd0
     bac:	50cc      	str	r4, [r1, r3]
	return ERR_NONE;
     bae:	2000      	movs	r0, #0
}
     bb0:	bd70      	pop	{r4, r5, r6, pc}
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
     bb2:	0100      	lsls	r0, r0, #4
     bb4:	4b2f      	ldr	r3, [pc, #188]	; (c74 <_can_async_write+0x158>)
     bb6:	18c0      	adds	r0, r0, r3
     bb8:	e7c1      	b.n	b3e <_can_async_write+0x22>
		f->T0.val     = msg->id;
     bba:	680b      	ldr	r3, [r1, #0]
     bbc:	6003      	str	r3, [r0, #0]
		f->T0.bit.XTD = 1;
     bbe:	6802      	ldr	r2, [r0, #0]
     bc0:	2380      	movs	r3, #128	; 0x80
     bc2:	05db      	lsls	r3, r3, #23
     bc4:	4313      	orrs	r3, r2
     bc6:	6003      	str	r3, [r0, #0]
     bc8:	e7c2      	b.n	b50 <_can_async_write+0x34>
	} else if (msg->len <= 12) {
     bca:	2a0c      	cmp	r2, #12
     bcc:	d807      	bhi.n	bde <_can_async_write+0xc2>
		f->T1.bit.DLC = 0x9;
     bce:	6842      	ldr	r2, [r0, #4]
     bd0:	4b24      	ldr	r3, [pc, #144]	; (c64 <_can_async_write+0x148>)
     bd2:	401a      	ands	r2, r3
     bd4:	2390      	movs	r3, #144	; 0x90
     bd6:	031b      	lsls	r3, r3, #12
     bd8:	4313      	orrs	r3, r2
     bda:	6043      	str	r3, [r0, #4]
     bdc:	e7c3      	b.n	b66 <_can_async_write+0x4a>
	} else if (msg->len <= 16) {
     bde:	2a10      	cmp	r2, #16
     be0:	d807      	bhi.n	bf2 <_can_async_write+0xd6>
		f->T1.bit.DLC = 0xA;
     be2:	6842      	ldr	r2, [r0, #4]
     be4:	4b1f      	ldr	r3, [pc, #124]	; (c64 <_can_async_write+0x148>)
     be6:	401a      	ands	r2, r3
     be8:	23a0      	movs	r3, #160	; 0xa0
     bea:	031b      	lsls	r3, r3, #12
     bec:	4313      	orrs	r3, r2
     bee:	6043      	str	r3, [r0, #4]
     bf0:	e7b9      	b.n	b66 <_can_async_write+0x4a>
	} else if (msg->len <= 20) {
     bf2:	2a14      	cmp	r2, #20
     bf4:	d807      	bhi.n	c06 <_can_async_write+0xea>
		f->T1.bit.DLC = 0xB;
     bf6:	6842      	ldr	r2, [r0, #4]
     bf8:	4b1a      	ldr	r3, [pc, #104]	; (c64 <_can_async_write+0x148>)
     bfa:	401a      	ands	r2, r3
     bfc:	23b0      	movs	r3, #176	; 0xb0
     bfe:	031b      	lsls	r3, r3, #12
     c00:	4313      	orrs	r3, r2
     c02:	6043      	str	r3, [r0, #4]
     c04:	e7af      	b.n	b66 <_can_async_write+0x4a>
	} else if (msg->len <= 24) {
     c06:	2a18      	cmp	r2, #24
     c08:	d807      	bhi.n	c1a <_can_async_write+0xfe>
		f->T1.bit.DLC = 0xC;
     c0a:	6842      	ldr	r2, [r0, #4]
     c0c:	4b15      	ldr	r3, [pc, #84]	; (c64 <_can_async_write+0x148>)
     c0e:	401a      	ands	r2, r3
     c10:	23c0      	movs	r3, #192	; 0xc0
     c12:	031b      	lsls	r3, r3, #12
     c14:	4313      	orrs	r3, r2
     c16:	6043      	str	r3, [r0, #4]
     c18:	e7a5      	b.n	b66 <_can_async_write+0x4a>
	} else if (msg->len <= 32) {
     c1a:	2a20      	cmp	r2, #32
     c1c:	d807      	bhi.n	c2e <_can_async_write+0x112>
		f->T1.bit.DLC = 0xD;
     c1e:	6842      	ldr	r2, [r0, #4]
     c20:	4b10      	ldr	r3, [pc, #64]	; (c64 <_can_async_write+0x148>)
     c22:	401a      	ands	r2, r3
     c24:	23d0      	movs	r3, #208	; 0xd0
     c26:	031b      	lsls	r3, r3, #12
     c28:	4313      	orrs	r3, r2
     c2a:	6043      	str	r3, [r0, #4]
     c2c:	e79b      	b.n	b66 <_can_async_write+0x4a>
	} else if (msg->len <= 48) {
     c2e:	2a30      	cmp	r2, #48	; 0x30
     c30:	d807      	bhi.n	c42 <_can_async_write+0x126>
		f->T1.bit.DLC = 0xE;
     c32:	6842      	ldr	r2, [r0, #4]
     c34:	4b0b      	ldr	r3, [pc, #44]	; (c64 <_can_async_write+0x148>)
     c36:	401a      	ands	r2, r3
     c38:	23e0      	movs	r3, #224	; 0xe0
     c3a:	031b      	lsls	r3, r3, #12
     c3c:	4313      	orrs	r3, r2
     c3e:	6043      	str	r3, [r0, #4]
     c40:	e791      	b.n	b66 <_can_async_write+0x4a>
	} else if (msg->len <= 64) {
     c42:	2a40      	cmp	r2, #64	; 0x40
     c44:	d900      	bls.n	c48 <_can_async_write+0x12c>
     c46:	e78e      	b.n	b66 <_can_async_write+0x4a>
		f->T1.bit.DLC = 0xF;
     c48:	6842      	ldr	r2, [r0, #4]
     c4a:	23f0      	movs	r3, #240	; 0xf0
     c4c:	031b      	lsls	r3, r3, #12
     c4e:	4313      	orrs	r3, r2
     c50:	6043      	str	r3, [r0, #4]
     c52:	e788      	b.n	b66 <_can_async_write+0x4a>
		return ERR_NO_RESOURCE;
     c54:	201c      	movs	r0, #28
     c56:	4240      	negs	r0, r0
     c58:	e7aa      	b.n	bb0 <_can_async_write+0x94>
		return ERR_NO_RESOURCE;
     c5a:	201c      	movs	r0, #28
     c5c:	4240      	negs	r0, r0
     c5e:	e7a7      	b.n	bb0 <_can_async_write+0x94>
     c60:	42001c00 	.word	0x42001c00
     c64:	fff0ffff 	.word	0xfff0ffff
     c68:	ffdfffff 	.word	0xffdfffff
     c6c:	ffefffff 	.word	0xffefffff
     c70:	0000245f 	.word	0x0000245f
     c74:	20000110 	.word	0x20000110

00000c78 <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
     c78:	b510      	push	{r4, lr}
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
     c7a:	2900      	cmp	r1, #0
     c7c:	d009      	beq.n	c92 <_can_async_set_irq_state+0x1a>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
	} else if (type == CAN_ASYNC_TX_CB) {
     c7e:	2901      	cmp	r1, #1
     c80:	d00e      	beq.n	ca0 <_can_async_set_irq_state+0x28>
		hri_can_write_IE_TCE_bit(dev->hw, state);
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
	} else if (type == CAN_ASYNC_IRQ_CB) {
     c82:	2902      	cmp	r1, #2
     c84:	d10b      	bne.n	c9e <_can_async_set_irq_state+0x26>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
     c86:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
     c88:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tmp &= mask;
     c8a:	490c      	ldr	r1, [pc, #48]	; (cbc <_can_async_set_irq_state+0x44>)
     c8c:	400b      	ands	r3, r1
	((Can *)hw)->IE.reg = data;
     c8e:	6553      	str	r3, [r2, #84]	; 0x54
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
     c90:	e005      	b.n	c9e <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
     c92:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
     c94:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_RF0NE;
     c96:	2001      	movs	r0, #1
     c98:	4383      	bics	r3, r0
	tmp |= value << CAN_IE_RF0NE_Pos;
     c9a:	431a      	orrs	r2, r3
	((Can *)hw)->IE.reg = tmp;
     c9c:	654a      	str	r2, [r1, #84]	; 0x54
}
     c9e:	bd10      	pop	{r4, pc}
		hri_can_write_IE_TCE_bit(dev->hw, state);
     ca0:	6801      	ldr	r1, [r0, #0]
	tmp = ((Can *)hw)->IE.reg;
     ca2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~CAN_IE_TCE;
     ca4:	4c06      	ldr	r4, [pc, #24]	; (cc0 <_can_async_set_irq_state+0x48>)
     ca6:	4023      	ands	r3, r4
	tmp |= value << CAN_IE_TCE_Pos;
     ca8:	0252      	lsls	r2, r2, #9
     caa:	431a      	orrs	r2, r3
	((Can *)hw)->IE.reg = tmp;
     cac:	654a      	str	r2, [r1, #84]	; 0x54
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
     cae:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->TXBTIE.reg = data;
     cb0:	2101      	movs	r1, #1
     cb2:	4249      	negs	r1, r1
     cb4:	23e0      	movs	r3, #224	; 0xe0
     cb6:	50d1      	str	r1, [r2, r3]
     cb8:	e7f1      	b.n	c9e <_can_async_set_irq_state+0x26>
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	00000201 	.word	0x00000201
     cc0:	fffffdff 	.word	0xfffffdff

00000cc4 <_can_async_get_rxerr>:
/**
 * \brief Return number of read errors
 */
uint8_t _can_async_get_rxerr(struct _can_async_device *const dev)
{
	return hri_can_read_ECR_REC_bf(dev->hw);
     cc4:	6803      	ldr	r3, [r0, #0]
	return (((Can *)hw)->ECR.reg & CAN_ECR_REC_Msk) >> CAN_ECR_REC_Pos;
     cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     cc8:	0a1b      	lsrs	r3, r3, #8
     cca:	207f      	movs	r0, #127	; 0x7f
     ccc:	4018      	ands	r0, r3
}
     cce:	4770      	bx	lr

00000cd0 <_can_async_get_txerr>:
/**
 * \brief Return number of write errors
 */
uint8_t _can_async_get_txerr(struct _can_async_device *const dev)
{
	return hri_can_read_ECR_TEC_bf(dev->hw);
     cd0:	6803      	ldr	r3, [r0, #0]
	return (((Can *)hw)->ECR.reg & CAN_ECR_TEC_Msk) >> CAN_ECR_TEC_Pos;
     cd2:	6c18      	ldr	r0, [r3, #64]	; 0x40
     cd4:	b2c0      	uxtb	r0, r0
}
     cd6:	4770      	bx	lr

00000cd8 <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
     cd8:	b530      	push	{r4, r5, lr}
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
     cda:	6984      	ldr	r4, [r0, #24]
     cdc:	0088      	lsls	r0, r1, #2
     cde:	68e5      	ldr	r5, [r4, #12]
     ce0:	46ac      	mov	ip, r5
     ce2:	4460      	add	r0, ip
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
     ce4:	6924      	ldr	r4, [r4, #16]
     ce6:	00c9      	lsls	r1, r1, #3
     ce8:	1861      	adds	r1, r4, r1

	if (fmt == CAN_FMT_STDID) {
     cea:	2a00      	cmp	r2, #0
     cec:	d11d      	bne.n	d2a <_can_async_set_filter+0x52>
		if (filter == NULL) {
     cee:	2b00      	cmp	r3, #0
     cf0:	d019      	beq.n	d26 <_can_async_set_filter+0x4e>
			sf->S0.val = 0;
			return ERR_NONE;
		}
		sf->S0.val       = filter->mask;
     cf2:	685a      	ldr	r2, [r3, #4]
     cf4:	6002      	str	r2, [r0, #0]
		sf->S0.bit.SFID1 = filter->id;
     cf6:	681b      	ldr	r3, [r3, #0]
     cf8:	6802      	ldr	r2, [r0, #0]
     cfa:	055b      	lsls	r3, r3, #21
     cfc:	095b      	lsrs	r3, r3, #5
     cfe:	4917      	ldr	r1, [pc, #92]	; (d5c <_can_async_set_filter+0x84>)
     d00:	400a      	ands	r2, r1
     d02:	4313      	orrs	r3, r2
     d04:	6003      	str	r3, [r0, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
     d06:	6803      	ldr	r3, [r0, #0]
     d08:	009b      	lsls	r3, r3, #2
     d0a:	089b      	lsrs	r3, r3, #2
     d0c:	2280      	movs	r2, #128	; 0x80
     d0e:	0612      	lsls	r2, r2, #24
     d10:	431a      	orrs	r2, r3
     d12:	6002      	str	r2, [r0, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
     d14:	6802      	ldr	r2, [r0, #0]
     d16:	4b12      	ldr	r3, [pc, #72]	; (d60 <_can_async_set_filter+0x88>)
     d18:	401a      	ands	r2, r3
     d1a:	2380      	movs	r3, #128	; 0x80
     d1c:	051b      	lsls	r3, r3, #20
     d1e:	4313      	orrs	r3, r2
     d20:	6003      	str	r3, [r0, #0]
		ef->F1.val      = filter->mask;
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
	}

	return ERR_NONE;
}
     d22:	2000      	movs	r0, #0
     d24:	bd30      	pop	{r4, r5, pc}
			sf->S0.val = 0;
     d26:	6003      	str	r3, [r0, #0]
			return ERR_NONE;
     d28:	e7fb      	b.n	d22 <_can_async_set_filter+0x4a>
	} else if (fmt == CAN_FMT_EXTID) {
     d2a:	2a01      	cmp	r2, #1
     d2c:	d1f9      	bne.n	d22 <_can_async_set_filter+0x4a>
		if (filter == NULL) {
     d2e:	2b00      	cmp	r3, #0
     d30:	d012      	beq.n	d58 <_can_async_set_filter+0x80>
		ef->F0.val      = filter->id;
     d32:	681a      	ldr	r2, [r3, #0]
     d34:	600a      	str	r2, [r1, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
     d36:	680a      	ldr	r2, [r1, #0]
     d38:	00d2      	lsls	r2, r2, #3
     d3a:	08d2      	lsrs	r2, r2, #3
     d3c:	2080      	movs	r0, #128	; 0x80
     d3e:	0580      	lsls	r0, r0, #22
     d40:	4310      	orrs	r0, r2
     d42:	6008      	str	r0, [r1, #0]
		ef->F1.val      = filter->mask;
     d44:	685b      	ldr	r3, [r3, #4]
     d46:	604b      	str	r3, [r1, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
     d48:	684b      	ldr	r3, [r1, #4]
     d4a:	009b      	lsls	r3, r3, #2
     d4c:	089b      	lsrs	r3, r3, #2
     d4e:	2280      	movs	r2, #128	; 0x80
     d50:	0612      	lsls	r2, r2, #24
     d52:	431a      	orrs	r2, r3
     d54:	604a      	str	r2, [r1, #4]
     d56:	e7e4      	b.n	d22 <_can_async_set_filter+0x4a>
			ef->F0.val = 0;
     d58:	600b      	str	r3, [r1, #0]
			return ERR_NONE;
     d5a:	e7e2      	b.n	d22 <_can_async_set_filter+0x4a>
     d5c:	f800ffff 	.word	0xf800ffff
     d60:	c7ffffff 	.word	0xc7ffffff

00000d64 <CAN0_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN0_Handler(void)
{
     d64:	b570      	push	{r4, r5, r6, lr}
	struct _can_async_device *dev = _can0_dev;
     d66:	4b1a      	ldr	r3, [pc, #104]	; (dd0 <CAN0_Handler+0x6c>)
     d68:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
     d6a:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
     d6c:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
     d6e:	07e3      	lsls	r3, r4, #31
     d70:	d414      	bmi.n	d9c <CAN0_Handler+0x38>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
     d72:	05a3      	lsls	r3, r4, #22
     d74:	d416      	bmi.n	da4 <CAN0_Handler+0x40>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
     d76:	01a3      	lsls	r3, r4, #6
     d78:	d418      	bmi.n	dac <CAN0_Handler+0x48>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
     d7a:	01e3      	lsls	r3, r4, #7
     d7c:	d41b      	bmi.n	db6 <CAN0_Handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
     d7e:	0223      	lsls	r3, r4, #8
     d80:	d507      	bpl.n	d92 <CAN0_Handler+0x2e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     d82:	68eb      	ldr	r3, [r5, #12]
     d84:	682a      	ldr	r2, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
     d86:	6c52      	ldr	r2, [r2, #68]	; 0x44
     d88:	0692      	lsls	r2, r2, #26
     d8a:	d519      	bpl.n	dc0 <CAN0_Handler+0x5c>
     d8c:	2102      	movs	r1, #2
     d8e:	0028      	movs	r0, r5
     d90:	4798      	blx	r3
	}

	if (ir & CAN_IR_RF0L) {
     d92:	0723      	lsls	r3, r4, #28
     d94:	d416      	bmi.n	dc4 <CAN0_Handler+0x60>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
     d96:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
     d98:	651c      	str	r4, [r3, #80]	; 0x50
}
     d9a:	bd70      	pop	{r4, r5, r6, pc}
		dev->cb.rx_done(dev);
     d9c:	0028      	movs	r0, r5
     d9e:	68ab      	ldr	r3, [r5, #8]
     da0:	4798      	blx	r3
     da2:	e7e6      	b.n	d72 <CAN0_Handler+0xe>
		dev->cb.tx_done(dev);
     da4:	0028      	movs	r0, r5
     da6:	686b      	ldr	r3, [r5, #4]
     da8:	4798      	blx	r3
     daa:	e7e4      	b.n	d76 <CAN0_Handler+0x12>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
     dac:	2103      	movs	r1, #3
     dae:	0028      	movs	r0, r5
     db0:	68eb      	ldr	r3, [r5, #12]
     db2:	4798      	blx	r3
     db4:	e7e1      	b.n	d7a <CAN0_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
     db6:	2100      	movs	r1, #0
     db8:	0028      	movs	r0, r5
     dba:	68eb      	ldr	r3, [r5, #12]
     dbc:	4798      	blx	r3
     dbe:	e7de      	b.n	d7e <CAN0_Handler+0x1a>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
     dc0:	2101      	movs	r1, #1
     dc2:	e7e4      	b.n	d8e <CAN0_Handler+0x2a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
     dc4:	2104      	movs	r1, #4
     dc6:	0028      	movs	r0, r5
     dc8:	68eb      	ldr	r3, [r5, #12]
     dca:	4798      	blx	r3
     dcc:	e7e3      	b.n	d96 <CAN0_Handler+0x32>
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	20000044 	.word	0x20000044

00000dd4 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     dd4:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
     dd6:	0083      	lsls	r3, r0, #2
     dd8:	181b      	adds	r3, r3, r0
     dda:	0158      	lsls	r0, r3, #5
     ddc:	3002      	adds	r0, #2
     dde:	2103      	movs	r1, #3
     de0:	4b02      	ldr	r3, [pc, #8]	; (dec <_get_cycles_for_ms+0x18>)
     de2:	4798      	blx	r3
     de4:	2364      	movs	r3, #100	; 0x64
     de6:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     de8:	bd10      	pop	{r4, pc}
     dea:	46c0      	nop			; (mov r8, r8)
     dec:	00000e4b 	.word	0x00000e4b

00000df0 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     df0:	3901      	subs	r1, #1
     df2:	d8fd      	bhi.n	df0 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     df4:	4770      	bx	lr
	...

00000df8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     df8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     dfa:	4b09      	ldr	r3, [pc, #36]	; (e20 <_init_chip+0x28>)
     dfc:	685a      	ldr	r2, [r3, #4]
     dfe:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     e00:	4b08      	ldr	r3, [pc, #32]	; (e24 <_init_chip+0x2c>)
     e02:	4798      	blx	r3
	_oscctrl_init_sources();
     e04:	4b08      	ldr	r3, [pc, #32]	; (e28 <_init_chip+0x30>)
     e06:	4798      	blx	r3
	_mclk_init();
     e08:	4b08      	ldr	r3, [pc, #32]	; (e2c <_init_chip+0x34>)
     e0a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     e0c:	2002      	movs	r0, #2
     e0e:	4c08      	ldr	r4, [pc, #32]	; (e30 <_init_chip+0x38>)
     e10:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     e12:	4b08      	ldr	r3, [pc, #32]	; (e34 <_init_chip+0x3c>)
     e14:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     e16:	20fd      	movs	r0, #253	; 0xfd
     e18:	47a0      	blx	r4

	_div_init();
     e1a:	4b07      	ldr	r3, [pc, #28]	; (e38 <_init_chip+0x40>)
     e1c:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     e1e:	bd10      	pop	{r4, pc}
     e20:	41004000 	.word	0x41004000
     e24:	00000ec9 	.word	0x00000ec9
     e28:	00000ee5 	.word	0x00000ee5
     e2c:	00000ebd 	.word	0x00000ebd
     e30:	00000e81 	.word	0x00000e81
     e34:	00000f21 	.word	0x00000f21
     e38:	00000e3d 	.word	0x00000e3d

00000e3c <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     e3c:	2290      	movs	r2, #144	; 0x90
     e3e:	05d2      	lsls	r2, r2, #23
     e40:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     e42:	2102      	movs	r1, #2
     e44:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     e46:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     e48:	4770      	bx	lr

00000e4a <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
     e4a:	b510      	push	{r4, lr}
     e4c:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e4e:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
     e52:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     e54:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     e56:	2390      	movs	r3, #144	; 0x90
     e58:	05db      	lsls	r3, r3, #23
     e5a:	781a      	ldrb	r2, [r3, #0]
     e5c:	2401      	movs	r4, #1
     e5e:	43a2      	bics	r2, r4
     e60:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     e62:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     e64:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     e66:	2390      	movs	r3, #144	; 0x90
     e68:	05db      	lsls	r3, r3, #23
     e6a:	791b      	ldrb	r3, [r3, #4]
     e6c:	07db      	lsls	r3, r3, #31
     e6e:	d4fa      	bmi.n	e66 <__aeabi_uidiv+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
     e70:	2390      	movs	r3, #144	; 0x90
     e72:	05db      	lsls	r3, r3, #23
     e74:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
     e76:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     e78:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     e7c:	b002      	add	sp, #8
     e7e:	bd10      	pop	{r4, pc}

00000e80 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     e80:	07c3      	lsls	r3, r0, #31
     e82:	d507      	bpl.n	e94 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e84:	4a09      	ldr	r2, [pc, #36]	; (eac <_gclk_init_generators_by_fref+0x2c>)
     e86:	4b0a      	ldr	r3, [pc, #40]	; (eb0 <_gclk_init_generators_by_fref+0x30>)
     e88:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e8a:	4b09      	ldr	r3, [pc, #36]	; (eb0 <_gclk_init_generators_by_fref+0x30>)
     e8c:	685a      	ldr	r2, [r3, #4]
     e8e:	4b09      	ldr	r3, [pc, #36]	; (eb4 <_gclk_init_generators_by_fref+0x34>)
     e90:	421a      	tst	r2, r3
     e92:	d1fa      	bne.n	e8a <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     e94:	0783      	lsls	r3, r0, #30
     e96:	d507      	bpl.n	ea8 <_gclk_init_generators_by_fref+0x28>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e98:	4a07      	ldr	r2, [pc, #28]	; (eb8 <_gclk_init_generators_by_fref+0x38>)
     e9a:	4b05      	ldr	r3, [pc, #20]	; (eb0 <_gclk_init_generators_by_fref+0x30>)
     e9c:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e9e:	4b04      	ldr	r3, [pc, #16]	; (eb0 <_gclk_init_generators_by_fref+0x30>)
     ea0:	685a      	ldr	r2, [r3, #4]
     ea2:	4b04      	ldr	r3, [pc, #16]	; (eb4 <_gclk_init_generators_by_fref+0x34>)
     ea4:	421a      	tst	r2, r3
     ea6:	d1fa      	bne.n	e9e <_gclk_init_generators_by_fref+0x1e>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     ea8:	4770      	bx	lr
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	00011107 	.word	0x00011107
     eb0:	40001c00 	.word	0x40001c00
     eb4:	000007fd 	.word	0x000007fd
     eb8:	00011106 	.word	0x00011106

00000ebc <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     ebc:	2201      	movs	r2, #1
     ebe:	4b01      	ldr	r3, [pc, #4]	; (ec4 <_mclk_init+0x8>)
     ec0:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     ec2:	4770      	bx	lr
     ec4:	40000800 	.word	0x40000800

00000ec8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     ec8:	4a05      	ldr	r2, [pc, #20]	; (ee0 <_osc32kctrl_init_sources+0x18>)
     eca:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
     ecc:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     ece:	021b      	lsls	r3, r3, #8
     ed0:	21f8      	movs	r1, #248	; 0xf8
     ed2:	0149      	lsls	r1, r1, #5
     ed4:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     ed6:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     ed8:	2301      	movs	r3, #1
     eda:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     edc:	4770      	bx	lr
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	40001400 	.word	0x40001400

00000ee4 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
     ee4:	4b0d      	ldr	r3, [pc, #52]	; (f1c <_oscctrl_init_sources+0x38>)
     ee6:	2202      	movs	r2, #2
     ee8:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
     eea:	3209      	adds	r2, #9
     eec:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
     eee:	4b0b      	ldr	r3, [pc, #44]	; (f1c <_oscctrl_init_sources+0x38>)
     ef0:	699b      	ldr	r3, [r3, #24]
     ef2:	075b      	lsls	r3, r3, #29
     ef4:	d4fb      	bmi.n	eee <_oscctrl_init_sources+0xa>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
     ef6:	4b09      	ldr	r3, [pc, #36]	; (f1c <_oscctrl_init_sources+0x38>)
     ef8:	699b      	ldr	r3, [r3, #24]
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
     efa:	075b      	lsls	r3, r3, #29
     efc:	d4fb      	bmi.n	ef6 <_oscctrl_init_sources+0x12>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
     efe:	2207      	movs	r2, #7
     f00:	4b06      	ldr	r3, [pc, #24]	; (f1c <_oscctrl_init_sources+0x38>)
     f02:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
     f04:	4b05      	ldr	r3, [pc, #20]	; (f1c <_oscctrl_init_sources+0x38>)
     f06:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
     f08:	06db      	lsls	r3, r3, #27
     f0a:	d5fb      	bpl.n	f04 <_oscctrl_init_sources+0x20>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
     f0c:	4a03      	ldr	r2, [pc, #12]	; (f1c <_oscctrl_init_sources+0x38>)
     f0e:	7d13      	ldrb	r3, [r2, #20]
     f10:	2180      	movs	r1, #128	; 0x80
     f12:	4249      	negs	r1, r1
     f14:	430b      	orrs	r3, r1
     f16:	b2db      	uxtb	r3, r3
     f18:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     f1a:	4770      	bx	lr
     f1c:	40001000 	.word	0x40001000

00000f20 <_oscctrl_init_referenced_generators>:
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     f20:	2141      	movs	r1, #65	; 0x41
     f22:	2380      	movs	r3, #128	; 0x80
     f24:	4a1a      	ldr	r2, [pc, #104]	; (f90 <_oscctrl_init_referenced_generators+0x70>)
     f26:	50d1      	str	r1, [r2, r3]
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLRATIO.reg = data;
     f28:	223f      	movs	r2, #63	; 0x3f
     f2a:	4b1a      	ldr	r3, [pc, #104]	; (f94 <_oscctrl_init_referenced_generators+0x74>)
     f2c:	621a      	str	r2, [r3, #32]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f2e:	232c      	movs	r3, #44	; 0x2c
     f30:	4a18      	ldr	r2, [pc, #96]	; (f94 <_oscctrl_init_referenced_generators+0x74>)
     f32:	5cd2      	ldrb	r2, [r2, r3]
     f34:	3b1e      	subs	r3, #30
     f36:	421a      	tst	r2, r3
     f38:	d1f9      	bne.n	f2e <_oscctrl_init_referenced_generators+0xe>
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLCTRLB.reg = data;
     f3a:	4b16      	ldr	r3, [pc, #88]	; (f94 <_oscctrl_init_referenced_generators+0x74>)
     f3c:	2220      	movs	r2, #32
     f3e:	625a      	str	r2, [r3, #36]	; 0x24
}

static inline void hri_oscctrl_write_DPLLPRESC_reg(const void *const hw, hri_oscctrl_dpllpresc_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DPLLPRESC.reg = data;
     f40:	2100      	movs	r1, #0
     f42:	3208      	adds	r2, #8
     f44:	5499      	strb	r1, [r3, r2]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f46:	232c      	movs	r3, #44	; 0x2c
     f48:	4a12      	ldr	r2, [pc, #72]	; (f94 <_oscctrl_init_referenced_generators+0x74>)
     f4a:	5cd2      	ldrb	r2, [r2, r3]
     f4c:	3b1e      	subs	r3, #30
     f4e:	421a      	tst	r2, r3
     f50:	d1f9      	bne.n	f46 <_oscctrl_init_referenced_generators+0x26>
	((Oscctrl *)hw)->DPLLCTRLA.reg = data;
     f52:	2202      	movs	r2, #2
     f54:	4b0f      	ldr	r3, [pc, #60]	; (f94 <_oscctrl_init_referenced_generators+0x74>)
     f56:	771a      	strb	r2, [r3, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f58:	232c      	movs	r3, #44	; 0x2c
     f5a:	4a0e      	ldr	r2, [pc, #56]	; (f94 <_oscctrl_init_referenced_generators+0x74>)
     f5c:	5cd3      	ldrb	r3, [r2, r3]
     f5e:	079b      	lsls	r3, r3, #30
     f60:	d4fa      	bmi.n	f58 <_oscctrl_init_referenced_generators+0x38>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK) >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
     f62:	2330      	movs	r3, #48	; 0x30
     f64:	4a0b      	ldr	r2, [pc, #44]	; (f94 <_oscctrl_init_referenced_generators+0x74>)
     f66:	5cd3      	ldrb	r3, [r2, r3]
	                                    | (CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw)))
     f68:	07db      	lsls	r3, r3, #31
     f6a:	d403      	bmi.n	f74 <_oscctrl_init_referenced_generators+0x54>
	return (((Oscctrl *)hw)->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
     f6c:	2330      	movs	r3, #48	; 0x30
     f6e:	5cd3      	ldrb	r3, [r2, r3]
     f70:	079b      	lsls	r3, r3, #30
     f72:	d5f6      	bpl.n	f62 <_oscctrl_init_referenced_generators+0x42>
	((Oscctrl *)hw)->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ONDEMAND;
     f74:	4a07      	ldr	r2, [pc, #28]	; (f94 <_oscctrl_init_referenced_generators+0x74>)
     f76:	7f13      	ldrb	r3, [r2, #28]
     f78:	2180      	movs	r1, #128	; 0x80
     f7a:	4249      	negs	r1, r1
     f7c:	430b      	orrs	r3, r1
     f7e:	b2db      	uxtb	r3, r3
     f80:	7713      	strb	r3, [r2, #28]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f82:	232c      	movs	r3, #44	; 0x2c
     f84:	4a03      	ldr	r2, [pc, #12]	; (f94 <_oscctrl_init_referenced_generators+0x74>)
     f86:	5cd2      	ldrb	r2, [r2, r3]
     f88:	3b1e      	subs	r3, #30
     f8a:	421a      	tst	r2, r3
     f8c:	d1f9      	bne.n	f82 <_oscctrl_init_referenced_generators+0x62>
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     f8e:	4770      	bx	lr
     f90:	40001c00 	.word	0x40001c00
     f94:	40001000 	.word	0x40001000

00000f98 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     f98:	4b02      	ldr	r3, [pc, #8]	; (fa4 <_sercom_get_hardware_index+0xc>)
     f9a:	469c      	mov	ip, r3
     f9c:	4460      	add	r0, ip
     f9e:	0a80      	lsrs	r0, r0, #10
     fa0:	b2c0      	uxtb	r0, r0
}
     fa2:	4770      	bx	lr
     fa4:	bdfffc00 	.word	0xbdfffc00

00000fa8 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
     fa8:	b510      	push	{r4, lr}
	void *hw = device->hw;
     faa:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     fac:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     fae:	07db      	lsls	r3, r3, #31
     fb0:	d502      	bpl.n	fb8 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     fb2:	7da3      	ldrb	r3, [r4, #22]
     fb4:	07db      	lsls	r3, r3, #31
     fb6:	d40f      	bmi.n	fd8 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     fb8:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     fba:	079b      	lsls	r3, r3, #30
     fbc:	d502      	bpl.n	fc4 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     fbe:	7da3      	ldrb	r3, [r4, #22]
     fc0:	079b      	lsls	r3, r3, #30
     fc2:	d40e      	bmi.n	fe2 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     fc4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     fc6:	075b      	lsls	r3, r3, #29
     fc8:	d515      	bpl.n	ff6 <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     fca:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     fcc:	2337      	movs	r3, #55	; 0x37
     fce:	421a      	tst	r2, r3
     fd0:	d00c      	beq.n	fec <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     fd2:	3348      	adds	r3, #72	; 0x48
     fd4:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
     fd6:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     fd8:	2301      	movs	r3, #1
     fda:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     fdc:	6803      	ldr	r3, [r0, #0]
     fde:	4798      	blx	r3
     fe0:	e7f9      	b.n	fd6 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     fe2:	2302      	movs	r3, #2
     fe4:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     fe6:	6883      	ldr	r3, [r0, #8]
     fe8:	4798      	blx	r3
     fea:	e7f4      	b.n	fd6 <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     fec:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
     fee:	8d21      	ldrh	r1, [r4, #40]	; 0x28
     ff0:	b2c9      	uxtb	r1, r1
     ff2:	4798      	blx	r3
     ff4:	e7ef      	b.n	fd6 <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     ff6:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
     ff8:	09db      	lsrs	r3, r3, #7
     ffa:	d0ec      	beq.n	fd6 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     ffc:	2380      	movs	r3, #128	; 0x80
     ffe:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1000:	68c3      	ldr	r3, [r0, #12]
    1002:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1004:	8b63      	ldrh	r3, [r4, #26]
    1006:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1008:	8363      	strh	r3, [r4, #26]
    100a:	e7e4      	b.n	fd6 <_sercom_usart_interrupt_handler+0x2e>

0000100c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    100c:	4b03      	ldr	r3, [pc, #12]	; (101c <_sercom_init_irq_param+0x10>)
    100e:	4298      	cmp	r0, r3
    1010:	d000      	beq.n	1014 <_sercom_init_irq_param+0x8>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
    1012:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    1014:	4b02      	ldr	r3, [pc, #8]	; (1020 <_sercom_init_irq_param+0x14>)
    1016:	6019      	str	r1, [r3, #0]
}
    1018:	e7fb      	b.n	1012 <_sercom_init_irq_param+0x6>
    101a:	46c0      	nop			; (mov r8, r8)
    101c:	42001000 	.word	0x42001000
    1020:	20000070 	.word	0x20000070

00001024 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1024:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1026:	4b02      	ldr	r3, [pc, #8]	; (1030 <_sercom_get_irq_num+0xc>)
    1028:	4798      	blx	r3
    102a:	3009      	adds	r0, #9
    102c:	b2c0      	uxtb	r0, r0
}
    102e:	bd10      	pop	{r4, pc}
    1030:	00000f99 	.word	0x00000f99

00001034 <_get_sercom_index>:
{
    1034:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1036:	4b0b      	ldr	r3, [pc, #44]	; (1064 <_get_sercom_index+0x30>)
    1038:	4798      	blx	r3
    103a:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    103c:	2000      	movs	r0, #0
    103e:	2800      	cmp	r0, #0
    1040:	d006      	beq.n	1050 <_get_sercom_index+0x1c>
	ASSERT(false);
    1042:	4a09      	ldr	r2, [pc, #36]	; (1068 <_get_sercom_index+0x34>)
    1044:	4909      	ldr	r1, [pc, #36]	; (106c <_get_sercom_index+0x38>)
    1046:	2000      	movs	r0, #0
    1048:	4b09      	ldr	r3, [pc, #36]	; (1070 <_get_sercom_index+0x3c>)
    104a:	4798      	blx	r3
	return 0;
    104c:	2000      	movs	r0, #0
}
    104e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1050:	0083      	lsls	r3, r0, #2
    1052:	181b      	adds	r3, r3, r0
    1054:	0099      	lsls	r1, r3, #2
    1056:	4b07      	ldr	r3, [pc, #28]	; (1074 <_get_sercom_index+0x40>)
    1058:	5ccb      	ldrb	r3, [r1, r3]
    105a:	429a      	cmp	r2, r3
    105c:	d0f7      	beq.n	104e <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    105e:	3001      	adds	r0, #1
    1060:	b2c0      	uxtb	r0, r0
    1062:	e7ec      	b.n	103e <_get_sercom_index+0xa>
    1064:	00000f99 	.word	0x00000f99
    1068:	0000025e 	.word	0x0000025e
    106c:	00002554 	.word	0x00002554
    1070:	0000083d 	.word	0x0000083d
    1074:	00002504 	.word	0x00002504

00001078 <_usart_init>:
{
    1078:	b570      	push	{r4, r5, r6, lr}
    107a:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    107c:	4b38      	ldr	r3, [pc, #224]	; (1160 <_usart_init+0xe8>)
    107e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1080:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1082:	07db      	lsls	r3, r3, #31
    1084:	d41d      	bmi.n	10c2 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1086:	0083      	lsls	r3, r0, #2
    1088:	181b      	adds	r3, r3, r0
    108a:	009a      	lsls	r2, r3, #2
    108c:	4b35      	ldr	r3, [pc, #212]	; (1164 <_usart_init+0xec>)
    108e:	189b      	adds	r3, r3, r2
    1090:	685a      	ldr	r2, [r3, #4]
    1092:	231c      	movs	r3, #28
    1094:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1096:	69e3      	ldr	r3, [r4, #28]
    1098:	079b      	lsls	r3, r3, #30
    109a:	d1fc      	bne.n	1096 <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    109c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    109e:	079b      	lsls	r3, r3, #30
    10a0:	d509      	bpl.n	10b6 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    10a2:	6823      	ldr	r3, [r4, #0]
    10a4:	2102      	movs	r1, #2
    10a6:	438b      	bics	r3, r1
    10a8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10aa:	69e3      	ldr	r3, [r4, #28]
    10ac:	079b      	lsls	r3, r3, #30
    10ae:	d1fc      	bne.n	10aa <_usart_init+0x32>
    10b0:	69e3      	ldr	r3, [r4, #28]
    10b2:	079b      	lsls	r3, r3, #30
    10b4:	d4fc      	bmi.n	10b0 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    10b6:	2301      	movs	r3, #1
    10b8:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10ba:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10bc:	69e3      	ldr	r3, [r4, #28]
    10be:	079b      	lsls	r3, r3, #30
    10c0:	d1fc      	bne.n	10bc <_usart_init+0x44>
    10c2:	69e3      	ldr	r3, [r4, #28]
    10c4:	07db      	lsls	r3, r3, #31
    10c6:	d4fc      	bmi.n	10c2 <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    10c8:	0083      	lsls	r3, r0, #2
    10ca:	181b      	adds	r3, r3, r0
    10cc:	009a      	lsls	r2, r3, #2
    10ce:	4b25      	ldr	r3, [pc, #148]	; (1164 <_usart_init+0xec>)
    10d0:	189b      	adds	r3, r3, r2
    10d2:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10d4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10d6:	69e3      	ldr	r3, [r4, #28]
    10d8:	079b      	lsls	r3, r3, #30
    10da:	d1fc      	bne.n	10d6 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    10dc:	0083      	lsls	r3, r0, #2
    10de:	181b      	adds	r3, r3, r0
    10e0:	009a      	lsls	r2, r3, #2
    10e2:	4b20      	ldr	r3, [pc, #128]	; (1164 <_usart_init+0xec>)
    10e4:	189b      	adds	r3, r3, r2
    10e6:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    10e8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10ea:	69e3      	ldr	r3, [r4, #28]
    10ec:	075b      	lsls	r3, r3, #29
    10ee:	d1fc      	bne.n	10ea <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    10f0:	0083      	lsls	r3, r0, #2
    10f2:	181b      	adds	r3, r3, r0
    10f4:	009a      	lsls	r2, r3, #2
    10f6:	4b1b      	ldr	r3, [pc, #108]	; (1164 <_usart_init+0xec>)
    10f8:	189b      	adds	r3, r3, r2
    10fa:	685b      	ldr	r3, [r3, #4]
    10fc:	049a      	lsls	r2, r3, #18
    10fe:	d40b      	bmi.n	1118 <_usart_init+0xa0>
    1100:	22c0      	movs	r2, #192	; 0xc0
    1102:	01d2      	lsls	r2, r2, #7
    1104:	4213      	tst	r3, r2
    1106:	d107      	bne.n	1118 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1108:	0083      	lsls	r3, r0, #2
    110a:	181b      	adds	r3, r3, r0
    110c:	009a      	lsls	r2, r3, #2
    110e:	4b15      	ldr	r3, [pc, #84]	; (1164 <_usart_init+0xec>)
    1110:	189b      	adds	r3, r3, r2
    1112:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    1114:	81a3      	strh	r3, [r4, #12]
    1116:	e015      	b.n	1144 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1118:	0083      	lsls	r3, r0, #2
    111a:	181b      	adds	r3, r3, r0
    111c:	009a      	lsls	r2, r3, #2
    111e:	4911      	ldr	r1, [pc, #68]	; (1164 <_usart_init+0xec>)
    1120:	1889      	adds	r1, r1, r2
    1122:	898a      	ldrh	r2, [r1, #12]
    1124:	89a3      	ldrh	r3, [r4, #12]
    1126:	04d2      	lsls	r2, r2, #19
    1128:	0cd2      	lsrs	r2, r2, #19
    112a:	0b5b      	lsrs	r3, r3, #13
    112c:	035b      	lsls	r3, r3, #13
    112e:	4313      	orrs	r3, r2
    1130:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1132:	7b8b      	ldrb	r3, [r1, #14]
    1134:	2207      	movs	r2, #7
    1136:	401a      	ands	r2, r3
    1138:	89a3      	ldrh	r3, [r4, #12]
    113a:	0352      	lsls	r2, r2, #13
    113c:	04db      	lsls	r3, r3, #19
    113e:	0cdb      	lsrs	r3, r3, #19
    1140:	4313      	orrs	r3, r2
    1142:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1144:	4a07      	ldr	r2, [pc, #28]	; (1164 <_usart_init+0xec>)
    1146:	0083      	lsls	r3, r0, #2
    1148:	181d      	adds	r5, r3, r0
    114a:	00a9      	lsls	r1, r5, #2
    114c:	000d      	movs	r5, r1
    114e:	1851      	adds	r1, r2, r1
    1150:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1152:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1154:	1952      	adds	r2, r2, r5
    1156:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1158:	2330      	movs	r3, #48	; 0x30
    115a:	54e2      	strb	r2, [r4, r3]
}
    115c:	2000      	movs	r0, #0
    115e:	bd70      	pop	{r4, r5, r6, pc}
    1160:	00001035 	.word	0x00001035
    1164:	00002504 	.word	0x00002504

00001168 <_usart_async_init>:
{
    1168:	b570      	push	{r4, r5, r6, lr}
    116a:	0006      	movs	r6, r0
    116c:	000c      	movs	r4, r1
	ASSERT(device);
    116e:	1e43      	subs	r3, r0, #1
    1170:	4198      	sbcs	r0, r3
    1172:	b2c0      	uxtb	r0, r0
    1174:	22c4      	movs	r2, #196	; 0xc4
    1176:	4919      	ldr	r1, [pc, #100]	; (11dc <_usart_async_init+0x74>)
    1178:	4b19      	ldr	r3, [pc, #100]	; (11e0 <_usart_async_init+0x78>)
    117a:	4798      	blx	r3
	init_status = _usart_init(hw);
    117c:	0020      	movs	r0, r4
    117e:	4b19      	ldr	r3, [pc, #100]	; (11e4 <_usart_async_init+0x7c>)
    1180:	4798      	blx	r3
    1182:	1e05      	subs	r5, r0, #0
	if (init_status) {
    1184:	d001      	beq.n	118a <_usart_async_init+0x22>
}
    1186:	0028      	movs	r0, r5
    1188:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    118a:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    118c:	0031      	movs	r1, r6
    118e:	0020      	movs	r0, r4
    1190:	4b15      	ldr	r3, [pc, #84]	; (11e8 <_usart_async_init+0x80>)
    1192:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    1194:	0020      	movs	r0, r4
    1196:	4b15      	ldr	r3, [pc, #84]	; (11ec <_usart_async_init+0x84>)
    1198:	4798      	blx	r3
    119a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    119c:	2b00      	cmp	r3, #0
    119e:	db0a      	blt.n	11b6 <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11a0:	211f      	movs	r1, #31
    11a2:	4001      	ands	r1, r0
    11a4:	2201      	movs	r2, #1
    11a6:	408a      	lsls	r2, r1
    11a8:	2180      	movs	r1, #128	; 0x80
    11aa:	4c11      	ldr	r4, [pc, #68]	; (11f0 <_usart_async_init+0x88>)
    11ac:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    11ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    11b2:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    11b6:	2b00      	cmp	r3, #0
    11b8:	db07      	blt.n	11ca <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11ba:	211f      	movs	r1, #31
    11bc:	4001      	ands	r1, r0
    11be:	2201      	movs	r2, #1
    11c0:	408a      	lsls	r2, r1
    11c2:	21c0      	movs	r1, #192	; 0xc0
    11c4:	0049      	lsls	r1, r1, #1
    11c6:	4c0a      	ldr	r4, [pc, #40]	; (11f0 <_usart_async_init+0x88>)
    11c8:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    11ca:	2b00      	cmp	r3, #0
    11cc:	dbdb      	blt.n	1186 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11ce:	231f      	movs	r3, #31
    11d0:	4018      	ands	r0, r3
    11d2:	3b1e      	subs	r3, #30
    11d4:	4083      	lsls	r3, r0
    11d6:	4a06      	ldr	r2, [pc, #24]	; (11f0 <_usart_async_init+0x88>)
    11d8:	6013      	str	r3, [r2, #0]
    11da:	e7d4      	b.n	1186 <_usart_async_init+0x1e>
    11dc:	00002554 	.word	0x00002554
    11e0:	0000083d 	.word	0x0000083d
    11e4:	00001079 	.word	0x00001079
    11e8:	0000100d 	.word	0x0000100d
    11ec:	00001025 	.word	0x00001025
    11f0:	e000e100 	.word	0xe000e100

000011f4 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    11f4:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    11f6:	6813      	ldr	r3, [r2, #0]
    11f8:	2102      	movs	r1, #2
    11fa:	430b      	orrs	r3, r1
    11fc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11fe:	69d3      	ldr	r3, [r2, #28]
    1200:	079b      	lsls	r3, r3, #30
    1202:	d1fc      	bne.n	11fe <_usart_async_enable+0xa>
}
    1204:	4770      	bx	lr

00001206 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1206:	6983      	ldr	r3, [r0, #24]
    1208:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    120a:	8519      	strh	r1, [r3, #40]	; 0x28
}
    120c:	4770      	bx	lr

0000120e <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    120e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1210:	2201      	movs	r2, #1
    1212:	759a      	strb	r2, [r3, #22]
}
    1214:	4770      	bx	lr

00001216 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1216:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1218:	2202      	movs	r2, #2
    121a:	759a      	strb	r2, [r3, #22]
}
    121c:	4770      	bx	lr
	...

00001220 <_usart_async_set_irq_state>:
{
    1220:	b570      	push	{r4, r5, r6, lr}
    1222:	0004      	movs	r4, r0
    1224:	000d      	movs	r5, r1
    1226:	0016      	movs	r6, r2
	ASSERT(device);
    1228:	1e43      	subs	r3, r0, #1
    122a:	4198      	sbcs	r0, r3
    122c:	b2c0      	uxtb	r0, r0
    122e:	4a17      	ldr	r2, [pc, #92]	; (128c <_usart_async_set_irq_state+0x6c>)
    1230:	4917      	ldr	r1, [pc, #92]	; (1290 <_usart_async_set_irq_state+0x70>)
    1232:	4b18      	ldr	r3, [pc, #96]	; (1294 <_usart_async_set_irq_state+0x74>)
    1234:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1236:	2d00      	cmp	r5, #0
    1238:	d00b      	beq.n	1252 <_usart_async_set_irq_state+0x32>
    123a:	2d02      	cmp	r5, #2
    123c:	d009      	beq.n	1252 <_usart_async_set_irq_state+0x32>
	} else if (USART_ASYNC_RX_DONE == type) {
    123e:	2d01      	cmp	r5, #1
    1240:	d018      	beq.n	1274 <_usart_async_set_irq_state+0x54>
	} else if (USART_ASYNC_ERROR == type) {
    1242:	2d03      	cmp	r5, #3
    1244:	d10f      	bne.n	1266 <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1246:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1248:	2e00      	cmp	r6, #0
    124a:	d01c      	beq.n	1286 <_usart_async_set_irq_state+0x66>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    124c:	2280      	movs	r2, #128	; 0x80
    124e:	759a      	strb	r2, [r3, #22]
}
    1250:	e009      	b.n	1266 <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1252:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1254:	2e00      	cmp	r6, #0
    1256:	d107      	bne.n	1268 <_usart_async_set_irq_state+0x48>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1258:	2201      	movs	r2, #1
    125a:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    125c:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    125e:	2e00      	cmp	r6, #0
    1260:	d105      	bne.n	126e <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1262:	2202      	movs	r2, #2
    1264:	751a      	strb	r2, [r3, #20]
}
    1266:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1268:	2201      	movs	r2, #1
    126a:	759a      	strb	r2, [r3, #22]
    126c:	e7f6      	b.n	125c <_usart_async_set_irq_state+0x3c>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    126e:	2202      	movs	r2, #2
    1270:	759a      	strb	r2, [r3, #22]
    1272:	e7f8      	b.n	1266 <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1274:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1276:	2e00      	cmp	r6, #0
    1278:	d102      	bne.n	1280 <_usart_async_set_irq_state+0x60>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    127a:	2204      	movs	r2, #4
    127c:	751a      	strb	r2, [r3, #20]
    127e:	e7f2      	b.n	1266 <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1280:	2204      	movs	r2, #4
    1282:	759a      	strb	r2, [r3, #22]
    1284:	e7ef      	b.n	1266 <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1286:	2280      	movs	r2, #128	; 0x80
    1288:	751a      	strb	r2, [r3, #20]
    128a:	e7ec      	b.n	1266 <_usart_async_set_irq_state+0x46>
    128c:	0000021e 	.word	0x0000021e
    1290:	00002554 	.word	0x00002554
    1294:	0000083d 	.word	0x0000083d

00001298 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    1298:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    129a:	4b02      	ldr	r3, [pc, #8]	; (12a4 <SERCOM3_Handler+0xc>)
    129c:	6818      	ldr	r0, [r3, #0]
    129e:	4b02      	ldr	r3, [pc, #8]	; (12a8 <SERCOM3_Handler+0x10>)
    12a0:	4798      	blx	r3
}
    12a2:	bd10      	pop	{r4, pc}
    12a4:	20000070 	.word	0x20000070
    12a8:	00000fa9 	.word	0x00000fa9

000012ac <tx_cb_USART_0X>:
}
struct io_descriptor *iox;
static void tx_cb_USART_0X(const struct usart_async_descriptor *const io_descr)
{
	/* Transfer completed */
}
    12ac:	4770      	bx	lr
	...

000012b0 <rx_cb_USART_0X>:
static void rx_cb_USART_0X(const struct usart_async_descriptor *const io_descr)
{
	modReceiveFlag = 1;/* Transfer completed */
    12b0:	2201      	movs	r2, #1
    12b2:	4b01      	ldr	r3, [pc, #4]	; (12b8 <rx_cb_USART_0X+0x8>)
    12b4:	701a      	strb	r2, [r3, #0]
}
    12b6:	4770      	bx	lr
    12b8:	20000074 	.word	0x20000074

000012bc <err_cb_USART_0X>:

static void err_cb_USART_0X(const struct usart_async_descriptor *const io_descr)
{
	/* Transfer completed */
}
    12bc:	4770      	bx	lr
	...

000012c0 <CAN_0_rx_callback1>:
{
    12c0:	b530      	push	{r4, r5, lr}
    12c2:	b095      	sub	sp, #84	; 0x54
    12c4:	0005      	movs	r5, r0
	uint8_t data[64] = {0};
    12c6:	2240      	movs	r2, #64	; 0x40
    12c8:	2100      	movs	r1, #0
    12ca:	4668      	mov	r0, sp
    12cc:	4c1d      	ldr	r4, [pc, #116]	; (1344 <CAN_0_rx_callback1+0x84>)
    12ce:	47a0      	blx	r4
	memset(&msg,0,sizeof(msg));
    12d0:	2210      	movs	r2, #16
    12d2:	2100      	movs	r1, #0
    12d4:	a810      	add	r0, sp, #64	; 0x40
    12d6:	47a0      	blx	r4
	msg.data = data;
    12d8:	466b      	mov	r3, sp
    12da:	9312      	str	r3, [sp, #72]	; 0x48
	can_async_read(descr, &msg);
    12dc:	a910      	add	r1, sp, #64	; 0x40
    12de:	0028      	movs	r0, r5
    12e0:	4b19      	ldr	r3, [pc, #100]	; (1348 <CAN_0_rx_callback1+0x88>)
    12e2:	4798      	blx	r3
	if(msg.id==0x71){
    12e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    12e6:	2b71      	cmp	r3, #113	; 0x71
    12e8:	d00b      	beq.n	1302 <CAN_0_rx_callback1+0x42>
	}else if(msg.id==0x62C){
    12ea:	4a18      	ldr	r2, [pc, #96]	; (134c <CAN_0_rx_callback1+0x8c>)
    12ec:	4293      	cmp	r3, r2
    12ee:	d013      	beq.n	1318 <CAN_0_rx_callback1+0x58>
	}else if(msg.id==0x45E){
    12f0:	4a17      	ldr	r2, [pc, #92]	; (1350 <CAN_0_rx_callback1+0x90>)
    12f2:	4293      	cmp	r3, r2
    12f4:	d01b      	beq.n	132e <CAN_0_rx_callback1+0x6e>
		cnt[3]++;
    12f6:	4a17      	ldr	r2, [pc, #92]	; (1354 <CAN_0_rx_callback1+0x94>)
    12f8:	68d3      	ldr	r3, [r2, #12]
    12fa:	3301      	adds	r3, #1
    12fc:	60d3      	str	r3, [r2, #12]
}
    12fe:	b015      	add	sp, #84	; 0x54
    1300:	bd30      	pop	{r4, r5, pc}
		memcpy(arr1,msg.data,msg.len);
    1302:	ab10      	add	r3, sp, #64	; 0x40
    1304:	9912      	ldr	r1, [sp, #72]	; 0x48
    1306:	7b1a      	ldrb	r2, [r3, #12]
    1308:	4813      	ldr	r0, [pc, #76]	; (1358 <CAN_0_rx_callback1+0x98>)
    130a:	4b14      	ldr	r3, [pc, #80]	; (135c <CAN_0_rx_callback1+0x9c>)
    130c:	4798      	blx	r3
		cnt[0]++;
    130e:	4a11      	ldr	r2, [pc, #68]	; (1354 <CAN_0_rx_callback1+0x94>)
    1310:	6813      	ldr	r3, [r2, #0]
    1312:	3301      	adds	r3, #1
    1314:	6013      	str	r3, [r2, #0]
    1316:	e7f2      	b.n	12fe <CAN_0_rx_callback1+0x3e>
		memcpy(arr2,msg.data,msg.len);
    1318:	ab10      	add	r3, sp, #64	; 0x40
    131a:	9912      	ldr	r1, [sp, #72]	; 0x48
    131c:	7b1a      	ldrb	r2, [r3, #12]
    131e:	4810      	ldr	r0, [pc, #64]	; (1360 <CAN_0_rx_callback1+0xa0>)
    1320:	4b0e      	ldr	r3, [pc, #56]	; (135c <CAN_0_rx_callback1+0x9c>)
    1322:	4798      	blx	r3
		cnt[1]++;
    1324:	4a0b      	ldr	r2, [pc, #44]	; (1354 <CAN_0_rx_callback1+0x94>)
    1326:	6853      	ldr	r3, [r2, #4]
    1328:	3301      	adds	r3, #1
    132a:	6053      	str	r3, [r2, #4]
    132c:	e7e7      	b.n	12fe <CAN_0_rx_callback1+0x3e>
	memcpy(arr3,msg.data,msg.len);
    132e:	ab10      	add	r3, sp, #64	; 0x40
    1330:	9912      	ldr	r1, [sp, #72]	; 0x48
    1332:	7b1a      	ldrb	r2, [r3, #12]
    1334:	480b      	ldr	r0, [pc, #44]	; (1364 <CAN_0_rx_callback1+0xa4>)
    1336:	4b09      	ldr	r3, [pc, #36]	; (135c <CAN_0_rx_callback1+0x9c>)
    1338:	4798      	blx	r3
		cnt[2]++;
    133a:	4a06      	ldr	r2, [pc, #24]	; (1354 <CAN_0_rx_callback1+0x94>)
    133c:	6893      	ldr	r3, [r2, #8]
    133e:	3301      	adds	r3, #1
    1340:	6093      	str	r3, [r2, #8]
    1342:	e7dc      	b.n	12fe <CAN_0_rx_callback1+0x3e>
    1344:	00002471 	.word	0x00002471
    1348:	0000038d 	.word	0x0000038d
    134c:	0000062c 	.word	0x0000062c
    1350:	0000045e 	.word	0x0000045e
    1354:	20000170 	.word	0x20000170
    1358:	20000194 	.word	0x20000194
    135c:	0000245f 	.word	0x0000245f
    1360:	200001b0 	.word	0x200001b0
    1364:	200001a0 	.word	0x200001a0

00001368 <dataDecode>:
void dataDecode(void){
    1368:	b5f0      	push	{r4, r5, r6, r7, lr}
    136a:	46de      	mov	lr, fp
    136c:	4657      	mov	r7, sl
    136e:	464e      	mov	r6, r9
    1370:	4645      	mov	r5, r8
    1372:	b5e0      	push	{r5, r6, r7, lr}
    1374:	b083      	sub	sp, #12
	int DCDC_clock = (arr3[4] & 0xF0) >> 4;
    1376:	4b25      	ldr	r3, [pc, #148]	; (140c <dataDecode+0xa4>)
    1378:	7918      	ldrb	r0, [r3, #4]
    137a:	0900      	lsrs	r0, r0, #4
	int ava_current = arr3[0];
    137c:	781b      	ldrb	r3, [r3, #0]
    137e:	9301      	str	r3, [sp, #4]
	int water_temp = ((arr2[0] & 0x1F) << 3) | ((arr2[1] & 0xE0) >> 5 );
    1380:	4923      	ldr	r1, [pc, #140]	; (1410 <dataDecode+0xa8>)
    1382:	780b      	ldrb	r3, [r1, #0]
    1384:	00db      	lsls	r3, r3, #3
    1386:	22ff      	movs	r2, #255	; 0xff
    1388:	401a      	ands	r2, r3
    138a:	784b      	ldrb	r3, [r1, #1]
    138c:	095b      	lsrs	r3, r3, #5
    138e:	431a      	orrs	r2, r3
    1390:	4693      	mov	fp, r2
	int power = (arr1[3] & 0x7E) >> 1;
    1392:	4a20      	ldr	r2, [pc, #128]	; (1414 <dataDecode+0xac>)
    1394:	78d3      	ldrb	r3, [r2, #3]
    1396:	1059      	asrs	r1, r3, #1
    1398:	263f      	movs	r6, #63	; 0x3f
    139a:	400e      	ands	r6, r1
    139c:	46b0      	mov	r8, r6
	int voltage = ((arr1[1] & 0x0F) << 9 ) | (arr1[2] << 1 ) | (arr1[3] & 0x80) >> 7;
    139e:	7857      	ldrb	r7, [r2, #1]
    13a0:	027f      	lsls	r7, r7, #9
    13a2:	21f0      	movs	r1, #240	; 0xf0
    13a4:	0149      	lsls	r1, r1, #5
    13a6:	400f      	ands	r7, r1
    13a8:	7892      	ldrb	r2, [r2, #2]
    13aa:	0052      	lsls	r2, r2, #1
    13ac:	4317      	orrs	r7, r2
    13ae:	09db      	lsrs	r3, r3, #7
    13b0:	431f      	orrs	r7, r3
	paramList.DCDC_clock =  (DCDC_clock * 1);
    13b2:	4c19      	ldr	r4, [pc, #100]	; (1418 <dataDecode+0xb0>)
    13b4:	4d19      	ldr	r5, [pc, #100]	; (141c <dataDecode+0xb4>)
    13b6:	47a8      	blx	r5
    13b8:	6020      	str	r0, [r4, #0]
	paramList.voltage = (float) ((voltage * 0.1) + 0);
    13ba:	4a19      	ldr	r2, [pc, #100]	; (1420 <dataDecode+0xb8>)
    13bc:	4692      	mov	sl, r2
    13be:	0038      	movs	r0, r7
    13c0:	4790      	blx	r2
    13c2:	4a18      	ldr	r2, [pc, #96]	; (1424 <dataDecode+0xbc>)
    13c4:	4691      	mov	r9, r2
    13c6:	4a18      	ldr	r2, [pc, #96]	; (1428 <dataDecode+0xc0>)
    13c8:	4b18      	ldr	r3, [pc, #96]	; (142c <dataDecode+0xc4>)
    13ca:	47c8      	blx	r9
    13cc:	4e18      	ldr	r6, [pc, #96]	; (1430 <dataDecode+0xc8>)
    13ce:	2200      	movs	r2, #0
    13d0:	2300      	movs	r3, #0
    13d2:	47b0      	blx	r6
    13d4:	4f17      	ldr	r7, [pc, #92]	; (1434 <dataDecode+0xcc>)
    13d6:	47b8      	blx	r7
    13d8:	6060      	str	r0, [r4, #4]
	paramList.power = (float) ((power * 0.1) + 0);
    13da:	4640      	mov	r0, r8
    13dc:	47d0      	blx	sl
    13de:	4a12      	ldr	r2, [pc, #72]	; (1428 <dataDecode+0xc0>)
    13e0:	4b12      	ldr	r3, [pc, #72]	; (142c <dataDecode+0xc4>)
    13e2:	47c8      	blx	r9
    13e4:	2200      	movs	r2, #0
    13e6:	2300      	movs	r3, #0
    13e8:	47b0      	blx	r6
    13ea:	47b8      	blx	r7
    13ec:	60a0      	str	r0, [r4, #8]
	paramList.water_temp = (float) ((water_temp * 1) - 40);
    13ee:	465b      	mov	r3, fp
    13f0:	3b28      	subs	r3, #40	; 0x28
    13f2:	0018      	movs	r0, r3
    13f4:	47a8      	blx	r5
    13f6:	60e0      	str	r0, [r4, #12]
	paramList.ava_current = (float) ((ava_current * 1) + 0);
    13f8:	9801      	ldr	r0, [sp, #4]
    13fa:	47a8      	blx	r5
    13fc:	6120      	str	r0, [r4, #16]
}
    13fe:	b003      	add	sp, #12
    1400:	bc3c      	pop	{r2, r3, r4, r5}
    1402:	4690      	mov	r8, r2
    1404:	4699      	mov	r9, r3
    1406:	46a2      	mov	sl, r4
    1408:	46ab      	mov	fp, r5
    140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    140c:	200001a0 	.word	0x200001a0
    1410:	200001b0 	.word	0x200001b0
    1414:	20000194 	.word	0x20000194
    1418:	20000180 	.word	0x20000180
    141c:	00001665 	.word	0x00001665
    1420:	00002225 	.word	0x00002225
    1424:	00001d25 	.word	0x00001d25
    1428:	9999999a 	.word	0x9999999a
    142c:	3fb99999 	.word	0x3fb99999
    1430:	00001705 	.word	0x00001705
    1434:	000022a9 	.word	0x000022a9

00001438 <ModRTU_CRC>:

uint16_t ModRTU_CRC(uint8_t* buf, int len)
{
    1438:	b530      	push	{r4, r5, lr}
    143a:	0005      	movs	r5, r0
	uint16_t crc = 0xFFFF;
	
	for (int pos = 0; pos < len; pos++) {
    143c:	2400      	movs	r4, #0
	uint16_t crc = 0xFFFF;
    143e:	480a      	ldr	r0, [pc, #40]	; (1468 <ModRTU_CRC+0x30>)
	for (int pos = 0; pos < len; pos++) {
    1440:	e00b      	b.n	145a <ModRTU_CRC+0x22>
			if ((crc & 0x0001) != 0) {      // If the LSB is set
				crc >>= 1;                    // Shift right and XOR 0xA001
				crc ^= 0xA001;
			}
			else                            // Else LSB is not set
			crc >>= 1;                    // Just shift right
    1442:	0840      	lsrs	r0, r0, #1
		for (int i = 8; i != 0; i--) {    // Loop over each bit
    1444:	3b01      	subs	r3, #1
    1446:	2b00      	cmp	r3, #0
    1448:	d006      	beq.n	1458 <ModRTU_CRC+0x20>
			if ((crc & 0x0001) != 0) {      // If the LSB is set
    144a:	07c2      	lsls	r2, r0, #31
    144c:	d5f9      	bpl.n	1442 <ModRTU_CRC+0xa>
				crc >>= 1;                    // Shift right and XOR 0xA001
    144e:	0840      	lsrs	r0, r0, #1
				crc ^= 0xA001;
    1450:	4a06      	ldr	r2, [pc, #24]	; (146c <ModRTU_CRC+0x34>)
    1452:	4050      	eors	r0, r2
    1454:	b280      	uxth	r0, r0
    1456:	e7f5      	b.n	1444 <ModRTU_CRC+0xc>
	for (int pos = 0; pos < len; pos++) {
    1458:	3401      	adds	r4, #1
    145a:	428c      	cmp	r4, r1
    145c:	da03      	bge.n	1466 <ModRTU_CRC+0x2e>
		crc ^= (uint16_t)buf[pos];          // XOR byte into least sig. byte of crc
    145e:	5d2b      	ldrb	r3, [r5, r4]
    1460:	4058      	eors	r0, r3
		for (int i = 8; i != 0; i--) {    // Loop over each bit
    1462:	2308      	movs	r3, #8
    1464:	e7ef      	b.n	1446 <ModRTU_CRC+0xe>
		}
	}
	// Note, this number has low and high bytes swapped, so use it accordingly (or swap bytes)
	return crc;
}
    1466:	bd30      	pop	{r4, r5, pc}
    1468:	0000ffff 	.word	0x0000ffff
    146c:	ffffa001 	.word	0xffffa001

00001470 <modbusTask>:

void modbusTask(){
    1470:	b530      	push	{r4, r5, lr}
    1472:	b09b      	sub	sp, #108	; 0x6c
	uint8_t rxBuf[64];
	io_read(iox,&rxBuf[0],8);
    1474:	4b1e      	ldr	r3, [pc, #120]	; (14f0 <modbusTask+0x80>)
    1476:	6818      	ldr	r0, [r3, #0]
    1478:	2208      	movs	r2, #8
    147a:	a90a      	add	r1, sp, #40	; 0x28
    147c:	4b1d      	ldr	r3, [pc, #116]	; (14f4 <modbusTask+0x84>)
    147e:	4798      	blx	r3
	int i;
	uint16_t crc;
	uint8_t stdMdReq[8] = {0x01,0x03,0x00,0x00,0x00,0x0A,0xC5,0xCD};
    1480:	ac08      	add	r4, sp, #32
    1482:	4b1d      	ldr	r3, [pc, #116]	; (14f8 <modbusTask+0x88>)
    1484:	0022      	movs	r2, r4
    1486:	cb03      	ldmia	r3!, {r0, r1}
    1488:	c203      	stmia	r2!, {r0, r1}
	uint8_t stdMdRsp[25] = {0x01,0x03,0x14};
    148a:	ad01      	add	r5, sp, #4
    148c:	2219      	movs	r2, #25
    148e:	2100      	movs	r1, #0
    1490:	0028      	movs	r0, r5
    1492:	4b1a      	ldr	r3, [pc, #104]	; (14fc <modbusTask+0x8c>)
    1494:	4798      	blx	r3
    1496:	2301      	movs	r3, #1
    1498:	702b      	strb	r3, [r5, #0]
    149a:	3302      	adds	r3, #2
    149c:	706b      	strb	r3, [r5, #1]
    149e:	3311      	adds	r3, #17
    14a0:	70ab      	strb	r3, [r5, #2]
	if(memcmp(stdMdReq,rxBuf,8)!=0){
    14a2:	2208      	movs	r2, #8
    14a4:	a90a      	add	r1, sp, #40	; 0x28
    14a6:	0020      	movs	r0, r4
    14a8:	4b15      	ldr	r3, [pc, #84]	; (1500 <modbusTask+0x90>)
    14aa:	4798      	blx	r3
    14ac:	2800      	cmp	r0, #0
    14ae:	d00d      	beq.n	14cc <modbusTask+0x5c>
	}
	crc = ModRTU_CRC(stdMdRsp,23);
	stdMdRsp[23] = crc&0xFF;
	stdMdRsp[24] = crc>>8;
	io_write(iox,stdMdRsp,25); 
}
    14b0:	b01b      	add	sp, #108	; 0x6c
    14b2:	bd30      	pop	{r4, r5, pc}
		stdMdRsp[i*2+3] = ptr[i*2 + 1];
    14b4:	0041      	lsls	r1, r0, #1
    14b6:	1cca      	adds	r2, r1, #3
    14b8:	4b12      	ldr	r3, [pc, #72]	; (1504 <modbusTask+0x94>)
    14ba:	5c5d      	ldrb	r5, [r3, r1]
    14bc:	ac01      	add	r4, sp, #4
    14be:	54a5      	strb	r5, [r4, r2]
		stdMdRsp[i*2+4] = ptr[i*2];
    14c0:	1c82      	adds	r2, r0, #2
    14c2:	0052      	lsls	r2, r2, #1
    14c4:	3b01      	subs	r3, #1
    14c6:	5c5b      	ldrb	r3, [r3, r1]
    14c8:	54a3      	strb	r3, [r4, r2]
	for(i=0;i<10;i++){
    14ca:	3001      	adds	r0, #1
    14cc:	2809      	cmp	r0, #9
    14ce:	ddf1      	ble.n	14b4 <modbusTask+0x44>
	crc = ModRTU_CRC(stdMdRsp,23);
    14d0:	ac01      	add	r4, sp, #4
    14d2:	2117      	movs	r1, #23
    14d4:	0020      	movs	r0, r4
    14d6:	4b0c      	ldr	r3, [pc, #48]	; (1508 <modbusTask+0x98>)
    14d8:	4798      	blx	r3
	stdMdRsp[23] = crc&0xFF;
    14da:	75e0      	strb	r0, [r4, #23]
	stdMdRsp[24] = crc>>8;
    14dc:	0a00      	lsrs	r0, r0, #8
    14de:	7620      	strb	r0, [r4, #24]
	io_write(iox,stdMdRsp,25); 
    14e0:	4b03      	ldr	r3, [pc, #12]	; (14f0 <modbusTask+0x80>)
    14e2:	6818      	ldr	r0, [r3, #0]
    14e4:	2219      	movs	r2, #25
    14e6:	0021      	movs	r1, r4
    14e8:	4b08      	ldr	r3, [pc, #32]	; (150c <modbusTask+0x9c>)
    14ea:	4798      	blx	r3
    14ec:	e7e0      	b.n	14b0 <modbusTask+0x40>
    14ee:	46c0      	nop			; (mov r8, r8)
    14f0:	2000019c 	.word	0x2000019c
    14f4:	00000529 	.word	0x00000529
    14f8:	00002570 	.word	0x00002570
    14fc:	00002471 	.word	0x00002471
    1500:	00002441 	.word	0x00002441
    1504:	20000181 	.word	0x20000181
    1508:	00001439 	.word	0x00001439
    150c:	000004f1 	.word	0x000004f1

00001510 <USART_0_example_init>:

static uint8_t example_USART_0X[12] = "Hello World!";
void USART_0_example_init(void)
{
    1510:	b570      	push	{r4, r5, r6, lr}
	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, tx_cb_USART_0X);
    1512:	4c0b      	ldr	r4, [pc, #44]	; (1540 <USART_0_example_init+0x30>)
    1514:	4a0b      	ldr	r2, [pc, #44]	; (1544 <USART_0_example_init+0x34>)
    1516:	2101      	movs	r1, #1
    1518:	0020      	movs	r0, r4
    151a:	4d0b      	ldr	r5, [pc, #44]	; (1548 <USART_0_example_init+0x38>)
    151c:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, rx_cb_USART_0X);
    151e:	4a0b      	ldr	r2, [pc, #44]	; (154c <USART_0_example_init+0x3c>)
    1520:	2100      	movs	r1, #0
    1522:	0020      	movs	r0, r4
    1524:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_ERROR_CB, err_cb_USART_0X);
    1526:	4a0a      	ldr	r2, [pc, #40]	; (1550 <USART_0_example_init+0x40>)
    1528:	2102      	movs	r1, #2
    152a:	0020      	movs	r0, r4
    152c:	47a8      	blx	r5
	usart_async_get_io_descriptor(&USART_0, &iox);
    152e:	4909      	ldr	r1, [pc, #36]	; (1554 <USART_0_example_init+0x44>)
    1530:	0020      	movs	r0, r4
    1532:	4b09      	ldr	r3, [pc, #36]	; (1558 <USART_0_example_init+0x48>)
    1534:	4798      	blx	r3
	usart_async_enable(&USART_0);
    1536:	0020      	movs	r0, r4
    1538:	4b08      	ldr	r3, [pc, #32]	; (155c <USART_0_example_init+0x4c>)
    153a:	4798      	blx	r3


}
    153c:	bd70      	pop	{r4, r5, r6, pc}
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	200000a0 	.word	0x200000a0
    1544:	000012ad 	.word	0x000012ad
    1548:	000007c5 	.word	0x000007c5
    154c:	000012b1 	.word	0x000012b1
    1550:	000012bd 	.word	0x000012bd
    1554:	2000019c 	.word	0x2000019c
    1558:	00000795 	.word	0x00000795
    155c:	00000769 	.word	0x00000769

00001560 <main>:
}

int err,err1;
uint8_t   dataX[64];
int main(void)
{
    1560:	b5f0      	push	{r4, r5, r6, r7, lr}
    1562:	b089      	sub	sp, #36	; 0x24
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1564:	4b2f      	ldr	r3, [pc, #188]	; (1624 <main+0xc4>)
    1566:	4798      	blx	r3
	
	can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback1);
    1568:	4e2f      	ldr	r6, [pc, #188]	; (1628 <main+0xc8>)
    156a:	4a30      	ldr	r2, [pc, #192]	; (162c <main+0xcc>)
    156c:	2100      	movs	r1, #0
    156e:	0030      	movs	r0, r6
    1570:	4b2f      	ldr	r3, [pc, #188]	; (1630 <main+0xd0>)
    1572:	4798      	blx	r3
	uint8_t            send_data[8];
	send_data[0] = 0xC0;
    1574:	ac06      	add	r4, sp, #24
    1576:	23c0      	movs	r3, #192	; 0xc0
    1578:	7023      	strb	r3, [r4, #0]
	send_data[1] = 0x40;
    157a:	3b80      	subs	r3, #128	; 0x80
    157c:	7063      	strb	r3, [r4, #1]
	send_data[2] = 0x00;
    157e:	2500      	movs	r5, #0
    1580:	70a5      	strb	r5, [r4, #2]
	send_data[3] = 0x00;
    1582:	70e5      	strb	r5, [r4, #3]
	send_data[4] = 0x00;
    1584:	7125      	strb	r5, [r4, #4]
	send_data[5] = 0xE0;
    1586:	33a0      	adds	r3, #160	; 0xa0
    1588:	7163      	strb	r3, [r4, #5]
	send_data[6] = 0x00;
    158a:	71a5      	strb	r5, [r4, #6]
	send_data[7] = 0x0F;
    158c:	3bd1      	subs	r3, #209	; 0xd1
    158e:	71e3      	strb	r3, [r4, #7]
	struct can_filter  filter;
	//filter.id   = 0b10101010101;
	filter.id   = 0x0;
    1590:	9504      	str	r5, [sp, #16]
	filter.mask = 0x980;
    1592:	2398      	movs	r3, #152	; 0x98
    1594:	011b      	lsls	r3, r3, #4
    1596:	9305      	str	r3, [sp, #20]
	can_async_set_filter(&CAN_0, 0, CAN_FMT_STDID, &filter);
    1598:	ab04      	add	r3, sp, #16
    159a:	2200      	movs	r2, #0
    159c:	2100      	movs	r1, #0
    159e:	0030      	movs	r0, r6
    15a0:	4f24      	ldr	r7, [pc, #144]	; (1634 <main+0xd4>)
    15a2:	47b8      	blx	r7
	can_async_enable(&CAN_0);
    15a4:	0030      	movs	r0, r6
    15a6:	4b24      	ldr	r3, [pc, #144]	; (1638 <main+0xd8>)
    15a8:	4798      	blx	r3
	struct can_message msg;
	msg.type = CAN_TYPE_DATA;
    15aa:	466b      	mov	r3, sp
    15ac:	711d      	strb	r5, [r3, #4]
	//msg.type = CAN_TYPE_REMOTE;
	msg.id   = 0x430;
    15ae:	2386      	movs	r3, #134	; 0x86
    15b0:	00db      	lsls	r3, r3, #3
    15b2:	9300      	str	r3, [sp, #0]
	msg.data = send_data;
    15b4:	9402      	str	r4, [sp, #8]
	msg.len  = 8;
    15b6:	2308      	movs	r3, #8
    15b8:	466a      	mov	r2, sp
    15ba:	7313      	strb	r3, [r2, #12]
	msg.fmt  = CAN_FMT_STDID;
    15bc:	7355      	strb	r5, [r2, #13]
	USART_0_example_init();
    15be:	4b1f      	ldr	r3, [pc, #124]	; (163c <main+0xdc>)
    15c0:	4798      	blx	r3
    15c2:	e017      	b.n	15f4 <main+0x94>
		//can_send_test();
		if(modReceiveFlag==1){
			modReceiveFlag = 0;
			modTaskTrigger = 1;
		}
		delay_ms(100);
    15c4:	2064      	movs	r0, #100	; 0x64
    15c6:	4b1e      	ldr	r3, [pc, #120]	; (1640 <main+0xe0>)
    15c8:	4798      	blx	r3
		can_async_write(&CAN_0, &msg);
    15ca:	4c17      	ldr	r4, [pc, #92]	; (1628 <main+0xc8>)
    15cc:	4669      	mov	r1, sp
    15ce:	0020      	movs	r0, r4
    15d0:	4b1c      	ldr	r3, [pc, #112]	; (1644 <main+0xe4>)
    15d2:	4798      	blx	r3
		//uart_routine();
		err = can_async_get_txerr(&CAN_0);
    15d4:	0020      	movs	r0, r4
    15d6:	4b1c      	ldr	r3, [pc, #112]	; (1648 <main+0xe8>)
    15d8:	4798      	blx	r3
    15da:	4b1c      	ldr	r3, [pc, #112]	; (164c <main+0xec>)
    15dc:	6018      	str	r0, [r3, #0]
		err1 = can_async_get_rxerr(&CAN_0);
    15de:	0020      	movs	r0, r4
    15e0:	4b1b      	ldr	r3, [pc, #108]	; (1650 <main+0xf0>)
    15e2:	4798      	blx	r3
    15e4:	4b1b      	ldr	r3, [pc, #108]	; (1654 <main+0xf4>)
    15e6:	6018      	str	r0, [r3, #0]
		dataDecode();
    15e8:	4b1b      	ldr	r3, [pc, #108]	; (1658 <main+0xf8>)
    15ea:	4798      	blx	r3
		
		 if(modTaskTrigger==1){
    15ec:	4b1b      	ldr	r3, [pc, #108]	; (165c <main+0xfc>)
    15ee:	789b      	ldrb	r3, [r3, #2]
    15f0:	2b01      	cmp	r3, #1
    15f2:	d009      	beq.n	1608 <main+0xa8>
		if(modReceiveFlag==1){
    15f4:	4b19      	ldr	r3, [pc, #100]	; (165c <main+0xfc>)
    15f6:	781b      	ldrb	r3, [r3, #0]
    15f8:	2b01      	cmp	r3, #1
    15fa:	d1e3      	bne.n	15c4 <main+0x64>
			modReceiveFlag = 0;
    15fc:	4b17      	ldr	r3, [pc, #92]	; (165c <main+0xfc>)
    15fe:	2200      	movs	r2, #0
    1600:	701a      	strb	r2, [r3, #0]
			modTaskTrigger = 1;
    1602:	3201      	adds	r2, #1
    1604:	709a      	strb	r2, [r3, #2]
    1606:	e7dd      	b.n	15c4 <main+0x64>
			 mctr++;
    1608:	4a14      	ldr	r2, [pc, #80]	; (165c <main+0xfc>)
    160a:	78d3      	ldrb	r3, [r2, #3]
    160c:	3301      	adds	r3, #1
    160e:	b2db      	uxtb	r3, r3
    1610:	70d3      	strb	r3, [r2, #3]
			 if(mctr>3){
    1612:	2b03      	cmp	r3, #3
    1614:	d9ee      	bls.n	15f4 <main+0x94>
				 mctr=0;
    1616:	0014      	movs	r4, r2
    1618:	2500      	movs	r5, #0
    161a:	70d5      	strb	r5, [r2, #3]
				 modbusTask();
    161c:	4b10      	ldr	r3, [pc, #64]	; (1660 <main+0x100>)
    161e:	4798      	blx	r3
				 modTaskTrigger = 0;
    1620:	70a5      	strb	r5, [r4, #2]
    1622:	e7e7      	b.n	15f4 <main+0x94>
    1624:	0000011d 	.word	0x0000011d
    1628:	20000078 	.word	0x20000078
    162c:	000012c1 	.word	0x000012c1
    1630:	000003fd 	.word	0x000003fd
    1634:	0000049d 	.word	0x0000049d
    1638:	00000365 	.word	0x00000365
    163c:	00001511 	.word	0x00001511
    1640:	000004d1 	.word	0x000004d1
    1644:	000003c5 	.word	0x000003c5
    1648:	00000475 	.word	0x00000475
    164c:	200001a8 	.word	0x200001a8
    1650:	0000044d 	.word	0x0000044d
    1654:	200001ac 	.word	0x200001ac
    1658:	00001369 	.word	0x00001369
    165c:	20000074 	.word	0x20000074
    1660:	00001471 	.word	0x00001471

00001664 <__aeabi_i2f>:
    1664:	b570      	push	{r4, r5, r6, lr}
    1666:	2800      	cmp	r0, #0
    1668:	d030      	beq.n	16cc <__aeabi_i2f+0x68>
    166a:	17c3      	asrs	r3, r0, #31
    166c:	18c4      	adds	r4, r0, r3
    166e:	405c      	eors	r4, r3
    1670:	0fc5      	lsrs	r5, r0, #31
    1672:	0020      	movs	r0, r4
    1674:	f000 fea2 	bl	23bc <__clzsi2>
    1678:	239e      	movs	r3, #158	; 0x9e
    167a:	1a1b      	subs	r3, r3, r0
    167c:	2b96      	cmp	r3, #150	; 0x96
    167e:	dc0d      	bgt.n	169c <__aeabi_i2f+0x38>
    1680:	2296      	movs	r2, #150	; 0x96
    1682:	1ad2      	subs	r2, r2, r3
    1684:	4094      	lsls	r4, r2
    1686:	002a      	movs	r2, r5
    1688:	0264      	lsls	r4, r4, #9
    168a:	0a64      	lsrs	r4, r4, #9
    168c:	b2db      	uxtb	r3, r3
    168e:	0264      	lsls	r4, r4, #9
    1690:	05db      	lsls	r3, r3, #23
    1692:	0a60      	lsrs	r0, r4, #9
    1694:	07d2      	lsls	r2, r2, #31
    1696:	4318      	orrs	r0, r3
    1698:	4310      	orrs	r0, r2
    169a:	bd70      	pop	{r4, r5, r6, pc}
    169c:	2b99      	cmp	r3, #153	; 0x99
    169e:	dc19      	bgt.n	16d4 <__aeabi_i2f+0x70>
    16a0:	2299      	movs	r2, #153	; 0x99
    16a2:	1ad2      	subs	r2, r2, r3
    16a4:	2a00      	cmp	r2, #0
    16a6:	dd29      	ble.n	16fc <__aeabi_i2f+0x98>
    16a8:	4094      	lsls	r4, r2
    16aa:	0022      	movs	r2, r4
    16ac:	4c14      	ldr	r4, [pc, #80]	; (1700 <__aeabi_i2f+0x9c>)
    16ae:	4014      	ands	r4, r2
    16b0:	0751      	lsls	r1, r2, #29
    16b2:	d004      	beq.n	16be <__aeabi_i2f+0x5a>
    16b4:	210f      	movs	r1, #15
    16b6:	400a      	ands	r2, r1
    16b8:	2a04      	cmp	r2, #4
    16ba:	d000      	beq.n	16be <__aeabi_i2f+0x5a>
    16bc:	3404      	adds	r4, #4
    16be:	0162      	lsls	r2, r4, #5
    16c0:	d413      	bmi.n	16ea <__aeabi_i2f+0x86>
    16c2:	01a4      	lsls	r4, r4, #6
    16c4:	0a64      	lsrs	r4, r4, #9
    16c6:	b2db      	uxtb	r3, r3
    16c8:	002a      	movs	r2, r5
    16ca:	e7e0      	b.n	168e <__aeabi_i2f+0x2a>
    16cc:	2200      	movs	r2, #0
    16ce:	2300      	movs	r3, #0
    16d0:	2400      	movs	r4, #0
    16d2:	e7dc      	b.n	168e <__aeabi_i2f+0x2a>
    16d4:	2205      	movs	r2, #5
    16d6:	0021      	movs	r1, r4
    16d8:	1a12      	subs	r2, r2, r0
    16da:	40d1      	lsrs	r1, r2
    16dc:	22b9      	movs	r2, #185	; 0xb9
    16de:	1ad2      	subs	r2, r2, r3
    16e0:	4094      	lsls	r4, r2
    16e2:	1e62      	subs	r2, r4, #1
    16e4:	4194      	sbcs	r4, r2
    16e6:	430c      	orrs	r4, r1
    16e8:	e7da      	b.n	16a0 <__aeabi_i2f+0x3c>
    16ea:	4b05      	ldr	r3, [pc, #20]	; (1700 <__aeabi_i2f+0x9c>)
    16ec:	002a      	movs	r2, r5
    16ee:	401c      	ands	r4, r3
    16f0:	239f      	movs	r3, #159	; 0x9f
    16f2:	01a4      	lsls	r4, r4, #6
    16f4:	1a1b      	subs	r3, r3, r0
    16f6:	0a64      	lsrs	r4, r4, #9
    16f8:	b2db      	uxtb	r3, r3
    16fa:	e7c8      	b.n	168e <__aeabi_i2f+0x2a>
    16fc:	0022      	movs	r2, r4
    16fe:	e7d5      	b.n	16ac <__aeabi_i2f+0x48>
    1700:	fbffffff 	.word	0xfbffffff

00001704 <__aeabi_dadd>:
    1704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1706:	4645      	mov	r5, r8
    1708:	46de      	mov	lr, fp
    170a:	4657      	mov	r7, sl
    170c:	464e      	mov	r6, r9
    170e:	030c      	lsls	r4, r1, #12
    1710:	b5e0      	push	{r5, r6, r7, lr}
    1712:	004e      	lsls	r6, r1, #1
    1714:	0fc9      	lsrs	r1, r1, #31
    1716:	4688      	mov	r8, r1
    1718:	000d      	movs	r5, r1
    171a:	0a61      	lsrs	r1, r4, #9
    171c:	0f44      	lsrs	r4, r0, #29
    171e:	430c      	orrs	r4, r1
    1720:	00c7      	lsls	r7, r0, #3
    1722:	0319      	lsls	r1, r3, #12
    1724:	0058      	lsls	r0, r3, #1
    1726:	0fdb      	lsrs	r3, r3, #31
    1728:	469b      	mov	fp, r3
    172a:	0a4b      	lsrs	r3, r1, #9
    172c:	0f51      	lsrs	r1, r2, #29
    172e:	430b      	orrs	r3, r1
    1730:	0d76      	lsrs	r6, r6, #21
    1732:	0d40      	lsrs	r0, r0, #21
    1734:	0019      	movs	r1, r3
    1736:	00d2      	lsls	r2, r2, #3
    1738:	45d8      	cmp	r8, fp
    173a:	d100      	bne.n	173e <__aeabi_dadd+0x3a>
    173c:	e0ae      	b.n	189c <__aeabi_dadd+0x198>
    173e:	1a35      	subs	r5, r6, r0
    1740:	2d00      	cmp	r5, #0
    1742:	dc00      	bgt.n	1746 <__aeabi_dadd+0x42>
    1744:	e0f6      	b.n	1934 <__aeabi_dadd+0x230>
    1746:	2800      	cmp	r0, #0
    1748:	d10f      	bne.n	176a <__aeabi_dadd+0x66>
    174a:	4313      	orrs	r3, r2
    174c:	d100      	bne.n	1750 <__aeabi_dadd+0x4c>
    174e:	e0db      	b.n	1908 <__aeabi_dadd+0x204>
    1750:	1e6b      	subs	r3, r5, #1
    1752:	2b00      	cmp	r3, #0
    1754:	d000      	beq.n	1758 <__aeabi_dadd+0x54>
    1756:	e137      	b.n	19c8 <__aeabi_dadd+0x2c4>
    1758:	1aba      	subs	r2, r7, r2
    175a:	4297      	cmp	r7, r2
    175c:	41bf      	sbcs	r7, r7
    175e:	1a64      	subs	r4, r4, r1
    1760:	427f      	negs	r7, r7
    1762:	1be4      	subs	r4, r4, r7
    1764:	2601      	movs	r6, #1
    1766:	0017      	movs	r7, r2
    1768:	e024      	b.n	17b4 <__aeabi_dadd+0xb0>
    176a:	4bc6      	ldr	r3, [pc, #792]	; (1a84 <__aeabi_dadd+0x380>)
    176c:	429e      	cmp	r6, r3
    176e:	d04d      	beq.n	180c <__aeabi_dadd+0x108>
    1770:	2380      	movs	r3, #128	; 0x80
    1772:	041b      	lsls	r3, r3, #16
    1774:	4319      	orrs	r1, r3
    1776:	2d38      	cmp	r5, #56	; 0x38
    1778:	dd00      	ble.n	177c <__aeabi_dadd+0x78>
    177a:	e107      	b.n	198c <__aeabi_dadd+0x288>
    177c:	2d1f      	cmp	r5, #31
    177e:	dd00      	ble.n	1782 <__aeabi_dadd+0x7e>
    1780:	e138      	b.n	19f4 <__aeabi_dadd+0x2f0>
    1782:	2020      	movs	r0, #32
    1784:	1b43      	subs	r3, r0, r5
    1786:	469a      	mov	sl, r3
    1788:	000b      	movs	r3, r1
    178a:	4650      	mov	r0, sl
    178c:	4083      	lsls	r3, r0
    178e:	4699      	mov	r9, r3
    1790:	0013      	movs	r3, r2
    1792:	4648      	mov	r0, r9
    1794:	40eb      	lsrs	r3, r5
    1796:	4318      	orrs	r0, r3
    1798:	0003      	movs	r3, r0
    179a:	4650      	mov	r0, sl
    179c:	4082      	lsls	r2, r0
    179e:	1e50      	subs	r0, r2, #1
    17a0:	4182      	sbcs	r2, r0
    17a2:	40e9      	lsrs	r1, r5
    17a4:	431a      	orrs	r2, r3
    17a6:	1aba      	subs	r2, r7, r2
    17a8:	1a61      	subs	r1, r4, r1
    17aa:	4297      	cmp	r7, r2
    17ac:	41a4      	sbcs	r4, r4
    17ae:	0017      	movs	r7, r2
    17b0:	4264      	negs	r4, r4
    17b2:	1b0c      	subs	r4, r1, r4
    17b4:	0223      	lsls	r3, r4, #8
    17b6:	d562      	bpl.n	187e <__aeabi_dadd+0x17a>
    17b8:	0264      	lsls	r4, r4, #9
    17ba:	0a65      	lsrs	r5, r4, #9
    17bc:	2d00      	cmp	r5, #0
    17be:	d100      	bne.n	17c2 <__aeabi_dadd+0xbe>
    17c0:	e0df      	b.n	1982 <__aeabi_dadd+0x27e>
    17c2:	0028      	movs	r0, r5
    17c4:	f000 fdfa 	bl	23bc <__clzsi2>
    17c8:	0003      	movs	r3, r0
    17ca:	3b08      	subs	r3, #8
    17cc:	2b1f      	cmp	r3, #31
    17ce:	dd00      	ble.n	17d2 <__aeabi_dadd+0xce>
    17d0:	e0d2      	b.n	1978 <__aeabi_dadd+0x274>
    17d2:	2220      	movs	r2, #32
    17d4:	003c      	movs	r4, r7
    17d6:	1ad2      	subs	r2, r2, r3
    17d8:	409d      	lsls	r5, r3
    17da:	40d4      	lsrs	r4, r2
    17dc:	409f      	lsls	r7, r3
    17de:	4325      	orrs	r5, r4
    17e0:	429e      	cmp	r6, r3
    17e2:	dd00      	ble.n	17e6 <__aeabi_dadd+0xe2>
    17e4:	e0c4      	b.n	1970 <__aeabi_dadd+0x26c>
    17e6:	1b9e      	subs	r6, r3, r6
    17e8:	1c73      	adds	r3, r6, #1
    17ea:	2b1f      	cmp	r3, #31
    17ec:	dd00      	ble.n	17f0 <__aeabi_dadd+0xec>
    17ee:	e0f1      	b.n	19d4 <__aeabi_dadd+0x2d0>
    17f0:	2220      	movs	r2, #32
    17f2:	0038      	movs	r0, r7
    17f4:	0029      	movs	r1, r5
    17f6:	1ad2      	subs	r2, r2, r3
    17f8:	40d8      	lsrs	r0, r3
    17fa:	4091      	lsls	r1, r2
    17fc:	4097      	lsls	r7, r2
    17fe:	002c      	movs	r4, r5
    1800:	4301      	orrs	r1, r0
    1802:	1e78      	subs	r0, r7, #1
    1804:	4187      	sbcs	r7, r0
    1806:	40dc      	lsrs	r4, r3
    1808:	2600      	movs	r6, #0
    180a:	430f      	orrs	r7, r1
    180c:	077b      	lsls	r3, r7, #29
    180e:	d009      	beq.n	1824 <__aeabi_dadd+0x120>
    1810:	230f      	movs	r3, #15
    1812:	403b      	ands	r3, r7
    1814:	2b04      	cmp	r3, #4
    1816:	d005      	beq.n	1824 <__aeabi_dadd+0x120>
    1818:	1d3b      	adds	r3, r7, #4
    181a:	42bb      	cmp	r3, r7
    181c:	41bf      	sbcs	r7, r7
    181e:	427f      	negs	r7, r7
    1820:	19e4      	adds	r4, r4, r7
    1822:	001f      	movs	r7, r3
    1824:	0223      	lsls	r3, r4, #8
    1826:	d52c      	bpl.n	1882 <__aeabi_dadd+0x17e>
    1828:	4b96      	ldr	r3, [pc, #600]	; (1a84 <__aeabi_dadd+0x380>)
    182a:	3601      	adds	r6, #1
    182c:	429e      	cmp	r6, r3
    182e:	d100      	bne.n	1832 <__aeabi_dadd+0x12e>
    1830:	e09a      	b.n	1968 <__aeabi_dadd+0x264>
    1832:	4645      	mov	r5, r8
    1834:	4b94      	ldr	r3, [pc, #592]	; (1a88 <__aeabi_dadd+0x384>)
    1836:	08ff      	lsrs	r7, r7, #3
    1838:	401c      	ands	r4, r3
    183a:	0760      	lsls	r0, r4, #29
    183c:	0576      	lsls	r6, r6, #21
    183e:	0264      	lsls	r4, r4, #9
    1840:	4307      	orrs	r7, r0
    1842:	0b24      	lsrs	r4, r4, #12
    1844:	0d76      	lsrs	r6, r6, #21
    1846:	2100      	movs	r1, #0
    1848:	0324      	lsls	r4, r4, #12
    184a:	0b23      	lsrs	r3, r4, #12
    184c:	0d0c      	lsrs	r4, r1, #20
    184e:	4a8f      	ldr	r2, [pc, #572]	; (1a8c <__aeabi_dadd+0x388>)
    1850:	0524      	lsls	r4, r4, #20
    1852:	431c      	orrs	r4, r3
    1854:	4014      	ands	r4, r2
    1856:	0533      	lsls	r3, r6, #20
    1858:	4323      	orrs	r3, r4
    185a:	005b      	lsls	r3, r3, #1
    185c:	07ed      	lsls	r5, r5, #31
    185e:	085b      	lsrs	r3, r3, #1
    1860:	432b      	orrs	r3, r5
    1862:	0038      	movs	r0, r7
    1864:	0019      	movs	r1, r3
    1866:	bc3c      	pop	{r2, r3, r4, r5}
    1868:	4690      	mov	r8, r2
    186a:	4699      	mov	r9, r3
    186c:	46a2      	mov	sl, r4
    186e:	46ab      	mov	fp, r5
    1870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1872:	4664      	mov	r4, ip
    1874:	4304      	orrs	r4, r0
    1876:	d100      	bne.n	187a <__aeabi_dadd+0x176>
    1878:	e211      	b.n	1c9e <__aeabi_dadd+0x59a>
    187a:	0004      	movs	r4, r0
    187c:	4667      	mov	r7, ip
    187e:	077b      	lsls	r3, r7, #29
    1880:	d1c6      	bne.n	1810 <__aeabi_dadd+0x10c>
    1882:	4645      	mov	r5, r8
    1884:	0760      	lsls	r0, r4, #29
    1886:	08ff      	lsrs	r7, r7, #3
    1888:	4307      	orrs	r7, r0
    188a:	08e4      	lsrs	r4, r4, #3
    188c:	4b7d      	ldr	r3, [pc, #500]	; (1a84 <__aeabi_dadd+0x380>)
    188e:	429e      	cmp	r6, r3
    1890:	d030      	beq.n	18f4 <__aeabi_dadd+0x1f0>
    1892:	0324      	lsls	r4, r4, #12
    1894:	0576      	lsls	r6, r6, #21
    1896:	0b24      	lsrs	r4, r4, #12
    1898:	0d76      	lsrs	r6, r6, #21
    189a:	e7d4      	b.n	1846 <__aeabi_dadd+0x142>
    189c:	1a33      	subs	r3, r6, r0
    189e:	469a      	mov	sl, r3
    18a0:	2b00      	cmp	r3, #0
    18a2:	dd78      	ble.n	1996 <__aeabi_dadd+0x292>
    18a4:	2800      	cmp	r0, #0
    18a6:	d031      	beq.n	190c <__aeabi_dadd+0x208>
    18a8:	4876      	ldr	r0, [pc, #472]	; (1a84 <__aeabi_dadd+0x380>)
    18aa:	4286      	cmp	r6, r0
    18ac:	d0ae      	beq.n	180c <__aeabi_dadd+0x108>
    18ae:	2080      	movs	r0, #128	; 0x80
    18b0:	0400      	lsls	r0, r0, #16
    18b2:	4301      	orrs	r1, r0
    18b4:	4653      	mov	r3, sl
    18b6:	2b38      	cmp	r3, #56	; 0x38
    18b8:	dc00      	bgt.n	18bc <__aeabi_dadd+0x1b8>
    18ba:	e0e9      	b.n	1a90 <__aeabi_dadd+0x38c>
    18bc:	430a      	orrs	r2, r1
    18be:	1e51      	subs	r1, r2, #1
    18c0:	418a      	sbcs	r2, r1
    18c2:	2100      	movs	r1, #0
    18c4:	19d2      	adds	r2, r2, r7
    18c6:	42ba      	cmp	r2, r7
    18c8:	41bf      	sbcs	r7, r7
    18ca:	1909      	adds	r1, r1, r4
    18cc:	427c      	negs	r4, r7
    18ce:	0017      	movs	r7, r2
    18d0:	190c      	adds	r4, r1, r4
    18d2:	0223      	lsls	r3, r4, #8
    18d4:	d5d3      	bpl.n	187e <__aeabi_dadd+0x17a>
    18d6:	4b6b      	ldr	r3, [pc, #428]	; (1a84 <__aeabi_dadd+0x380>)
    18d8:	3601      	adds	r6, #1
    18da:	429e      	cmp	r6, r3
    18dc:	d100      	bne.n	18e0 <__aeabi_dadd+0x1dc>
    18de:	e13a      	b.n	1b56 <__aeabi_dadd+0x452>
    18e0:	2001      	movs	r0, #1
    18e2:	4b69      	ldr	r3, [pc, #420]	; (1a88 <__aeabi_dadd+0x384>)
    18e4:	401c      	ands	r4, r3
    18e6:	087b      	lsrs	r3, r7, #1
    18e8:	4007      	ands	r7, r0
    18ea:	431f      	orrs	r7, r3
    18ec:	07e0      	lsls	r0, r4, #31
    18ee:	4307      	orrs	r7, r0
    18f0:	0864      	lsrs	r4, r4, #1
    18f2:	e78b      	b.n	180c <__aeabi_dadd+0x108>
    18f4:	0023      	movs	r3, r4
    18f6:	433b      	orrs	r3, r7
    18f8:	d100      	bne.n	18fc <__aeabi_dadd+0x1f8>
    18fa:	e1cb      	b.n	1c94 <__aeabi_dadd+0x590>
    18fc:	2280      	movs	r2, #128	; 0x80
    18fe:	0312      	lsls	r2, r2, #12
    1900:	4314      	orrs	r4, r2
    1902:	0324      	lsls	r4, r4, #12
    1904:	0b24      	lsrs	r4, r4, #12
    1906:	e79e      	b.n	1846 <__aeabi_dadd+0x142>
    1908:	002e      	movs	r6, r5
    190a:	e77f      	b.n	180c <__aeabi_dadd+0x108>
    190c:	0008      	movs	r0, r1
    190e:	4310      	orrs	r0, r2
    1910:	d100      	bne.n	1914 <__aeabi_dadd+0x210>
    1912:	e0b4      	b.n	1a7e <__aeabi_dadd+0x37a>
    1914:	1e58      	subs	r0, r3, #1
    1916:	2800      	cmp	r0, #0
    1918:	d000      	beq.n	191c <__aeabi_dadd+0x218>
    191a:	e0de      	b.n	1ada <__aeabi_dadd+0x3d6>
    191c:	18ba      	adds	r2, r7, r2
    191e:	42ba      	cmp	r2, r7
    1920:	419b      	sbcs	r3, r3
    1922:	1864      	adds	r4, r4, r1
    1924:	425b      	negs	r3, r3
    1926:	18e4      	adds	r4, r4, r3
    1928:	0017      	movs	r7, r2
    192a:	2601      	movs	r6, #1
    192c:	0223      	lsls	r3, r4, #8
    192e:	d5a6      	bpl.n	187e <__aeabi_dadd+0x17a>
    1930:	2602      	movs	r6, #2
    1932:	e7d5      	b.n	18e0 <__aeabi_dadd+0x1dc>
    1934:	2d00      	cmp	r5, #0
    1936:	d16e      	bne.n	1a16 <__aeabi_dadd+0x312>
    1938:	1c70      	adds	r0, r6, #1
    193a:	0540      	lsls	r0, r0, #21
    193c:	0d40      	lsrs	r0, r0, #21
    193e:	2801      	cmp	r0, #1
    1940:	dc00      	bgt.n	1944 <__aeabi_dadd+0x240>
    1942:	e0f9      	b.n	1b38 <__aeabi_dadd+0x434>
    1944:	1ab8      	subs	r0, r7, r2
    1946:	4684      	mov	ip, r0
    1948:	4287      	cmp	r7, r0
    194a:	4180      	sbcs	r0, r0
    194c:	1ae5      	subs	r5, r4, r3
    194e:	4240      	negs	r0, r0
    1950:	1a2d      	subs	r5, r5, r0
    1952:	0228      	lsls	r0, r5, #8
    1954:	d400      	bmi.n	1958 <__aeabi_dadd+0x254>
    1956:	e089      	b.n	1a6c <__aeabi_dadd+0x368>
    1958:	1bd7      	subs	r7, r2, r7
    195a:	42ba      	cmp	r2, r7
    195c:	4192      	sbcs	r2, r2
    195e:	1b1c      	subs	r4, r3, r4
    1960:	4252      	negs	r2, r2
    1962:	1aa5      	subs	r5, r4, r2
    1964:	46d8      	mov	r8, fp
    1966:	e729      	b.n	17bc <__aeabi_dadd+0xb8>
    1968:	4645      	mov	r5, r8
    196a:	2400      	movs	r4, #0
    196c:	2700      	movs	r7, #0
    196e:	e76a      	b.n	1846 <__aeabi_dadd+0x142>
    1970:	4c45      	ldr	r4, [pc, #276]	; (1a88 <__aeabi_dadd+0x384>)
    1972:	1af6      	subs	r6, r6, r3
    1974:	402c      	ands	r4, r5
    1976:	e749      	b.n	180c <__aeabi_dadd+0x108>
    1978:	003d      	movs	r5, r7
    197a:	3828      	subs	r0, #40	; 0x28
    197c:	4085      	lsls	r5, r0
    197e:	2700      	movs	r7, #0
    1980:	e72e      	b.n	17e0 <__aeabi_dadd+0xdc>
    1982:	0038      	movs	r0, r7
    1984:	f000 fd1a 	bl	23bc <__clzsi2>
    1988:	3020      	adds	r0, #32
    198a:	e71d      	b.n	17c8 <__aeabi_dadd+0xc4>
    198c:	430a      	orrs	r2, r1
    198e:	1e51      	subs	r1, r2, #1
    1990:	418a      	sbcs	r2, r1
    1992:	2100      	movs	r1, #0
    1994:	e707      	b.n	17a6 <__aeabi_dadd+0xa2>
    1996:	2b00      	cmp	r3, #0
    1998:	d000      	beq.n	199c <__aeabi_dadd+0x298>
    199a:	e0f3      	b.n	1b84 <__aeabi_dadd+0x480>
    199c:	1c70      	adds	r0, r6, #1
    199e:	0543      	lsls	r3, r0, #21
    19a0:	0d5b      	lsrs	r3, r3, #21
    19a2:	2b01      	cmp	r3, #1
    19a4:	dc00      	bgt.n	19a8 <__aeabi_dadd+0x2a4>
    19a6:	e0ad      	b.n	1b04 <__aeabi_dadd+0x400>
    19a8:	4b36      	ldr	r3, [pc, #216]	; (1a84 <__aeabi_dadd+0x380>)
    19aa:	4298      	cmp	r0, r3
    19ac:	d100      	bne.n	19b0 <__aeabi_dadd+0x2ac>
    19ae:	e0d1      	b.n	1b54 <__aeabi_dadd+0x450>
    19b0:	18ba      	adds	r2, r7, r2
    19b2:	42ba      	cmp	r2, r7
    19b4:	41bf      	sbcs	r7, r7
    19b6:	1864      	adds	r4, r4, r1
    19b8:	427f      	negs	r7, r7
    19ba:	19e4      	adds	r4, r4, r7
    19bc:	07e7      	lsls	r7, r4, #31
    19be:	0852      	lsrs	r2, r2, #1
    19c0:	4317      	orrs	r7, r2
    19c2:	0864      	lsrs	r4, r4, #1
    19c4:	0006      	movs	r6, r0
    19c6:	e721      	b.n	180c <__aeabi_dadd+0x108>
    19c8:	482e      	ldr	r0, [pc, #184]	; (1a84 <__aeabi_dadd+0x380>)
    19ca:	4285      	cmp	r5, r0
    19cc:	d100      	bne.n	19d0 <__aeabi_dadd+0x2cc>
    19ce:	e093      	b.n	1af8 <__aeabi_dadd+0x3f4>
    19d0:	001d      	movs	r5, r3
    19d2:	e6d0      	b.n	1776 <__aeabi_dadd+0x72>
    19d4:	0029      	movs	r1, r5
    19d6:	3e1f      	subs	r6, #31
    19d8:	40f1      	lsrs	r1, r6
    19da:	2b20      	cmp	r3, #32
    19dc:	d100      	bne.n	19e0 <__aeabi_dadd+0x2dc>
    19de:	e08d      	b.n	1afc <__aeabi_dadd+0x3f8>
    19e0:	2240      	movs	r2, #64	; 0x40
    19e2:	1ad3      	subs	r3, r2, r3
    19e4:	409d      	lsls	r5, r3
    19e6:	432f      	orrs	r7, r5
    19e8:	1e7d      	subs	r5, r7, #1
    19ea:	41af      	sbcs	r7, r5
    19ec:	2400      	movs	r4, #0
    19ee:	430f      	orrs	r7, r1
    19f0:	2600      	movs	r6, #0
    19f2:	e744      	b.n	187e <__aeabi_dadd+0x17a>
    19f4:	002b      	movs	r3, r5
    19f6:	0008      	movs	r0, r1
    19f8:	3b20      	subs	r3, #32
    19fa:	40d8      	lsrs	r0, r3
    19fc:	0003      	movs	r3, r0
    19fe:	2d20      	cmp	r5, #32
    1a00:	d100      	bne.n	1a04 <__aeabi_dadd+0x300>
    1a02:	e07d      	b.n	1b00 <__aeabi_dadd+0x3fc>
    1a04:	2040      	movs	r0, #64	; 0x40
    1a06:	1b45      	subs	r5, r0, r5
    1a08:	40a9      	lsls	r1, r5
    1a0a:	430a      	orrs	r2, r1
    1a0c:	1e51      	subs	r1, r2, #1
    1a0e:	418a      	sbcs	r2, r1
    1a10:	2100      	movs	r1, #0
    1a12:	431a      	orrs	r2, r3
    1a14:	e6c7      	b.n	17a6 <__aeabi_dadd+0xa2>
    1a16:	2e00      	cmp	r6, #0
    1a18:	d050      	beq.n	1abc <__aeabi_dadd+0x3b8>
    1a1a:	4e1a      	ldr	r6, [pc, #104]	; (1a84 <__aeabi_dadd+0x380>)
    1a1c:	42b0      	cmp	r0, r6
    1a1e:	d057      	beq.n	1ad0 <__aeabi_dadd+0x3cc>
    1a20:	2680      	movs	r6, #128	; 0x80
    1a22:	426b      	negs	r3, r5
    1a24:	4699      	mov	r9, r3
    1a26:	0436      	lsls	r6, r6, #16
    1a28:	4334      	orrs	r4, r6
    1a2a:	464b      	mov	r3, r9
    1a2c:	2b38      	cmp	r3, #56	; 0x38
    1a2e:	dd00      	ble.n	1a32 <__aeabi_dadd+0x32e>
    1a30:	e0d6      	b.n	1be0 <__aeabi_dadd+0x4dc>
    1a32:	2b1f      	cmp	r3, #31
    1a34:	dd00      	ble.n	1a38 <__aeabi_dadd+0x334>
    1a36:	e135      	b.n	1ca4 <__aeabi_dadd+0x5a0>
    1a38:	2620      	movs	r6, #32
    1a3a:	1af5      	subs	r5, r6, r3
    1a3c:	0026      	movs	r6, r4
    1a3e:	40ae      	lsls	r6, r5
    1a40:	46b2      	mov	sl, r6
    1a42:	003e      	movs	r6, r7
    1a44:	40de      	lsrs	r6, r3
    1a46:	46ac      	mov	ip, r5
    1a48:	0035      	movs	r5, r6
    1a4a:	4656      	mov	r6, sl
    1a4c:	432e      	orrs	r6, r5
    1a4e:	4665      	mov	r5, ip
    1a50:	40af      	lsls	r7, r5
    1a52:	1e7d      	subs	r5, r7, #1
    1a54:	41af      	sbcs	r7, r5
    1a56:	40dc      	lsrs	r4, r3
    1a58:	4337      	orrs	r7, r6
    1a5a:	1bd7      	subs	r7, r2, r7
    1a5c:	42ba      	cmp	r2, r7
    1a5e:	4192      	sbcs	r2, r2
    1a60:	1b0c      	subs	r4, r1, r4
    1a62:	4252      	negs	r2, r2
    1a64:	1aa4      	subs	r4, r4, r2
    1a66:	0006      	movs	r6, r0
    1a68:	46d8      	mov	r8, fp
    1a6a:	e6a3      	b.n	17b4 <__aeabi_dadd+0xb0>
    1a6c:	4664      	mov	r4, ip
    1a6e:	4667      	mov	r7, ip
    1a70:	432c      	orrs	r4, r5
    1a72:	d000      	beq.n	1a76 <__aeabi_dadd+0x372>
    1a74:	e6a2      	b.n	17bc <__aeabi_dadd+0xb8>
    1a76:	2500      	movs	r5, #0
    1a78:	2600      	movs	r6, #0
    1a7a:	2700      	movs	r7, #0
    1a7c:	e706      	b.n	188c <__aeabi_dadd+0x188>
    1a7e:	001e      	movs	r6, r3
    1a80:	e6c4      	b.n	180c <__aeabi_dadd+0x108>
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	000007ff 	.word	0x000007ff
    1a88:	ff7fffff 	.word	0xff7fffff
    1a8c:	800fffff 	.word	0x800fffff
    1a90:	2b1f      	cmp	r3, #31
    1a92:	dc63      	bgt.n	1b5c <__aeabi_dadd+0x458>
    1a94:	2020      	movs	r0, #32
    1a96:	1ac3      	subs	r3, r0, r3
    1a98:	0008      	movs	r0, r1
    1a9a:	4098      	lsls	r0, r3
    1a9c:	469c      	mov	ip, r3
    1a9e:	4683      	mov	fp, r0
    1aa0:	4653      	mov	r3, sl
    1aa2:	0010      	movs	r0, r2
    1aa4:	40d8      	lsrs	r0, r3
    1aa6:	0003      	movs	r3, r0
    1aa8:	4658      	mov	r0, fp
    1aaa:	4318      	orrs	r0, r3
    1aac:	4663      	mov	r3, ip
    1aae:	409a      	lsls	r2, r3
    1ab0:	1e53      	subs	r3, r2, #1
    1ab2:	419a      	sbcs	r2, r3
    1ab4:	4653      	mov	r3, sl
    1ab6:	4302      	orrs	r2, r0
    1ab8:	40d9      	lsrs	r1, r3
    1aba:	e703      	b.n	18c4 <__aeabi_dadd+0x1c0>
    1abc:	0026      	movs	r6, r4
    1abe:	433e      	orrs	r6, r7
    1ac0:	d006      	beq.n	1ad0 <__aeabi_dadd+0x3cc>
    1ac2:	43eb      	mvns	r3, r5
    1ac4:	4699      	mov	r9, r3
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d0c7      	beq.n	1a5a <__aeabi_dadd+0x356>
    1aca:	4e94      	ldr	r6, [pc, #592]	; (1d1c <__aeabi_dadd+0x618>)
    1acc:	42b0      	cmp	r0, r6
    1ace:	d1ac      	bne.n	1a2a <__aeabi_dadd+0x326>
    1ad0:	000c      	movs	r4, r1
    1ad2:	0017      	movs	r7, r2
    1ad4:	0006      	movs	r6, r0
    1ad6:	46d8      	mov	r8, fp
    1ad8:	e698      	b.n	180c <__aeabi_dadd+0x108>
    1ada:	4b90      	ldr	r3, [pc, #576]	; (1d1c <__aeabi_dadd+0x618>)
    1adc:	459a      	cmp	sl, r3
    1ade:	d00b      	beq.n	1af8 <__aeabi_dadd+0x3f4>
    1ae0:	4682      	mov	sl, r0
    1ae2:	e6e7      	b.n	18b4 <__aeabi_dadd+0x1b0>
    1ae4:	2800      	cmp	r0, #0
    1ae6:	d000      	beq.n	1aea <__aeabi_dadd+0x3e6>
    1ae8:	e09e      	b.n	1c28 <__aeabi_dadd+0x524>
    1aea:	0018      	movs	r0, r3
    1aec:	4310      	orrs	r0, r2
    1aee:	d100      	bne.n	1af2 <__aeabi_dadd+0x3ee>
    1af0:	e0e9      	b.n	1cc6 <__aeabi_dadd+0x5c2>
    1af2:	001c      	movs	r4, r3
    1af4:	0017      	movs	r7, r2
    1af6:	46d8      	mov	r8, fp
    1af8:	4e88      	ldr	r6, [pc, #544]	; (1d1c <__aeabi_dadd+0x618>)
    1afa:	e687      	b.n	180c <__aeabi_dadd+0x108>
    1afc:	2500      	movs	r5, #0
    1afe:	e772      	b.n	19e6 <__aeabi_dadd+0x2e2>
    1b00:	2100      	movs	r1, #0
    1b02:	e782      	b.n	1a0a <__aeabi_dadd+0x306>
    1b04:	0023      	movs	r3, r4
    1b06:	433b      	orrs	r3, r7
    1b08:	2e00      	cmp	r6, #0
    1b0a:	d000      	beq.n	1b0e <__aeabi_dadd+0x40a>
    1b0c:	e0ab      	b.n	1c66 <__aeabi_dadd+0x562>
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d100      	bne.n	1b14 <__aeabi_dadd+0x410>
    1b12:	e0e7      	b.n	1ce4 <__aeabi_dadd+0x5e0>
    1b14:	000b      	movs	r3, r1
    1b16:	4313      	orrs	r3, r2
    1b18:	d100      	bne.n	1b1c <__aeabi_dadd+0x418>
    1b1a:	e677      	b.n	180c <__aeabi_dadd+0x108>
    1b1c:	18ba      	adds	r2, r7, r2
    1b1e:	42ba      	cmp	r2, r7
    1b20:	41bf      	sbcs	r7, r7
    1b22:	1864      	adds	r4, r4, r1
    1b24:	427f      	negs	r7, r7
    1b26:	19e4      	adds	r4, r4, r7
    1b28:	0223      	lsls	r3, r4, #8
    1b2a:	d400      	bmi.n	1b2e <__aeabi_dadd+0x42a>
    1b2c:	e0f2      	b.n	1d14 <__aeabi_dadd+0x610>
    1b2e:	4b7c      	ldr	r3, [pc, #496]	; (1d20 <__aeabi_dadd+0x61c>)
    1b30:	0017      	movs	r7, r2
    1b32:	401c      	ands	r4, r3
    1b34:	0006      	movs	r6, r0
    1b36:	e669      	b.n	180c <__aeabi_dadd+0x108>
    1b38:	0020      	movs	r0, r4
    1b3a:	4338      	orrs	r0, r7
    1b3c:	2e00      	cmp	r6, #0
    1b3e:	d1d1      	bne.n	1ae4 <__aeabi_dadd+0x3e0>
    1b40:	2800      	cmp	r0, #0
    1b42:	d15b      	bne.n	1bfc <__aeabi_dadd+0x4f8>
    1b44:	001c      	movs	r4, r3
    1b46:	4314      	orrs	r4, r2
    1b48:	d100      	bne.n	1b4c <__aeabi_dadd+0x448>
    1b4a:	e0a8      	b.n	1c9e <__aeabi_dadd+0x59a>
    1b4c:	001c      	movs	r4, r3
    1b4e:	0017      	movs	r7, r2
    1b50:	46d8      	mov	r8, fp
    1b52:	e65b      	b.n	180c <__aeabi_dadd+0x108>
    1b54:	0006      	movs	r6, r0
    1b56:	2400      	movs	r4, #0
    1b58:	2700      	movs	r7, #0
    1b5a:	e697      	b.n	188c <__aeabi_dadd+0x188>
    1b5c:	4650      	mov	r0, sl
    1b5e:	000b      	movs	r3, r1
    1b60:	3820      	subs	r0, #32
    1b62:	40c3      	lsrs	r3, r0
    1b64:	4699      	mov	r9, r3
    1b66:	4653      	mov	r3, sl
    1b68:	2b20      	cmp	r3, #32
    1b6a:	d100      	bne.n	1b6e <__aeabi_dadd+0x46a>
    1b6c:	e095      	b.n	1c9a <__aeabi_dadd+0x596>
    1b6e:	2340      	movs	r3, #64	; 0x40
    1b70:	4650      	mov	r0, sl
    1b72:	1a1b      	subs	r3, r3, r0
    1b74:	4099      	lsls	r1, r3
    1b76:	430a      	orrs	r2, r1
    1b78:	1e51      	subs	r1, r2, #1
    1b7a:	418a      	sbcs	r2, r1
    1b7c:	464b      	mov	r3, r9
    1b7e:	2100      	movs	r1, #0
    1b80:	431a      	orrs	r2, r3
    1b82:	e69f      	b.n	18c4 <__aeabi_dadd+0x1c0>
    1b84:	2e00      	cmp	r6, #0
    1b86:	d130      	bne.n	1bea <__aeabi_dadd+0x4e6>
    1b88:	0026      	movs	r6, r4
    1b8a:	433e      	orrs	r6, r7
    1b8c:	d067      	beq.n	1c5e <__aeabi_dadd+0x55a>
    1b8e:	43db      	mvns	r3, r3
    1b90:	469a      	mov	sl, r3
    1b92:	2b00      	cmp	r3, #0
    1b94:	d01c      	beq.n	1bd0 <__aeabi_dadd+0x4cc>
    1b96:	4e61      	ldr	r6, [pc, #388]	; (1d1c <__aeabi_dadd+0x618>)
    1b98:	42b0      	cmp	r0, r6
    1b9a:	d060      	beq.n	1c5e <__aeabi_dadd+0x55a>
    1b9c:	4653      	mov	r3, sl
    1b9e:	2b38      	cmp	r3, #56	; 0x38
    1ba0:	dd00      	ble.n	1ba4 <__aeabi_dadd+0x4a0>
    1ba2:	e096      	b.n	1cd2 <__aeabi_dadd+0x5ce>
    1ba4:	2b1f      	cmp	r3, #31
    1ba6:	dd00      	ble.n	1baa <__aeabi_dadd+0x4a6>
    1ba8:	e09f      	b.n	1cea <__aeabi_dadd+0x5e6>
    1baa:	2620      	movs	r6, #32
    1bac:	1af3      	subs	r3, r6, r3
    1bae:	0026      	movs	r6, r4
    1bb0:	409e      	lsls	r6, r3
    1bb2:	469c      	mov	ip, r3
    1bb4:	46b3      	mov	fp, r6
    1bb6:	4653      	mov	r3, sl
    1bb8:	003e      	movs	r6, r7
    1bba:	40de      	lsrs	r6, r3
    1bbc:	0033      	movs	r3, r6
    1bbe:	465e      	mov	r6, fp
    1bc0:	431e      	orrs	r6, r3
    1bc2:	4663      	mov	r3, ip
    1bc4:	409f      	lsls	r7, r3
    1bc6:	1e7b      	subs	r3, r7, #1
    1bc8:	419f      	sbcs	r7, r3
    1bca:	4653      	mov	r3, sl
    1bcc:	40dc      	lsrs	r4, r3
    1bce:	4337      	orrs	r7, r6
    1bd0:	18bf      	adds	r7, r7, r2
    1bd2:	4297      	cmp	r7, r2
    1bd4:	4192      	sbcs	r2, r2
    1bd6:	1864      	adds	r4, r4, r1
    1bd8:	4252      	negs	r2, r2
    1bda:	18a4      	adds	r4, r4, r2
    1bdc:	0006      	movs	r6, r0
    1bde:	e678      	b.n	18d2 <__aeabi_dadd+0x1ce>
    1be0:	4327      	orrs	r7, r4
    1be2:	1e7c      	subs	r4, r7, #1
    1be4:	41a7      	sbcs	r7, r4
    1be6:	2400      	movs	r4, #0
    1be8:	e737      	b.n	1a5a <__aeabi_dadd+0x356>
    1bea:	4e4c      	ldr	r6, [pc, #304]	; (1d1c <__aeabi_dadd+0x618>)
    1bec:	42b0      	cmp	r0, r6
    1bee:	d036      	beq.n	1c5e <__aeabi_dadd+0x55a>
    1bf0:	2680      	movs	r6, #128	; 0x80
    1bf2:	425b      	negs	r3, r3
    1bf4:	0436      	lsls	r6, r6, #16
    1bf6:	469a      	mov	sl, r3
    1bf8:	4334      	orrs	r4, r6
    1bfa:	e7cf      	b.n	1b9c <__aeabi_dadd+0x498>
    1bfc:	0018      	movs	r0, r3
    1bfe:	4310      	orrs	r0, r2
    1c00:	d100      	bne.n	1c04 <__aeabi_dadd+0x500>
    1c02:	e603      	b.n	180c <__aeabi_dadd+0x108>
    1c04:	1ab8      	subs	r0, r7, r2
    1c06:	4684      	mov	ip, r0
    1c08:	4567      	cmp	r7, ip
    1c0a:	41ad      	sbcs	r5, r5
    1c0c:	1ae0      	subs	r0, r4, r3
    1c0e:	426d      	negs	r5, r5
    1c10:	1b40      	subs	r0, r0, r5
    1c12:	0205      	lsls	r5, r0, #8
    1c14:	d400      	bmi.n	1c18 <__aeabi_dadd+0x514>
    1c16:	e62c      	b.n	1872 <__aeabi_dadd+0x16e>
    1c18:	1bd7      	subs	r7, r2, r7
    1c1a:	42ba      	cmp	r2, r7
    1c1c:	4192      	sbcs	r2, r2
    1c1e:	1b1c      	subs	r4, r3, r4
    1c20:	4252      	negs	r2, r2
    1c22:	1aa4      	subs	r4, r4, r2
    1c24:	46d8      	mov	r8, fp
    1c26:	e5f1      	b.n	180c <__aeabi_dadd+0x108>
    1c28:	0018      	movs	r0, r3
    1c2a:	4310      	orrs	r0, r2
    1c2c:	d100      	bne.n	1c30 <__aeabi_dadd+0x52c>
    1c2e:	e763      	b.n	1af8 <__aeabi_dadd+0x3f4>
    1c30:	08f8      	lsrs	r0, r7, #3
    1c32:	0767      	lsls	r7, r4, #29
    1c34:	4307      	orrs	r7, r0
    1c36:	2080      	movs	r0, #128	; 0x80
    1c38:	08e4      	lsrs	r4, r4, #3
    1c3a:	0300      	lsls	r0, r0, #12
    1c3c:	4204      	tst	r4, r0
    1c3e:	d008      	beq.n	1c52 <__aeabi_dadd+0x54e>
    1c40:	08dd      	lsrs	r5, r3, #3
    1c42:	4205      	tst	r5, r0
    1c44:	d105      	bne.n	1c52 <__aeabi_dadd+0x54e>
    1c46:	08d2      	lsrs	r2, r2, #3
    1c48:	0759      	lsls	r1, r3, #29
    1c4a:	4311      	orrs	r1, r2
    1c4c:	000f      	movs	r7, r1
    1c4e:	002c      	movs	r4, r5
    1c50:	46d8      	mov	r8, fp
    1c52:	0f7b      	lsrs	r3, r7, #29
    1c54:	00e4      	lsls	r4, r4, #3
    1c56:	431c      	orrs	r4, r3
    1c58:	00ff      	lsls	r7, r7, #3
    1c5a:	4e30      	ldr	r6, [pc, #192]	; (1d1c <__aeabi_dadd+0x618>)
    1c5c:	e5d6      	b.n	180c <__aeabi_dadd+0x108>
    1c5e:	000c      	movs	r4, r1
    1c60:	0017      	movs	r7, r2
    1c62:	0006      	movs	r6, r0
    1c64:	e5d2      	b.n	180c <__aeabi_dadd+0x108>
    1c66:	2b00      	cmp	r3, #0
    1c68:	d038      	beq.n	1cdc <__aeabi_dadd+0x5d8>
    1c6a:	000b      	movs	r3, r1
    1c6c:	4313      	orrs	r3, r2
    1c6e:	d100      	bne.n	1c72 <__aeabi_dadd+0x56e>
    1c70:	e742      	b.n	1af8 <__aeabi_dadd+0x3f4>
    1c72:	08f8      	lsrs	r0, r7, #3
    1c74:	0767      	lsls	r7, r4, #29
    1c76:	4307      	orrs	r7, r0
    1c78:	2080      	movs	r0, #128	; 0x80
    1c7a:	08e4      	lsrs	r4, r4, #3
    1c7c:	0300      	lsls	r0, r0, #12
    1c7e:	4204      	tst	r4, r0
    1c80:	d0e7      	beq.n	1c52 <__aeabi_dadd+0x54e>
    1c82:	08cb      	lsrs	r3, r1, #3
    1c84:	4203      	tst	r3, r0
    1c86:	d1e4      	bne.n	1c52 <__aeabi_dadd+0x54e>
    1c88:	08d2      	lsrs	r2, r2, #3
    1c8a:	0749      	lsls	r1, r1, #29
    1c8c:	4311      	orrs	r1, r2
    1c8e:	000f      	movs	r7, r1
    1c90:	001c      	movs	r4, r3
    1c92:	e7de      	b.n	1c52 <__aeabi_dadd+0x54e>
    1c94:	2700      	movs	r7, #0
    1c96:	2400      	movs	r4, #0
    1c98:	e5d5      	b.n	1846 <__aeabi_dadd+0x142>
    1c9a:	2100      	movs	r1, #0
    1c9c:	e76b      	b.n	1b76 <__aeabi_dadd+0x472>
    1c9e:	2500      	movs	r5, #0
    1ca0:	2700      	movs	r7, #0
    1ca2:	e5f3      	b.n	188c <__aeabi_dadd+0x188>
    1ca4:	464e      	mov	r6, r9
    1ca6:	0025      	movs	r5, r4
    1ca8:	3e20      	subs	r6, #32
    1caa:	40f5      	lsrs	r5, r6
    1cac:	464b      	mov	r3, r9
    1cae:	002e      	movs	r6, r5
    1cb0:	2b20      	cmp	r3, #32
    1cb2:	d02d      	beq.n	1d10 <__aeabi_dadd+0x60c>
    1cb4:	2540      	movs	r5, #64	; 0x40
    1cb6:	1aed      	subs	r5, r5, r3
    1cb8:	40ac      	lsls	r4, r5
    1cba:	4327      	orrs	r7, r4
    1cbc:	1e7c      	subs	r4, r7, #1
    1cbe:	41a7      	sbcs	r7, r4
    1cc0:	2400      	movs	r4, #0
    1cc2:	4337      	orrs	r7, r6
    1cc4:	e6c9      	b.n	1a5a <__aeabi_dadd+0x356>
    1cc6:	2480      	movs	r4, #128	; 0x80
    1cc8:	2500      	movs	r5, #0
    1cca:	0324      	lsls	r4, r4, #12
    1ccc:	4e13      	ldr	r6, [pc, #76]	; (1d1c <__aeabi_dadd+0x618>)
    1cce:	2700      	movs	r7, #0
    1cd0:	e5dc      	b.n	188c <__aeabi_dadd+0x188>
    1cd2:	4327      	orrs	r7, r4
    1cd4:	1e7c      	subs	r4, r7, #1
    1cd6:	41a7      	sbcs	r7, r4
    1cd8:	2400      	movs	r4, #0
    1cda:	e779      	b.n	1bd0 <__aeabi_dadd+0x4cc>
    1cdc:	000c      	movs	r4, r1
    1cde:	0017      	movs	r7, r2
    1ce0:	4e0e      	ldr	r6, [pc, #56]	; (1d1c <__aeabi_dadd+0x618>)
    1ce2:	e593      	b.n	180c <__aeabi_dadd+0x108>
    1ce4:	000c      	movs	r4, r1
    1ce6:	0017      	movs	r7, r2
    1ce8:	e590      	b.n	180c <__aeabi_dadd+0x108>
    1cea:	4656      	mov	r6, sl
    1cec:	0023      	movs	r3, r4
    1cee:	3e20      	subs	r6, #32
    1cf0:	40f3      	lsrs	r3, r6
    1cf2:	4699      	mov	r9, r3
    1cf4:	4653      	mov	r3, sl
    1cf6:	2b20      	cmp	r3, #32
    1cf8:	d00e      	beq.n	1d18 <__aeabi_dadd+0x614>
    1cfa:	2340      	movs	r3, #64	; 0x40
    1cfc:	4656      	mov	r6, sl
    1cfe:	1b9b      	subs	r3, r3, r6
    1d00:	409c      	lsls	r4, r3
    1d02:	4327      	orrs	r7, r4
    1d04:	1e7c      	subs	r4, r7, #1
    1d06:	41a7      	sbcs	r7, r4
    1d08:	464b      	mov	r3, r9
    1d0a:	2400      	movs	r4, #0
    1d0c:	431f      	orrs	r7, r3
    1d0e:	e75f      	b.n	1bd0 <__aeabi_dadd+0x4cc>
    1d10:	2400      	movs	r4, #0
    1d12:	e7d2      	b.n	1cba <__aeabi_dadd+0x5b6>
    1d14:	0017      	movs	r7, r2
    1d16:	e5b2      	b.n	187e <__aeabi_dadd+0x17a>
    1d18:	2400      	movs	r4, #0
    1d1a:	e7f2      	b.n	1d02 <__aeabi_dadd+0x5fe>
    1d1c:	000007ff 	.word	0x000007ff
    1d20:	ff7fffff 	.word	0xff7fffff

00001d24 <__aeabi_dmul>:
    1d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d26:	4657      	mov	r7, sl
    1d28:	4645      	mov	r5, r8
    1d2a:	46de      	mov	lr, fp
    1d2c:	464e      	mov	r6, r9
    1d2e:	b5e0      	push	{r5, r6, r7, lr}
    1d30:	030c      	lsls	r4, r1, #12
    1d32:	4698      	mov	r8, r3
    1d34:	004e      	lsls	r6, r1, #1
    1d36:	0b23      	lsrs	r3, r4, #12
    1d38:	b087      	sub	sp, #28
    1d3a:	0007      	movs	r7, r0
    1d3c:	4692      	mov	sl, r2
    1d3e:	469b      	mov	fp, r3
    1d40:	0d76      	lsrs	r6, r6, #21
    1d42:	0fcd      	lsrs	r5, r1, #31
    1d44:	2e00      	cmp	r6, #0
    1d46:	d06b      	beq.n	1e20 <__aeabi_dmul+0xfc>
    1d48:	4b6d      	ldr	r3, [pc, #436]	; (1f00 <__aeabi_dmul+0x1dc>)
    1d4a:	429e      	cmp	r6, r3
    1d4c:	d035      	beq.n	1dba <__aeabi_dmul+0x96>
    1d4e:	2480      	movs	r4, #128	; 0x80
    1d50:	465b      	mov	r3, fp
    1d52:	0f42      	lsrs	r2, r0, #29
    1d54:	0424      	lsls	r4, r4, #16
    1d56:	00db      	lsls	r3, r3, #3
    1d58:	4314      	orrs	r4, r2
    1d5a:	431c      	orrs	r4, r3
    1d5c:	00c3      	lsls	r3, r0, #3
    1d5e:	4699      	mov	r9, r3
    1d60:	4b68      	ldr	r3, [pc, #416]	; (1f04 <__aeabi_dmul+0x1e0>)
    1d62:	46a3      	mov	fp, r4
    1d64:	469c      	mov	ip, r3
    1d66:	2300      	movs	r3, #0
    1d68:	2700      	movs	r7, #0
    1d6a:	4466      	add	r6, ip
    1d6c:	9302      	str	r3, [sp, #8]
    1d6e:	4643      	mov	r3, r8
    1d70:	031c      	lsls	r4, r3, #12
    1d72:	005a      	lsls	r2, r3, #1
    1d74:	0fdb      	lsrs	r3, r3, #31
    1d76:	4650      	mov	r0, sl
    1d78:	0b24      	lsrs	r4, r4, #12
    1d7a:	0d52      	lsrs	r2, r2, #21
    1d7c:	4698      	mov	r8, r3
    1d7e:	d100      	bne.n	1d82 <__aeabi_dmul+0x5e>
    1d80:	e076      	b.n	1e70 <__aeabi_dmul+0x14c>
    1d82:	4b5f      	ldr	r3, [pc, #380]	; (1f00 <__aeabi_dmul+0x1dc>)
    1d84:	429a      	cmp	r2, r3
    1d86:	d06d      	beq.n	1e64 <__aeabi_dmul+0x140>
    1d88:	2380      	movs	r3, #128	; 0x80
    1d8a:	0f41      	lsrs	r1, r0, #29
    1d8c:	041b      	lsls	r3, r3, #16
    1d8e:	430b      	orrs	r3, r1
    1d90:	495c      	ldr	r1, [pc, #368]	; (1f04 <__aeabi_dmul+0x1e0>)
    1d92:	00e4      	lsls	r4, r4, #3
    1d94:	468c      	mov	ip, r1
    1d96:	431c      	orrs	r4, r3
    1d98:	00c3      	lsls	r3, r0, #3
    1d9a:	2000      	movs	r0, #0
    1d9c:	4462      	add	r2, ip
    1d9e:	4641      	mov	r1, r8
    1da0:	18b6      	adds	r6, r6, r2
    1da2:	4069      	eors	r1, r5
    1da4:	1c72      	adds	r2, r6, #1
    1da6:	9101      	str	r1, [sp, #4]
    1da8:	4694      	mov	ip, r2
    1daa:	4307      	orrs	r7, r0
    1dac:	2f0f      	cmp	r7, #15
    1dae:	d900      	bls.n	1db2 <__aeabi_dmul+0x8e>
    1db0:	e0b0      	b.n	1f14 <__aeabi_dmul+0x1f0>
    1db2:	4a55      	ldr	r2, [pc, #340]	; (1f08 <__aeabi_dmul+0x1e4>)
    1db4:	00bf      	lsls	r7, r7, #2
    1db6:	59d2      	ldr	r2, [r2, r7]
    1db8:	4697      	mov	pc, r2
    1dba:	465b      	mov	r3, fp
    1dbc:	4303      	orrs	r3, r0
    1dbe:	4699      	mov	r9, r3
    1dc0:	d000      	beq.n	1dc4 <__aeabi_dmul+0xa0>
    1dc2:	e087      	b.n	1ed4 <__aeabi_dmul+0x1b0>
    1dc4:	2300      	movs	r3, #0
    1dc6:	469b      	mov	fp, r3
    1dc8:	3302      	adds	r3, #2
    1dca:	2708      	movs	r7, #8
    1dcc:	9302      	str	r3, [sp, #8]
    1dce:	e7ce      	b.n	1d6e <__aeabi_dmul+0x4a>
    1dd0:	4642      	mov	r2, r8
    1dd2:	9201      	str	r2, [sp, #4]
    1dd4:	2802      	cmp	r0, #2
    1dd6:	d067      	beq.n	1ea8 <__aeabi_dmul+0x184>
    1dd8:	2803      	cmp	r0, #3
    1dda:	d100      	bne.n	1dde <__aeabi_dmul+0xba>
    1ddc:	e20e      	b.n	21fc <STACK_SIZE+0x1fc>
    1dde:	2801      	cmp	r0, #1
    1de0:	d000      	beq.n	1de4 <__aeabi_dmul+0xc0>
    1de2:	e162      	b.n	20aa <STACK_SIZE+0xaa>
    1de4:	2300      	movs	r3, #0
    1de6:	2400      	movs	r4, #0
    1de8:	2200      	movs	r2, #0
    1dea:	4699      	mov	r9, r3
    1dec:	9901      	ldr	r1, [sp, #4]
    1dee:	4001      	ands	r1, r0
    1df0:	b2cd      	uxtb	r5, r1
    1df2:	2100      	movs	r1, #0
    1df4:	0312      	lsls	r2, r2, #12
    1df6:	0d0b      	lsrs	r3, r1, #20
    1df8:	0b12      	lsrs	r2, r2, #12
    1dfa:	051b      	lsls	r3, r3, #20
    1dfc:	4313      	orrs	r3, r2
    1dfe:	4a43      	ldr	r2, [pc, #268]	; (1f0c <__aeabi_dmul+0x1e8>)
    1e00:	0524      	lsls	r4, r4, #20
    1e02:	4013      	ands	r3, r2
    1e04:	431c      	orrs	r4, r3
    1e06:	0064      	lsls	r4, r4, #1
    1e08:	07ed      	lsls	r5, r5, #31
    1e0a:	0864      	lsrs	r4, r4, #1
    1e0c:	432c      	orrs	r4, r5
    1e0e:	4648      	mov	r0, r9
    1e10:	0021      	movs	r1, r4
    1e12:	b007      	add	sp, #28
    1e14:	bc3c      	pop	{r2, r3, r4, r5}
    1e16:	4690      	mov	r8, r2
    1e18:	4699      	mov	r9, r3
    1e1a:	46a2      	mov	sl, r4
    1e1c:	46ab      	mov	fp, r5
    1e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e20:	4303      	orrs	r3, r0
    1e22:	4699      	mov	r9, r3
    1e24:	d04f      	beq.n	1ec6 <__aeabi_dmul+0x1a2>
    1e26:	465b      	mov	r3, fp
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d100      	bne.n	1e2e <__aeabi_dmul+0x10a>
    1e2c:	e189      	b.n	2142 <STACK_SIZE+0x142>
    1e2e:	4658      	mov	r0, fp
    1e30:	f000 fac4 	bl	23bc <__clzsi2>
    1e34:	0003      	movs	r3, r0
    1e36:	3b0b      	subs	r3, #11
    1e38:	2b1c      	cmp	r3, #28
    1e3a:	dd00      	ble.n	1e3e <__aeabi_dmul+0x11a>
    1e3c:	e17a      	b.n	2134 <STACK_SIZE+0x134>
    1e3e:	221d      	movs	r2, #29
    1e40:	1ad3      	subs	r3, r2, r3
    1e42:	003a      	movs	r2, r7
    1e44:	0001      	movs	r1, r0
    1e46:	465c      	mov	r4, fp
    1e48:	40da      	lsrs	r2, r3
    1e4a:	3908      	subs	r1, #8
    1e4c:	408c      	lsls	r4, r1
    1e4e:	0013      	movs	r3, r2
    1e50:	408f      	lsls	r7, r1
    1e52:	4323      	orrs	r3, r4
    1e54:	469b      	mov	fp, r3
    1e56:	46b9      	mov	r9, r7
    1e58:	2300      	movs	r3, #0
    1e5a:	4e2d      	ldr	r6, [pc, #180]	; (1f10 <__aeabi_dmul+0x1ec>)
    1e5c:	2700      	movs	r7, #0
    1e5e:	1a36      	subs	r6, r6, r0
    1e60:	9302      	str	r3, [sp, #8]
    1e62:	e784      	b.n	1d6e <__aeabi_dmul+0x4a>
    1e64:	4653      	mov	r3, sl
    1e66:	4323      	orrs	r3, r4
    1e68:	d12a      	bne.n	1ec0 <__aeabi_dmul+0x19c>
    1e6a:	2400      	movs	r4, #0
    1e6c:	2002      	movs	r0, #2
    1e6e:	e796      	b.n	1d9e <__aeabi_dmul+0x7a>
    1e70:	4653      	mov	r3, sl
    1e72:	4323      	orrs	r3, r4
    1e74:	d020      	beq.n	1eb8 <__aeabi_dmul+0x194>
    1e76:	2c00      	cmp	r4, #0
    1e78:	d100      	bne.n	1e7c <__aeabi_dmul+0x158>
    1e7a:	e157      	b.n	212c <STACK_SIZE+0x12c>
    1e7c:	0020      	movs	r0, r4
    1e7e:	f000 fa9d 	bl	23bc <__clzsi2>
    1e82:	0003      	movs	r3, r0
    1e84:	3b0b      	subs	r3, #11
    1e86:	2b1c      	cmp	r3, #28
    1e88:	dd00      	ble.n	1e8c <__aeabi_dmul+0x168>
    1e8a:	e149      	b.n	2120 <STACK_SIZE+0x120>
    1e8c:	211d      	movs	r1, #29
    1e8e:	1acb      	subs	r3, r1, r3
    1e90:	4651      	mov	r1, sl
    1e92:	0002      	movs	r2, r0
    1e94:	40d9      	lsrs	r1, r3
    1e96:	4653      	mov	r3, sl
    1e98:	3a08      	subs	r2, #8
    1e9a:	4094      	lsls	r4, r2
    1e9c:	4093      	lsls	r3, r2
    1e9e:	430c      	orrs	r4, r1
    1ea0:	4a1b      	ldr	r2, [pc, #108]	; (1f10 <__aeabi_dmul+0x1ec>)
    1ea2:	1a12      	subs	r2, r2, r0
    1ea4:	2000      	movs	r0, #0
    1ea6:	e77a      	b.n	1d9e <__aeabi_dmul+0x7a>
    1ea8:	2501      	movs	r5, #1
    1eaa:	9b01      	ldr	r3, [sp, #4]
    1eac:	4c14      	ldr	r4, [pc, #80]	; (1f00 <__aeabi_dmul+0x1dc>)
    1eae:	401d      	ands	r5, r3
    1eb0:	2300      	movs	r3, #0
    1eb2:	2200      	movs	r2, #0
    1eb4:	4699      	mov	r9, r3
    1eb6:	e79c      	b.n	1df2 <__aeabi_dmul+0xce>
    1eb8:	2400      	movs	r4, #0
    1eba:	2200      	movs	r2, #0
    1ebc:	2001      	movs	r0, #1
    1ebe:	e76e      	b.n	1d9e <__aeabi_dmul+0x7a>
    1ec0:	4653      	mov	r3, sl
    1ec2:	2003      	movs	r0, #3
    1ec4:	e76b      	b.n	1d9e <__aeabi_dmul+0x7a>
    1ec6:	2300      	movs	r3, #0
    1ec8:	469b      	mov	fp, r3
    1eca:	3301      	adds	r3, #1
    1ecc:	2704      	movs	r7, #4
    1ece:	2600      	movs	r6, #0
    1ed0:	9302      	str	r3, [sp, #8]
    1ed2:	e74c      	b.n	1d6e <__aeabi_dmul+0x4a>
    1ed4:	2303      	movs	r3, #3
    1ed6:	4681      	mov	r9, r0
    1ed8:	270c      	movs	r7, #12
    1eda:	9302      	str	r3, [sp, #8]
    1edc:	e747      	b.n	1d6e <__aeabi_dmul+0x4a>
    1ede:	2280      	movs	r2, #128	; 0x80
    1ee0:	2300      	movs	r3, #0
    1ee2:	2500      	movs	r5, #0
    1ee4:	0312      	lsls	r2, r2, #12
    1ee6:	4699      	mov	r9, r3
    1ee8:	4c05      	ldr	r4, [pc, #20]	; (1f00 <__aeabi_dmul+0x1dc>)
    1eea:	e782      	b.n	1df2 <__aeabi_dmul+0xce>
    1eec:	465c      	mov	r4, fp
    1eee:	464b      	mov	r3, r9
    1ef0:	9802      	ldr	r0, [sp, #8]
    1ef2:	e76f      	b.n	1dd4 <__aeabi_dmul+0xb0>
    1ef4:	465c      	mov	r4, fp
    1ef6:	464b      	mov	r3, r9
    1ef8:	9501      	str	r5, [sp, #4]
    1efa:	9802      	ldr	r0, [sp, #8]
    1efc:	e76a      	b.n	1dd4 <__aeabi_dmul+0xb0>
    1efe:	46c0      	nop			; (mov r8, r8)
    1f00:	000007ff 	.word	0x000007ff
    1f04:	fffffc01 	.word	0xfffffc01
    1f08:	00002578 	.word	0x00002578
    1f0c:	800fffff 	.word	0x800fffff
    1f10:	fffffc0d 	.word	0xfffffc0d
    1f14:	464a      	mov	r2, r9
    1f16:	4649      	mov	r1, r9
    1f18:	0c17      	lsrs	r7, r2, #16
    1f1a:	0c1a      	lsrs	r2, r3, #16
    1f1c:	041b      	lsls	r3, r3, #16
    1f1e:	0c1b      	lsrs	r3, r3, #16
    1f20:	0408      	lsls	r0, r1, #16
    1f22:	0019      	movs	r1, r3
    1f24:	0c00      	lsrs	r0, r0, #16
    1f26:	4341      	muls	r1, r0
    1f28:	0015      	movs	r5, r2
    1f2a:	4688      	mov	r8, r1
    1f2c:	0019      	movs	r1, r3
    1f2e:	437d      	muls	r5, r7
    1f30:	4379      	muls	r1, r7
    1f32:	9503      	str	r5, [sp, #12]
    1f34:	4689      	mov	r9, r1
    1f36:	0029      	movs	r1, r5
    1f38:	0015      	movs	r5, r2
    1f3a:	4345      	muls	r5, r0
    1f3c:	444d      	add	r5, r9
    1f3e:	9502      	str	r5, [sp, #8]
    1f40:	4645      	mov	r5, r8
    1f42:	0c2d      	lsrs	r5, r5, #16
    1f44:	46aa      	mov	sl, r5
    1f46:	9d02      	ldr	r5, [sp, #8]
    1f48:	4455      	add	r5, sl
    1f4a:	45a9      	cmp	r9, r5
    1f4c:	d906      	bls.n	1f5c <__aeabi_dmul+0x238>
    1f4e:	468a      	mov	sl, r1
    1f50:	2180      	movs	r1, #128	; 0x80
    1f52:	0249      	lsls	r1, r1, #9
    1f54:	4689      	mov	r9, r1
    1f56:	44ca      	add	sl, r9
    1f58:	4651      	mov	r1, sl
    1f5a:	9103      	str	r1, [sp, #12]
    1f5c:	0c29      	lsrs	r1, r5, #16
    1f5e:	9104      	str	r1, [sp, #16]
    1f60:	4641      	mov	r1, r8
    1f62:	0409      	lsls	r1, r1, #16
    1f64:	042d      	lsls	r5, r5, #16
    1f66:	0c09      	lsrs	r1, r1, #16
    1f68:	4688      	mov	r8, r1
    1f6a:	0029      	movs	r1, r5
    1f6c:	0c25      	lsrs	r5, r4, #16
    1f6e:	0424      	lsls	r4, r4, #16
    1f70:	4441      	add	r1, r8
    1f72:	0c24      	lsrs	r4, r4, #16
    1f74:	9105      	str	r1, [sp, #20]
    1f76:	0021      	movs	r1, r4
    1f78:	4341      	muls	r1, r0
    1f7a:	4688      	mov	r8, r1
    1f7c:	0021      	movs	r1, r4
    1f7e:	4379      	muls	r1, r7
    1f80:	468a      	mov	sl, r1
    1f82:	4368      	muls	r0, r5
    1f84:	4641      	mov	r1, r8
    1f86:	4450      	add	r0, sl
    1f88:	4681      	mov	r9, r0
    1f8a:	0c08      	lsrs	r0, r1, #16
    1f8c:	4448      	add	r0, r9
    1f8e:	436f      	muls	r7, r5
    1f90:	4582      	cmp	sl, r0
    1f92:	d903      	bls.n	1f9c <__aeabi_dmul+0x278>
    1f94:	2180      	movs	r1, #128	; 0x80
    1f96:	0249      	lsls	r1, r1, #9
    1f98:	4689      	mov	r9, r1
    1f9a:	444f      	add	r7, r9
    1f9c:	0c01      	lsrs	r1, r0, #16
    1f9e:	4689      	mov	r9, r1
    1fa0:	0039      	movs	r1, r7
    1fa2:	4449      	add	r1, r9
    1fa4:	9102      	str	r1, [sp, #8]
    1fa6:	4641      	mov	r1, r8
    1fa8:	040f      	lsls	r7, r1, #16
    1faa:	9904      	ldr	r1, [sp, #16]
    1fac:	0c3f      	lsrs	r7, r7, #16
    1fae:	4688      	mov	r8, r1
    1fb0:	0400      	lsls	r0, r0, #16
    1fb2:	19c0      	adds	r0, r0, r7
    1fb4:	4480      	add	r8, r0
    1fb6:	4641      	mov	r1, r8
    1fb8:	9104      	str	r1, [sp, #16]
    1fba:	4659      	mov	r1, fp
    1fbc:	0c0f      	lsrs	r7, r1, #16
    1fbe:	0409      	lsls	r1, r1, #16
    1fc0:	0c09      	lsrs	r1, r1, #16
    1fc2:	4688      	mov	r8, r1
    1fc4:	4359      	muls	r1, r3
    1fc6:	468a      	mov	sl, r1
    1fc8:	0039      	movs	r1, r7
    1fca:	4351      	muls	r1, r2
    1fcc:	4689      	mov	r9, r1
    1fce:	4641      	mov	r1, r8
    1fd0:	434a      	muls	r2, r1
    1fd2:	4651      	mov	r1, sl
    1fd4:	0c09      	lsrs	r1, r1, #16
    1fd6:	468b      	mov	fp, r1
    1fd8:	437b      	muls	r3, r7
    1fda:	18d2      	adds	r2, r2, r3
    1fdc:	445a      	add	r2, fp
    1fde:	4293      	cmp	r3, r2
    1fe0:	d903      	bls.n	1fea <__aeabi_dmul+0x2c6>
    1fe2:	2380      	movs	r3, #128	; 0x80
    1fe4:	025b      	lsls	r3, r3, #9
    1fe6:	469b      	mov	fp, r3
    1fe8:	44d9      	add	r9, fp
    1fea:	4651      	mov	r1, sl
    1fec:	0409      	lsls	r1, r1, #16
    1fee:	0c09      	lsrs	r1, r1, #16
    1ff0:	468a      	mov	sl, r1
    1ff2:	4641      	mov	r1, r8
    1ff4:	4361      	muls	r1, r4
    1ff6:	437c      	muls	r4, r7
    1ff8:	0c13      	lsrs	r3, r2, #16
    1ffa:	0412      	lsls	r2, r2, #16
    1ffc:	444b      	add	r3, r9
    1ffe:	4452      	add	r2, sl
    2000:	46a1      	mov	r9, r4
    2002:	468a      	mov	sl, r1
    2004:	003c      	movs	r4, r7
    2006:	4641      	mov	r1, r8
    2008:	436c      	muls	r4, r5
    200a:	434d      	muls	r5, r1
    200c:	4651      	mov	r1, sl
    200e:	444d      	add	r5, r9
    2010:	0c0f      	lsrs	r7, r1, #16
    2012:	197d      	adds	r5, r7, r5
    2014:	45a9      	cmp	r9, r5
    2016:	d903      	bls.n	2020 <STACK_SIZE+0x20>
    2018:	2180      	movs	r1, #128	; 0x80
    201a:	0249      	lsls	r1, r1, #9
    201c:	4688      	mov	r8, r1
    201e:	4444      	add	r4, r8
    2020:	9f04      	ldr	r7, [sp, #16]
    2022:	9903      	ldr	r1, [sp, #12]
    2024:	46b8      	mov	r8, r7
    2026:	4441      	add	r1, r8
    2028:	468b      	mov	fp, r1
    202a:	4583      	cmp	fp, r0
    202c:	4180      	sbcs	r0, r0
    202e:	4241      	negs	r1, r0
    2030:	4688      	mov	r8, r1
    2032:	4651      	mov	r1, sl
    2034:	0408      	lsls	r0, r1, #16
    2036:	042f      	lsls	r7, r5, #16
    2038:	0c00      	lsrs	r0, r0, #16
    203a:	183f      	adds	r7, r7, r0
    203c:	4658      	mov	r0, fp
    203e:	9902      	ldr	r1, [sp, #8]
    2040:	1810      	adds	r0, r2, r0
    2042:	4689      	mov	r9, r1
    2044:	4290      	cmp	r0, r2
    2046:	4192      	sbcs	r2, r2
    2048:	444f      	add	r7, r9
    204a:	46ba      	mov	sl, r7
    204c:	4252      	negs	r2, r2
    204e:	4699      	mov	r9, r3
    2050:	4693      	mov	fp, r2
    2052:	44c2      	add	sl, r8
    2054:	44d1      	add	r9, sl
    2056:	44cb      	add	fp, r9
    2058:	428f      	cmp	r7, r1
    205a:	41bf      	sbcs	r7, r7
    205c:	45c2      	cmp	sl, r8
    205e:	4189      	sbcs	r1, r1
    2060:	4599      	cmp	r9, r3
    2062:	419b      	sbcs	r3, r3
    2064:	4593      	cmp	fp, r2
    2066:	4192      	sbcs	r2, r2
    2068:	427f      	negs	r7, r7
    206a:	4249      	negs	r1, r1
    206c:	0c2d      	lsrs	r5, r5, #16
    206e:	4252      	negs	r2, r2
    2070:	430f      	orrs	r7, r1
    2072:	425b      	negs	r3, r3
    2074:	4313      	orrs	r3, r2
    2076:	197f      	adds	r7, r7, r5
    2078:	18ff      	adds	r7, r7, r3
    207a:	465b      	mov	r3, fp
    207c:	193c      	adds	r4, r7, r4
    207e:	0ddb      	lsrs	r3, r3, #23
    2080:	9a05      	ldr	r2, [sp, #20]
    2082:	0264      	lsls	r4, r4, #9
    2084:	431c      	orrs	r4, r3
    2086:	0243      	lsls	r3, r0, #9
    2088:	4313      	orrs	r3, r2
    208a:	1e5d      	subs	r5, r3, #1
    208c:	41ab      	sbcs	r3, r5
    208e:	465a      	mov	r2, fp
    2090:	0dc0      	lsrs	r0, r0, #23
    2092:	4303      	orrs	r3, r0
    2094:	0252      	lsls	r2, r2, #9
    2096:	4313      	orrs	r3, r2
    2098:	01e2      	lsls	r2, r4, #7
    209a:	d556      	bpl.n	214a <STACK_SIZE+0x14a>
    209c:	2001      	movs	r0, #1
    209e:	085a      	lsrs	r2, r3, #1
    20a0:	4003      	ands	r3, r0
    20a2:	4313      	orrs	r3, r2
    20a4:	07e2      	lsls	r2, r4, #31
    20a6:	4313      	orrs	r3, r2
    20a8:	0864      	lsrs	r4, r4, #1
    20aa:	485a      	ldr	r0, [pc, #360]	; (2214 <STACK_SIZE+0x214>)
    20ac:	4460      	add	r0, ip
    20ae:	2800      	cmp	r0, #0
    20b0:	dd4d      	ble.n	214e <STACK_SIZE+0x14e>
    20b2:	075a      	lsls	r2, r3, #29
    20b4:	d009      	beq.n	20ca <STACK_SIZE+0xca>
    20b6:	220f      	movs	r2, #15
    20b8:	401a      	ands	r2, r3
    20ba:	2a04      	cmp	r2, #4
    20bc:	d005      	beq.n	20ca <STACK_SIZE+0xca>
    20be:	1d1a      	adds	r2, r3, #4
    20c0:	429a      	cmp	r2, r3
    20c2:	419b      	sbcs	r3, r3
    20c4:	425b      	negs	r3, r3
    20c6:	18e4      	adds	r4, r4, r3
    20c8:	0013      	movs	r3, r2
    20ca:	01e2      	lsls	r2, r4, #7
    20cc:	d504      	bpl.n	20d8 <STACK_SIZE+0xd8>
    20ce:	2080      	movs	r0, #128	; 0x80
    20d0:	4a51      	ldr	r2, [pc, #324]	; (2218 <STACK_SIZE+0x218>)
    20d2:	00c0      	lsls	r0, r0, #3
    20d4:	4014      	ands	r4, r2
    20d6:	4460      	add	r0, ip
    20d8:	4a50      	ldr	r2, [pc, #320]	; (221c <STACK_SIZE+0x21c>)
    20da:	4290      	cmp	r0, r2
    20dc:	dd00      	ble.n	20e0 <STACK_SIZE+0xe0>
    20de:	e6e3      	b.n	1ea8 <__aeabi_dmul+0x184>
    20e0:	2501      	movs	r5, #1
    20e2:	08db      	lsrs	r3, r3, #3
    20e4:	0762      	lsls	r2, r4, #29
    20e6:	431a      	orrs	r2, r3
    20e8:	0264      	lsls	r4, r4, #9
    20ea:	9b01      	ldr	r3, [sp, #4]
    20ec:	4691      	mov	r9, r2
    20ee:	0b22      	lsrs	r2, r4, #12
    20f0:	0544      	lsls	r4, r0, #21
    20f2:	0d64      	lsrs	r4, r4, #21
    20f4:	401d      	ands	r5, r3
    20f6:	e67c      	b.n	1df2 <__aeabi_dmul+0xce>
    20f8:	2280      	movs	r2, #128	; 0x80
    20fa:	4659      	mov	r1, fp
    20fc:	0312      	lsls	r2, r2, #12
    20fe:	4211      	tst	r1, r2
    2100:	d008      	beq.n	2114 <STACK_SIZE+0x114>
    2102:	4214      	tst	r4, r2
    2104:	d106      	bne.n	2114 <STACK_SIZE+0x114>
    2106:	4322      	orrs	r2, r4
    2108:	0312      	lsls	r2, r2, #12
    210a:	0b12      	lsrs	r2, r2, #12
    210c:	4645      	mov	r5, r8
    210e:	4699      	mov	r9, r3
    2110:	4c43      	ldr	r4, [pc, #268]	; (2220 <STACK_SIZE+0x220>)
    2112:	e66e      	b.n	1df2 <__aeabi_dmul+0xce>
    2114:	465b      	mov	r3, fp
    2116:	431a      	orrs	r2, r3
    2118:	0312      	lsls	r2, r2, #12
    211a:	0b12      	lsrs	r2, r2, #12
    211c:	4c40      	ldr	r4, [pc, #256]	; (2220 <STACK_SIZE+0x220>)
    211e:	e668      	b.n	1df2 <__aeabi_dmul+0xce>
    2120:	0003      	movs	r3, r0
    2122:	4654      	mov	r4, sl
    2124:	3b28      	subs	r3, #40	; 0x28
    2126:	409c      	lsls	r4, r3
    2128:	2300      	movs	r3, #0
    212a:	e6b9      	b.n	1ea0 <__aeabi_dmul+0x17c>
    212c:	f000 f946 	bl	23bc <__clzsi2>
    2130:	3020      	adds	r0, #32
    2132:	e6a6      	b.n	1e82 <__aeabi_dmul+0x15e>
    2134:	0003      	movs	r3, r0
    2136:	3b28      	subs	r3, #40	; 0x28
    2138:	409f      	lsls	r7, r3
    213a:	2300      	movs	r3, #0
    213c:	46bb      	mov	fp, r7
    213e:	4699      	mov	r9, r3
    2140:	e68a      	b.n	1e58 <__aeabi_dmul+0x134>
    2142:	f000 f93b 	bl	23bc <__clzsi2>
    2146:	3020      	adds	r0, #32
    2148:	e674      	b.n	1e34 <__aeabi_dmul+0x110>
    214a:	46b4      	mov	ip, r6
    214c:	e7ad      	b.n	20aa <STACK_SIZE+0xaa>
    214e:	2501      	movs	r5, #1
    2150:	1a2a      	subs	r2, r5, r0
    2152:	2a38      	cmp	r2, #56	; 0x38
    2154:	dd06      	ble.n	2164 <STACK_SIZE+0x164>
    2156:	9b01      	ldr	r3, [sp, #4]
    2158:	2400      	movs	r4, #0
    215a:	401d      	ands	r5, r3
    215c:	2300      	movs	r3, #0
    215e:	2200      	movs	r2, #0
    2160:	4699      	mov	r9, r3
    2162:	e646      	b.n	1df2 <__aeabi_dmul+0xce>
    2164:	2a1f      	cmp	r2, #31
    2166:	dc21      	bgt.n	21ac <STACK_SIZE+0x1ac>
    2168:	2520      	movs	r5, #32
    216a:	0020      	movs	r0, r4
    216c:	1aad      	subs	r5, r5, r2
    216e:	001e      	movs	r6, r3
    2170:	40ab      	lsls	r3, r5
    2172:	40a8      	lsls	r0, r5
    2174:	40d6      	lsrs	r6, r2
    2176:	1e5d      	subs	r5, r3, #1
    2178:	41ab      	sbcs	r3, r5
    217a:	4330      	orrs	r0, r6
    217c:	4318      	orrs	r0, r3
    217e:	40d4      	lsrs	r4, r2
    2180:	0743      	lsls	r3, r0, #29
    2182:	d009      	beq.n	2198 <STACK_SIZE+0x198>
    2184:	230f      	movs	r3, #15
    2186:	4003      	ands	r3, r0
    2188:	2b04      	cmp	r3, #4
    218a:	d005      	beq.n	2198 <STACK_SIZE+0x198>
    218c:	0003      	movs	r3, r0
    218e:	1d18      	adds	r0, r3, #4
    2190:	4298      	cmp	r0, r3
    2192:	419b      	sbcs	r3, r3
    2194:	425b      	negs	r3, r3
    2196:	18e4      	adds	r4, r4, r3
    2198:	0223      	lsls	r3, r4, #8
    219a:	d521      	bpl.n	21e0 <STACK_SIZE+0x1e0>
    219c:	2501      	movs	r5, #1
    219e:	9b01      	ldr	r3, [sp, #4]
    21a0:	2401      	movs	r4, #1
    21a2:	401d      	ands	r5, r3
    21a4:	2300      	movs	r3, #0
    21a6:	2200      	movs	r2, #0
    21a8:	4699      	mov	r9, r3
    21aa:	e622      	b.n	1df2 <__aeabi_dmul+0xce>
    21ac:	251f      	movs	r5, #31
    21ae:	0021      	movs	r1, r4
    21b0:	426d      	negs	r5, r5
    21b2:	1a28      	subs	r0, r5, r0
    21b4:	40c1      	lsrs	r1, r0
    21b6:	0008      	movs	r0, r1
    21b8:	2a20      	cmp	r2, #32
    21ba:	d01d      	beq.n	21f8 <STACK_SIZE+0x1f8>
    21bc:	355f      	adds	r5, #95	; 0x5f
    21be:	1aaa      	subs	r2, r5, r2
    21c0:	4094      	lsls	r4, r2
    21c2:	4323      	orrs	r3, r4
    21c4:	1e5c      	subs	r4, r3, #1
    21c6:	41a3      	sbcs	r3, r4
    21c8:	2507      	movs	r5, #7
    21ca:	4303      	orrs	r3, r0
    21cc:	401d      	ands	r5, r3
    21ce:	2200      	movs	r2, #0
    21d0:	2d00      	cmp	r5, #0
    21d2:	d009      	beq.n	21e8 <STACK_SIZE+0x1e8>
    21d4:	220f      	movs	r2, #15
    21d6:	2400      	movs	r4, #0
    21d8:	401a      	ands	r2, r3
    21da:	0018      	movs	r0, r3
    21dc:	2a04      	cmp	r2, #4
    21de:	d1d6      	bne.n	218e <STACK_SIZE+0x18e>
    21e0:	0003      	movs	r3, r0
    21e2:	0765      	lsls	r5, r4, #29
    21e4:	0264      	lsls	r4, r4, #9
    21e6:	0b22      	lsrs	r2, r4, #12
    21e8:	08db      	lsrs	r3, r3, #3
    21ea:	432b      	orrs	r3, r5
    21ec:	2501      	movs	r5, #1
    21ee:	4699      	mov	r9, r3
    21f0:	9b01      	ldr	r3, [sp, #4]
    21f2:	2400      	movs	r4, #0
    21f4:	401d      	ands	r5, r3
    21f6:	e5fc      	b.n	1df2 <__aeabi_dmul+0xce>
    21f8:	2400      	movs	r4, #0
    21fa:	e7e2      	b.n	21c2 <STACK_SIZE+0x1c2>
    21fc:	2280      	movs	r2, #128	; 0x80
    21fe:	2501      	movs	r5, #1
    2200:	0312      	lsls	r2, r2, #12
    2202:	4322      	orrs	r2, r4
    2204:	9901      	ldr	r1, [sp, #4]
    2206:	0312      	lsls	r2, r2, #12
    2208:	0b12      	lsrs	r2, r2, #12
    220a:	400d      	ands	r5, r1
    220c:	4699      	mov	r9, r3
    220e:	4c04      	ldr	r4, [pc, #16]	; (2220 <STACK_SIZE+0x220>)
    2210:	e5ef      	b.n	1df2 <__aeabi_dmul+0xce>
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	000003ff 	.word	0x000003ff
    2218:	feffffff 	.word	0xfeffffff
    221c:	000007fe 	.word	0x000007fe
    2220:	000007ff 	.word	0x000007ff

00002224 <__aeabi_i2d>:
    2224:	b570      	push	{r4, r5, r6, lr}
    2226:	2800      	cmp	r0, #0
    2228:	d030      	beq.n	228c <__aeabi_i2d+0x68>
    222a:	17c3      	asrs	r3, r0, #31
    222c:	18c4      	adds	r4, r0, r3
    222e:	405c      	eors	r4, r3
    2230:	0fc5      	lsrs	r5, r0, #31
    2232:	0020      	movs	r0, r4
    2234:	f000 f8c2 	bl	23bc <__clzsi2>
    2238:	4b17      	ldr	r3, [pc, #92]	; (2298 <__aeabi_i2d+0x74>)
    223a:	4a18      	ldr	r2, [pc, #96]	; (229c <__aeabi_i2d+0x78>)
    223c:	1a1b      	subs	r3, r3, r0
    223e:	1ad2      	subs	r2, r2, r3
    2240:	2a1f      	cmp	r2, #31
    2242:	dd18      	ble.n	2276 <__aeabi_i2d+0x52>
    2244:	4a16      	ldr	r2, [pc, #88]	; (22a0 <__aeabi_i2d+0x7c>)
    2246:	1ad2      	subs	r2, r2, r3
    2248:	4094      	lsls	r4, r2
    224a:	2200      	movs	r2, #0
    224c:	0324      	lsls	r4, r4, #12
    224e:	055b      	lsls	r3, r3, #21
    2250:	0b24      	lsrs	r4, r4, #12
    2252:	0d5b      	lsrs	r3, r3, #21
    2254:	2100      	movs	r1, #0
    2256:	0010      	movs	r0, r2
    2258:	0324      	lsls	r4, r4, #12
    225a:	0d0a      	lsrs	r2, r1, #20
    225c:	0b24      	lsrs	r4, r4, #12
    225e:	0512      	lsls	r2, r2, #20
    2260:	4322      	orrs	r2, r4
    2262:	4c10      	ldr	r4, [pc, #64]	; (22a4 <__aeabi_i2d+0x80>)
    2264:	051b      	lsls	r3, r3, #20
    2266:	4022      	ands	r2, r4
    2268:	4313      	orrs	r3, r2
    226a:	005b      	lsls	r3, r3, #1
    226c:	07ed      	lsls	r5, r5, #31
    226e:	085b      	lsrs	r3, r3, #1
    2270:	432b      	orrs	r3, r5
    2272:	0019      	movs	r1, r3
    2274:	bd70      	pop	{r4, r5, r6, pc}
    2276:	0021      	movs	r1, r4
    2278:	4091      	lsls	r1, r2
    227a:	000a      	movs	r2, r1
    227c:	210b      	movs	r1, #11
    227e:	1a08      	subs	r0, r1, r0
    2280:	40c4      	lsrs	r4, r0
    2282:	055b      	lsls	r3, r3, #21
    2284:	0324      	lsls	r4, r4, #12
    2286:	0b24      	lsrs	r4, r4, #12
    2288:	0d5b      	lsrs	r3, r3, #21
    228a:	e7e3      	b.n	2254 <__aeabi_i2d+0x30>
    228c:	2500      	movs	r5, #0
    228e:	2300      	movs	r3, #0
    2290:	2400      	movs	r4, #0
    2292:	2200      	movs	r2, #0
    2294:	e7de      	b.n	2254 <__aeabi_i2d+0x30>
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	0000041e 	.word	0x0000041e
    229c:	00000433 	.word	0x00000433
    22a0:	00000413 	.word	0x00000413
    22a4:	800fffff 	.word	0x800fffff

000022a8 <__aeabi_d2f>:
    22a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22aa:	004c      	lsls	r4, r1, #1
    22ac:	0d64      	lsrs	r4, r4, #21
    22ae:	030b      	lsls	r3, r1, #12
    22b0:	1c62      	adds	r2, r4, #1
    22b2:	0f45      	lsrs	r5, r0, #29
    22b4:	0a5b      	lsrs	r3, r3, #9
    22b6:	0552      	lsls	r2, r2, #21
    22b8:	432b      	orrs	r3, r5
    22ba:	0fc9      	lsrs	r1, r1, #31
    22bc:	00c5      	lsls	r5, r0, #3
    22be:	0d52      	lsrs	r2, r2, #21
    22c0:	2a01      	cmp	r2, #1
    22c2:	dd28      	ble.n	2316 <__aeabi_d2f+0x6e>
    22c4:	4a3a      	ldr	r2, [pc, #232]	; (23b0 <__aeabi_d2f+0x108>)
    22c6:	18a6      	adds	r6, r4, r2
    22c8:	2efe      	cmp	r6, #254	; 0xfe
    22ca:	dc1b      	bgt.n	2304 <__aeabi_d2f+0x5c>
    22cc:	2e00      	cmp	r6, #0
    22ce:	dd3e      	ble.n	234e <__aeabi_d2f+0xa6>
    22d0:	0180      	lsls	r0, r0, #6
    22d2:	0002      	movs	r2, r0
    22d4:	1e50      	subs	r0, r2, #1
    22d6:	4182      	sbcs	r2, r0
    22d8:	0f6d      	lsrs	r5, r5, #29
    22da:	432a      	orrs	r2, r5
    22dc:	00db      	lsls	r3, r3, #3
    22de:	4313      	orrs	r3, r2
    22e0:	075a      	lsls	r2, r3, #29
    22e2:	d004      	beq.n	22ee <__aeabi_d2f+0x46>
    22e4:	220f      	movs	r2, #15
    22e6:	401a      	ands	r2, r3
    22e8:	2a04      	cmp	r2, #4
    22ea:	d000      	beq.n	22ee <__aeabi_d2f+0x46>
    22ec:	3304      	adds	r3, #4
    22ee:	2280      	movs	r2, #128	; 0x80
    22f0:	04d2      	lsls	r2, r2, #19
    22f2:	401a      	ands	r2, r3
    22f4:	d05a      	beq.n	23ac <__aeabi_d2f+0x104>
    22f6:	3601      	adds	r6, #1
    22f8:	2eff      	cmp	r6, #255	; 0xff
    22fa:	d003      	beq.n	2304 <__aeabi_d2f+0x5c>
    22fc:	019b      	lsls	r3, r3, #6
    22fe:	0a5b      	lsrs	r3, r3, #9
    2300:	b2f4      	uxtb	r4, r6
    2302:	e001      	b.n	2308 <__aeabi_d2f+0x60>
    2304:	24ff      	movs	r4, #255	; 0xff
    2306:	2300      	movs	r3, #0
    2308:	0258      	lsls	r0, r3, #9
    230a:	05e4      	lsls	r4, r4, #23
    230c:	0a40      	lsrs	r0, r0, #9
    230e:	07c9      	lsls	r1, r1, #31
    2310:	4320      	orrs	r0, r4
    2312:	4308      	orrs	r0, r1
    2314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2316:	2c00      	cmp	r4, #0
    2318:	d007      	beq.n	232a <__aeabi_d2f+0x82>
    231a:	431d      	orrs	r5, r3
    231c:	d0f2      	beq.n	2304 <__aeabi_d2f+0x5c>
    231e:	2080      	movs	r0, #128	; 0x80
    2320:	00db      	lsls	r3, r3, #3
    2322:	0480      	lsls	r0, r0, #18
    2324:	4303      	orrs	r3, r0
    2326:	26ff      	movs	r6, #255	; 0xff
    2328:	e7da      	b.n	22e0 <__aeabi_d2f+0x38>
    232a:	432b      	orrs	r3, r5
    232c:	d003      	beq.n	2336 <__aeabi_d2f+0x8e>
    232e:	2305      	movs	r3, #5
    2330:	08db      	lsrs	r3, r3, #3
    2332:	2cff      	cmp	r4, #255	; 0xff
    2334:	d003      	beq.n	233e <__aeabi_d2f+0x96>
    2336:	025b      	lsls	r3, r3, #9
    2338:	0a5b      	lsrs	r3, r3, #9
    233a:	b2e4      	uxtb	r4, r4
    233c:	e7e4      	b.n	2308 <__aeabi_d2f+0x60>
    233e:	2b00      	cmp	r3, #0
    2340:	d032      	beq.n	23a8 <__aeabi_d2f+0x100>
    2342:	2080      	movs	r0, #128	; 0x80
    2344:	03c0      	lsls	r0, r0, #15
    2346:	4303      	orrs	r3, r0
    2348:	025b      	lsls	r3, r3, #9
    234a:	0a5b      	lsrs	r3, r3, #9
    234c:	e7dc      	b.n	2308 <__aeabi_d2f+0x60>
    234e:	0032      	movs	r2, r6
    2350:	3217      	adds	r2, #23
    2352:	db14      	blt.n	237e <__aeabi_d2f+0xd6>
    2354:	2280      	movs	r2, #128	; 0x80
    2356:	271e      	movs	r7, #30
    2358:	0412      	lsls	r2, r2, #16
    235a:	4313      	orrs	r3, r2
    235c:	1bbf      	subs	r7, r7, r6
    235e:	2f1f      	cmp	r7, #31
    2360:	dc0f      	bgt.n	2382 <__aeabi_d2f+0xda>
    2362:	4a14      	ldr	r2, [pc, #80]	; (23b4 <__aeabi_d2f+0x10c>)
    2364:	4694      	mov	ip, r2
    2366:	4464      	add	r4, ip
    2368:	002a      	movs	r2, r5
    236a:	40a5      	lsls	r5, r4
    236c:	002e      	movs	r6, r5
    236e:	40a3      	lsls	r3, r4
    2370:	1e75      	subs	r5, r6, #1
    2372:	41ae      	sbcs	r6, r5
    2374:	40fa      	lsrs	r2, r7
    2376:	4333      	orrs	r3, r6
    2378:	4313      	orrs	r3, r2
    237a:	2600      	movs	r6, #0
    237c:	e7b0      	b.n	22e0 <__aeabi_d2f+0x38>
    237e:	2400      	movs	r4, #0
    2380:	e7d5      	b.n	232e <__aeabi_d2f+0x86>
    2382:	2202      	movs	r2, #2
    2384:	4252      	negs	r2, r2
    2386:	1b96      	subs	r6, r2, r6
    2388:	001a      	movs	r2, r3
    238a:	40f2      	lsrs	r2, r6
    238c:	2f20      	cmp	r7, #32
    238e:	d009      	beq.n	23a4 <__aeabi_d2f+0xfc>
    2390:	4809      	ldr	r0, [pc, #36]	; (23b8 <__aeabi_d2f+0x110>)
    2392:	4684      	mov	ip, r0
    2394:	4464      	add	r4, ip
    2396:	40a3      	lsls	r3, r4
    2398:	432b      	orrs	r3, r5
    239a:	1e5d      	subs	r5, r3, #1
    239c:	41ab      	sbcs	r3, r5
    239e:	2600      	movs	r6, #0
    23a0:	4313      	orrs	r3, r2
    23a2:	e79d      	b.n	22e0 <__aeabi_d2f+0x38>
    23a4:	2300      	movs	r3, #0
    23a6:	e7f7      	b.n	2398 <__aeabi_d2f+0xf0>
    23a8:	2300      	movs	r3, #0
    23aa:	e7ad      	b.n	2308 <__aeabi_d2f+0x60>
    23ac:	0034      	movs	r4, r6
    23ae:	e7bf      	b.n	2330 <__aeabi_d2f+0x88>
    23b0:	fffffc80 	.word	0xfffffc80
    23b4:	fffffc82 	.word	0xfffffc82
    23b8:	fffffca2 	.word	0xfffffca2

000023bc <__clzsi2>:
    23bc:	211c      	movs	r1, #28
    23be:	2301      	movs	r3, #1
    23c0:	041b      	lsls	r3, r3, #16
    23c2:	4298      	cmp	r0, r3
    23c4:	d301      	bcc.n	23ca <__clzsi2+0xe>
    23c6:	0c00      	lsrs	r0, r0, #16
    23c8:	3910      	subs	r1, #16
    23ca:	0a1b      	lsrs	r3, r3, #8
    23cc:	4298      	cmp	r0, r3
    23ce:	d301      	bcc.n	23d4 <__clzsi2+0x18>
    23d0:	0a00      	lsrs	r0, r0, #8
    23d2:	3908      	subs	r1, #8
    23d4:	091b      	lsrs	r3, r3, #4
    23d6:	4298      	cmp	r0, r3
    23d8:	d301      	bcc.n	23de <__clzsi2+0x22>
    23da:	0900      	lsrs	r0, r0, #4
    23dc:	3904      	subs	r1, #4
    23de:	a202      	add	r2, pc, #8	; (adr r2, 23e8 <__clzsi2+0x2c>)
    23e0:	5c10      	ldrb	r0, [r2, r0]
    23e2:	1840      	adds	r0, r0, r1
    23e4:	4770      	bx	lr
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	02020304 	.word	0x02020304
    23ec:	01010101 	.word	0x01010101
	...

000023f8 <__libc_init_array>:
    23f8:	b570      	push	{r4, r5, r6, lr}
    23fa:	2600      	movs	r6, #0
    23fc:	4d0c      	ldr	r5, [pc, #48]	; (2430 <__libc_init_array+0x38>)
    23fe:	4c0d      	ldr	r4, [pc, #52]	; (2434 <__libc_init_array+0x3c>)
    2400:	1b64      	subs	r4, r4, r5
    2402:	10a4      	asrs	r4, r4, #2
    2404:	42a6      	cmp	r6, r4
    2406:	d109      	bne.n	241c <__libc_init_array+0x24>
    2408:	2600      	movs	r6, #0
    240a:	f000 f8d5 	bl	25b8 <_init>
    240e:	4d0a      	ldr	r5, [pc, #40]	; (2438 <__libc_init_array+0x40>)
    2410:	4c0a      	ldr	r4, [pc, #40]	; (243c <__libc_init_array+0x44>)
    2412:	1b64      	subs	r4, r4, r5
    2414:	10a4      	asrs	r4, r4, #2
    2416:	42a6      	cmp	r6, r4
    2418:	d105      	bne.n	2426 <__libc_init_array+0x2e>
    241a:	bd70      	pop	{r4, r5, r6, pc}
    241c:	00b3      	lsls	r3, r6, #2
    241e:	58eb      	ldr	r3, [r5, r3]
    2420:	4798      	blx	r3
    2422:	3601      	adds	r6, #1
    2424:	e7ee      	b.n	2404 <__libc_init_array+0xc>
    2426:	00b3      	lsls	r3, r6, #2
    2428:	58eb      	ldr	r3, [r5, r3]
    242a:	4798      	blx	r3
    242c:	3601      	adds	r6, #1
    242e:	e7f2      	b.n	2416 <__libc_init_array+0x1e>
    2430:	000025c4 	.word	0x000025c4
    2434:	000025c4 	.word	0x000025c4
    2438:	000025c4 	.word	0x000025c4
    243c:	000025c8 	.word	0x000025c8

00002440 <memcmp>:
    2440:	b530      	push	{r4, r5, lr}
    2442:	2400      	movs	r4, #0
    2444:	42a2      	cmp	r2, r4
    2446:	d101      	bne.n	244c <memcmp+0xc>
    2448:	2000      	movs	r0, #0
    244a:	e005      	b.n	2458 <memcmp+0x18>
    244c:	5d03      	ldrb	r3, [r0, r4]
    244e:	1c65      	adds	r5, r4, #1
    2450:	5d0c      	ldrb	r4, [r1, r4]
    2452:	42a3      	cmp	r3, r4
    2454:	d001      	beq.n	245a <memcmp+0x1a>
    2456:	1b18      	subs	r0, r3, r4
    2458:	bd30      	pop	{r4, r5, pc}
    245a:	002c      	movs	r4, r5
    245c:	e7f2      	b.n	2444 <memcmp+0x4>

0000245e <memcpy>:
    245e:	2300      	movs	r3, #0
    2460:	b510      	push	{r4, lr}
    2462:	429a      	cmp	r2, r3
    2464:	d100      	bne.n	2468 <memcpy+0xa>
    2466:	bd10      	pop	{r4, pc}
    2468:	5ccc      	ldrb	r4, [r1, r3]
    246a:	54c4      	strb	r4, [r0, r3]
    246c:	3301      	adds	r3, #1
    246e:	e7f8      	b.n	2462 <memcpy+0x4>

00002470 <memset>:
    2470:	0003      	movs	r3, r0
    2472:	1882      	adds	r2, r0, r2
    2474:	4293      	cmp	r3, r2
    2476:	d100      	bne.n	247a <memset+0xa>
    2478:	4770      	bx	lr
    247a:	7019      	strb	r1, [r3, #0]
    247c:	3301      	adds	r3, #1
    247e:	e7f9      	b.n	2474 <memset+0x4>
    2480:	682f2e2e 	.word	0x682f2e2e
    2484:	732f6c61 	.word	0x732f6c61
    2488:	682f6372 	.word	0x682f6372
    248c:	635f6c61 	.word	0x635f6c61
    2490:	615f6e61 	.word	0x615f6e61
    2494:	636e7973 	.word	0x636e7973
    2498:	0000632e 	.word	0x0000632e
    249c:	682f2e2e 	.word	0x682f2e2e
    24a0:	732f6c61 	.word	0x732f6c61
    24a4:	682f6372 	.word	0x682f6372
    24a8:	695f6c61 	.word	0x695f6c61
    24ac:	00632e6f 	.word	0x00632e6f
    24b0:	682f2e2e 	.word	0x682f2e2e
    24b4:	732f6c61 	.word	0x732f6c61
    24b8:	682f6372 	.word	0x682f6372
    24bc:	755f6c61 	.word	0x755f6c61
    24c0:	74726173 	.word	0x74726173
    24c4:	7973615f 	.word	0x7973615f
    24c8:	632e636e 	.word	0x632e636e
    24cc:	00000000 	.word	0x00000000
    24d0:	682f2e2e 	.word	0x682f2e2e
    24d4:	752f6c61 	.word	0x752f6c61
    24d8:	736c6974 	.word	0x736c6974
    24dc:	6372732f 	.word	0x6372732f
    24e0:	6974752f 	.word	0x6974752f
    24e4:	725f736c 	.word	0x725f736c
    24e8:	62676e69 	.word	0x62676e69
    24ec:	65666675 	.word	0x65666675
    24f0:	00632e72 	.word	0x00632e72
    24f4:	03020100 	.word	0x03020100
    24f8:	07060504 	.word	0x07060504
    24fc:	14100c08 	.word	0x14100c08
    2500:	40302018 	.word	0x40302018

00002504 <_usarts>:
    2504:	00000003 40100004 00030000 0000e282     .......@........
    2514:	00000000                                ....

00002518 <_i2cms>:
	...

00002530 <_i2css>:
	...

00002540 <sercomspi_regs>:
	...
    2554:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2564:	65735f6c 6d6f6372 0000632e 00000301     l_sercom.c......
    2574:	cdc50a00 00001f14 00001dd4 00001dd4     ................
    2584:	00001dd0 00001eec 00001eec 00001ede     ................
    2594:	00001dd0 00001eec 00001ede 00001eec     ................
    25a4:	00001dd0 00001ef4 00001ef4 00001ef4     ................
    25b4:	000020f8                                . ..

000025b8 <_init>:
    25b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    25be:	bc08      	pop	{r3}
    25c0:	469e      	mov	lr, r3
    25c2:	4770      	bx	lr

000025c4 <__init_array_start>:
    25c4:	000000e5 	.word	0x000000e5

000025c8 <_fini>:
    25c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25ca:	46c0      	nop			; (mov r8, r8)
    25cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    25ce:	bc08      	pop	{r3}
    25d0:	469e      	mov	lr, r3
    25d2:	4770      	bx	lr

000025d4 <__fini_array_start>:
    25d4:	000000bd 	.word	0x000000bd
